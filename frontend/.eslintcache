[{"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\index.js":"1","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\context\\CandidateDataContext.js":"2","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\App.js":"3","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\context\\UserContext.js":"4","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\context\\LayoutContext.js":"5","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\themes\\index.js":"6","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\companyRegister.js":"7","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\mailApproval\\ApproveMail.js":"8","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\Register.js":"9","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\candidateCPV.js":"10","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Shortlist.js":"11","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\login\\author269.js":"12","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\login\\Login.js":"13","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\forget\\Forget.js":"14","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Layout\\Layout.js":"15","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\themes\\default.js":"16","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\login\\styles.js":"17","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Notification\\Notification.js":"18","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Notification\\styles.js":"19","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Wrappers\\Wrappers.js":"20","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\YetToJoin.js":"21","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\SalaryBreakup.js":"22","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\Joined.js":"23","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\OfferedDeclined.js":"24","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\Offered.js":"25","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\InterviewScheduled.js":"26","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\ScheduleInterview.js":"27","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\FinalInterviewScheduled.js":"28","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\Candidates.js":"29","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\Requirements.js":"30","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\FinalInterviewCompleted.js":"31","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\DocumentColleted.js":"32","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\Stc.js":"33","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\New.js":"34","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Drop.js":"35","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Ditched.js":"36","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Invoiced.js":"37","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\CreditNotes.js":"38","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Offered.js":"39","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\SalaryBreakup.js":"40","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\OfferedDeclined.js":"41","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\DocumentColleted.js":"42","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Stc.js":"43","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\FinalInterviewCompleted.js":"44","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\ScheduleInterview.js":"45","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Joined.js":"46","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\Offered.js":"47","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\YetToJoin.js":"48","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\OfferedDeclined.js":"49","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\SalaryBreakup.js":"50","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\ScheduleInterview.js":"51","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\InterviewScheduled.js":"52","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\Joined.js":"53","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\Stc.js":"54","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\FinalInterviewCompleted.js":"55","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\New.js":"56","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\FinalInterviewScheduled.js":"57","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\DocumentColleted.js":"58","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\YetToJoin.js":"59","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\SalaryBreakup.js":"60","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\Offered.js":"61","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\Joined.js":"62","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\FinalInterviewScheduled.js":"63","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\InterviewScheduled.js":"64","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\SalaryBreakup.js":"65","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\ScheduleInterview.js":"66","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\ScheduleInterview.js":"67","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\YetToJoin.js":"68","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\Offered.js":"69","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\OfferedDeclined.js":"70","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\Joined.js":"71","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\FinalInterviewCompleted.js":"72","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\New.js":"73","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\DocumentColleted.js":"74","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\InterviewScheduled.js":"75","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\FinalInterviewScheduled.js":"76","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\Stc.js":"77","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\FinalInterviewCompleted.js":"78","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\DocumentColleted.js":"79","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\Stc.js":"80","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\New.js":"81","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\themes\\style.js":"82","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\Search.js":"83","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\Share.js":"84","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\Candidates.js":"85","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\AssignedCandidates.js":"86","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\Candidates.js":"87","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\Candidates.js":"88","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Layout\\styles.js":"89","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\activity\\Activity.js":"90","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\resumeSearch\\ResumeSearch.js":"91","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\activity\\CandidateActivity.js":"92","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\requirements\\Requirements.js":"93","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\activity\\FreeMsgActivity.js":"94","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\forget\\styles.js":"95","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\ParsedResume.js":"96","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\requirements\\AssignRequirements.js":"97","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\chat\\Singlechat.js":"98","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\transaction\\components\\Pdf.js":"99","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Others\\Layout.js":"100","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\ReportLayout.js":"101","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Layout.js":"102","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Layout.js":"103","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\transaction\\Transaction.js":"104","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\chat\\Chat.js":"105","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\contact\\Contact.js":"106","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\company\\Company.js":"107","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\plans\\Plans.js":"108","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\price\\Price.js":"109","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\invoice\\Invoice.js":"110","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\source\\Source.js":"111","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\ticket\\Ticket.js":"112","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\users\\Users.js":"113","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\adminUser\\Admin.js":"114","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\Projects.js":"115","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\dashboard\\Dashboard.js":"116","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\clients\\Clients.js":"117","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\Sidebar.js":"118","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\resumeSearch\\Resume.js":"119","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Header\\Header.js":"120","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\PageTitle\\PageTitle.js":"121","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\SearchLayout.js":"122","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\AddRequirements.js":"123","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AssignAdd.js":"124","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\ExpandButton.js":"125","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\SearchStatus.js":"126","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Bar.js":"127","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\View.js":"128","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Dialogs.js":"129","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Actions.js":"130","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Reverse.js":"131","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AddClient.js":"132","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AddUser.js":"133","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Add.js":"134","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\PageTitle\\styles.js":"135","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"136","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Search.js":"137","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\SearchStatus.js":"138","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\components\\Dot.js":"139","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"140","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\styles.js":"141","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\ProjectApproval.js":"142","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\ProjectView.js":"143","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\ProjectAction.js":"144","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AddProject.js":"145","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\dashboard\\styles.js":"146","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\chat\\styles.js":"147","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Message.js":"148","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Status.js":"149","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Resume.js":"150","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Dialogs.js":"151","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Drop.js":"152","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\MatchJDDialog.js":"153","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Status.js":"154","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Note.js":"155","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Edit.js":"156","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Reverse.js":"157","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Dialogs.js":"158","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Share.js":"159","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\TabView.js":"160","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Header.js":"161","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\DrawerComp.js":"162","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\styles.js":"163","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\Sidebar.js":"164","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"165","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\components\\Dot.js":"166","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\components\\SidebarLink\\styles.js":"167","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\page_not_found\\PageNotFound.js":"168"},{"size":802,"mtime":1715407098239,"results":"169","hashOfConfig":"170"},{"size":483,"mtime":1715407098187,"results":"171","hashOfConfig":"170"},{"size":2749,"mtime":1716315294497,"results":"172","hashOfConfig":"170"},{"size":2110,"mtime":1716208789817,"results":"173","hashOfConfig":"170"},{"size":1445,"mtime":1715407098187,"results":"174","hashOfConfig":"170"},{"size":1558,"mtime":1715407098355,"results":"175","hashOfConfig":"170"},{"size":33943,"mtime":1715407098336,"results":"176","hashOfConfig":"170"},{"size":16861,"mtime":1716429901589,"results":"177","hashOfConfig":"170"},{"size":52227,"mtime":1716209172820,"results":"178","hashOfConfig":"170"},{"size":63376,"mtime":1715407098334,"results":"179","hashOfConfig":"170"},{"size":21185,"mtime":1716208789699,"results":"180","hashOfConfig":"170"},{"size":10778,"mtime":1715407098311,"results":"181","hashOfConfig":"170"},{"size":17102,"mtime":1716346683907,"results":"182","hashOfConfig":"170"},{"size":11915,"mtime":1715407098279,"results":"183","hashOfConfig":"170"},{"size":32796,"mtime":1716356614113,"results":"184","hashOfConfig":"170"},{"size":3886,"mtime":1715407098354,"results":"185","hashOfConfig":"170"},{"size":5655,"mtime":1715407098313,"results":"186","hashOfConfig":"170"},{"size":3853,"mtime":1715407098172,"results":"187","hashOfConfig":"170"},{"size":1063,"mtime":1715407098173,"results":"188","hashOfConfig":"170"},{"size":3971,"mtime":1715407098186,"results":"189","hashOfConfig":"170"},{"size":3182,"mtime":1715407098324,"results":"190","hashOfConfig":"170"},{"size":3193,"mtime":1715407098323,"results":"191","hashOfConfig":"170"},{"size":3174,"mtime":1715407098322,"results":"192","hashOfConfig":"170"},{"size":3196,"mtime":1715407098323,"results":"193","hashOfConfig":"170"},{"size":3178,"mtime":1715407098322,"results":"194","hashOfConfig":"170"},{"size":3222,"mtime":1715407098321,"results":"195","hashOfConfig":"170"},{"size":3222,"mtime":1715407098323,"results":"196","hashOfConfig":"170"},{"size":3226,"mtime":1715407098321,"results":"197","hashOfConfig":"170"},{"size":62479,"mtime":1716539341526,"results":"198","hashOfConfig":"170"},{"size":23124,"mtime":1716219782870,"results":"199","hashOfConfig":"170"},{"size":3194,"mtime":1715407098320,"results":"200","hashOfConfig":"170"},{"size":3200,"mtime":1715407098320,"results":"201","hashOfConfig":"170"},{"size":3395,"mtime":1716209085225,"results":"202","hashOfConfig":"170"},{"size":3165,"mtime":1715407098322,"results":"203","hashOfConfig":"170"},{"size":927,"mtime":1715407098252,"results":"204","hashOfConfig":"170"},{"size":930,"mtime":1715407098251,"results":"205","hashOfConfig":"170"},{"size":1118,"mtime":1716209069919,"results":"206","hashOfConfig":"170"},{"size":932,"mtime":1715407098251,"results":"207","hashOfConfig":"170"},{"size":927,"mtime":1715407098254,"results":"208","hashOfConfig":"170"},{"size":949,"mtime":1715407098255,"results":"209","hashOfConfig":"170"},{"size":945,"mtime":1715407098255,"results":"210","hashOfConfig":"170"},{"size":951,"mtime":1715407098252,"results":"211","hashOfConfig":"170"},{"size":1122,"mtime":1716209074623,"results":"212","hashOfConfig":"170"},{"size":933,"mtime":1715407098253,"results":"213","hashOfConfig":"170"},{"size":971,"mtime":1715407098255,"results":"214","hashOfConfig":"170"},{"size":923,"mtime":1715407098254,"results":"215","hashOfConfig":"170"},{"size":3092,"mtime":1715407098331,"results":"216","hashOfConfig":"170"},{"size":3096,"mtime":1715407098333,"results":"217","hashOfConfig":"170"},{"size":3110,"mtime":1715407098331,"results":"218","hashOfConfig":"170"},{"size":3107,"mtime":1715407098331,"results":"219","hashOfConfig":"170"},{"size":3134,"mtime":1715407098332,"results":"220","hashOfConfig":"170"},{"size":3136,"mtime":1715407098330,"results":"221","hashOfConfig":"170"},{"size":3088,"mtime":1715407098330,"results":"222","hashOfConfig":"170"},{"size":3311,"mtime":1716209089745,"results":"223","hashOfConfig":"170"},{"size":3108,"mtime":1715407098329,"results":"224","hashOfConfig":"170"},{"size":3077,"mtime":1715407098331,"results":"225","hashOfConfig":"170"},{"size":3140,"mtime":1715407098330,"results":"226","hashOfConfig":"170"},{"size":3114,"mtime":1715407098329,"results":"227","hashOfConfig":"170"},{"size":2952,"mtime":1715407098250,"results":"228","hashOfConfig":"170"},{"size":2970,"mtime":1715407098249,"results":"229","hashOfConfig":"170"},{"size":2948,"mtime":1715407098249,"results":"230","hashOfConfig":"170"},{"size":2944,"mtime":1715407098248,"results":"231","hashOfConfig":"170"},{"size":2994,"mtime":1715407098247,"results":"232","hashOfConfig":"170"},{"size":2999,"mtime":1715407098248,"results":"233","hashOfConfig":"170"},{"size":3213,"mtime":1715407098264,"results":"234","hashOfConfig":"170"},{"size":2989,"mtime":1715407098250,"results":"235","hashOfConfig":"170"},{"size":3240,"mtime":1715407098265,"results":"236","hashOfConfig":"170"},{"size":3202,"mtime":1715407098266,"results":"237","hashOfConfig":"170"},{"size":3198,"mtime":1715407098263,"results":"238","hashOfConfig":"170"},{"size":3216,"mtime":1715407098264,"results":"239","hashOfConfig":"170"},{"size":3194,"mtime":1715407098263,"results":"240","hashOfConfig":"170"},{"size":3203,"mtime":1715407098260,"results":"241","hashOfConfig":"170"},{"size":3183,"mtime":1715407098263,"results":"242","hashOfConfig":"170"},{"size":3215,"mtime":1715407098259,"results":"243","hashOfConfig":"170"},{"size":3242,"mtime":1715407098262,"results":"244","hashOfConfig":"170"},{"size":3246,"mtime":1715407098262,"results":"245","hashOfConfig":"170"},{"size":3417,"mtime":1716209078194,"results":"246","hashOfConfig":"170"},{"size":2992,"mtime":1715407098245,"results":"247","hashOfConfig":"170"},{"size":2972,"mtime":1715407098245,"results":"248","hashOfConfig":"170"},{"size":3151,"mtime":1716209065361,"results":"249","hashOfConfig":"170"},{"size":2935,"mtime":1715407098248,"results":"250","hashOfConfig":"170"},{"size":51864,"mtime":1716579850334,"results":"251","hashOfConfig":"170"},{"size":2690,"mtime":1716208789713,"results":"252","hashOfConfig":"170"},{"size":37938,"mtime":1716261967489,"results":"253","hashOfConfig":"170"},{"size":88489,"mtime":1716467097253,"results":"254","hashOfConfig":"170"},{"size":82199,"mtime":1716208789720,"results":"255","hashOfConfig":"170"},{"size":104497,"mtime":1716620900608,"results":"256","hashOfConfig":"170"},{"size":89856,"mtime":1716468010506,"results":"257","hashOfConfig":"170"},{"size":1417,"mtime":1715407098171,"results":"258","hashOfConfig":"170"},{"size":7980,"mtime":1715407098241,"results":"259","hashOfConfig":"170"},{"size":5869,"mtime":1715407098339,"results":"260","hashOfConfig":"170"},{"size":9554,"mtime":1715407098241,"results":"261","hashOfConfig":"170"},{"size":74062,"mtime":1716367432754,"results":"262","hashOfConfig":"170"},{"size":19031,"mtime":1715407098241,"results":"263","hashOfConfig":"170"},{"size":10875,"mtime":1715407098307,"results":"264","hashOfConfig":"170"},{"size":1114,"mtime":1715407098164,"results":"265","hashOfConfig":"170"},{"size":52899,"mtime":1716208789692,"results":"266","hashOfConfig":"170"},{"size":43682,"mtime":1716208789719,"results":"267","hashOfConfig":"170"},{"size":12949,"mtime":1715407098352,"results":"268","hashOfConfig":"170"},{"size":34823,"mtime":1716208789757,"results":"269","hashOfConfig":"170"},{"size":32397,"mtime":1716445525704,"results":"270","hashOfConfig":"170"},{"size":59101,"mtime":1716445680082,"results":"271","hashOfConfig":"170"},{"size":62245,"mtime":1716468044210,"results":"272","hashOfConfig":"170"},{"size":41729,"mtime":1716208789675,"results":"273","hashOfConfig":"170"},{"size":46696,"mtime":1716208789720,"results":"274","hashOfConfig":"170"},{"size":10142,"mtime":1715407098276,"results":"275","hashOfConfig":"170"},{"size":19700,"mtime":1715662779183,"results":"276","hashOfConfig":"170"},{"size":6476,"mtime":1716208789711,"results":"277","hashOfConfig":"170"},{"size":32801,"mtime":1715407098326,"results":"278","hashOfConfig":"170"},{"size":29854,"mtime":1716208789714,"results":"279","hashOfConfig":"170"},{"size":24244,"mtime":1715407098348,"results":"280","hashOfConfig":"170"},{"size":32015,"mtime":1716208789685,"results":"281","hashOfConfig":"170"},{"size":73496,"mtime":1716470062358,"results":"282","hashOfConfig":"170"},{"size":75482,"mtime":1715577037235,"results":"283","hashOfConfig":"170"},{"size":92786,"mtime":1716579551299,"results":"284","hashOfConfig":"170"},{"size":56839,"mtime":1716208789719,"results":"285","hashOfConfig":"170"},{"size":57452,"mtime":1716535552353,"results":"286","hashOfConfig":"170"},{"size":23916,"mtime":1716440724359,"results":"287","hashOfConfig":"170"},{"size":12726,"mtime":1715407098339,"results":"288","hashOfConfig":"170"},{"size":148332,"mtime":1716383195842,"results":"289","hashOfConfig":"170"},{"size":457,"mtime":1715407098175,"results":"290","hashOfConfig":"170"},{"size":47211,"mtime":1716535012942,"results":"291","hashOfConfig":"170"},{"size":19147,"mtime":1716209014075,"results":"292","hashOfConfig":"170"},{"size":9054,"mtime":1715407098150,"results":"293","hashOfConfig":"170"},{"size":1355,"mtime":1715407098161,"results":"294","hashOfConfig":"170"},{"size":3490,"mtime":1716613746329,"results":"295","hashOfConfig":"170"},{"size":51306,"mtime":1716549777078,"results":"296","hashOfConfig":"170"},{"size":47757,"mtime":1716383247329,"results":"297","hashOfConfig":"170"},{"size":60154,"mtime":1716428352106,"results":"298","hashOfConfig":"170"},{"size":7570,"mtime":1716382429452,"results":"299","hashOfConfig":"170"},{"size":1988,"mtime":1715407098178,"results":"300","hashOfConfig":"170"},{"size":10564,"mtime":1716209105043,"results":"301","hashOfConfig":"170"},{"size":17798,"mtime":1716346935347,"results":"302","hashOfConfig":"170"},{"size":91864,"mtime":1716443129857,"results":"303","hashOfConfig":"170"},{"size":482,"mtime":1715407098175,"results":"304","hashOfConfig":"170"},{"size":8252,"mtime":1715591210489,"results":"305","hashOfConfig":"170"},{"size":5038,"mtime":1716208789802,"results":"306","hashOfConfig":"170"},{"size":3559,"mtime":1716545817238,"results":"307","hashOfConfig":"170"},{"size":902,"mtime":1715407098180,"results":"308","hashOfConfig":"170"},{"size":3578,"mtime":1715975229095,"results":"309","hashOfConfig":"170"},{"size":2076,"mtime":1715407098182,"results":"310","hashOfConfig":"170"},{"size":19951,"mtime":1716535544246,"results":"311","hashOfConfig":"170"},{"size":13616,"mtime":1716535535478,"results":"312","hashOfConfig":"170"},{"size":3720,"mtime":1716370753909,"results":"313","hashOfConfig":"170"},{"size":23153,"mtime":1716579404825,"results":"314","hashOfConfig":"170"},{"size":8214,"mtime":1715407098278,"results":"315","hashOfConfig":"170"},{"size":15072,"mtime":1715407098272,"results":"316","hashOfConfig":"170"},{"size":2008,"mtime":1715407098163,"results":"317","hashOfConfig":"170"},{"size":6577,"mtime":1716532953434,"results":"318","hashOfConfig":"170"},{"size":12693,"mtime":1715407098164,"results":"319","hashOfConfig":"170"},{"size":56490,"mtime":1716527693663,"results":"320","hashOfConfig":"170"},{"size":1890,"mtime":1715407098160,"results":"321","hashOfConfig":"170"},{"size":3515,"mtime":1716208789802,"results":"322","hashOfConfig":"170"},{"size":10415,"mtime":1716581547709,"results":"323","hashOfConfig":"170"},{"size":9504,"mtime":1716444417093,"results":"324","hashOfConfig":"170"},{"size":67429,"mtime":1716444846960,"results":"325","hashOfConfig":"170"},{"size":1988,"mtime":1715407098154,"results":"326","hashOfConfig":"170"},{"size":1547,"mtime":1715407098160,"results":"327","hashOfConfig":"170"},{"size":37973,"mtime":1716261857045,"results":"328","hashOfConfig":"170"},{"size":2615,"mtime":1715407098166,"results":"329","hashOfConfig":"170"},{"size":3839,"mtime":1715407098341,"results":"330","hashOfConfig":"170"},{"size":12629,"mtime":1715407098334,"results":"331","hashOfConfig":"170"},{"size":1428,"mtime":1715407098347,"results":"332","hashOfConfig":"170"},{"size":4090,"mtime":1715407098343,"results":"333","hashOfConfig":"170"},{"size":7134,"mtime":1715407098346,"results":"334","hashOfConfig":"170"},{"size":902,"mtime":1715407098345,"results":"335","hashOfConfig":"170"},{"size":3079,"mtime":1715407098346,"results":"336","hashOfConfig":"170"},{"size":1510,"mtime":1716318806023,"results":"337","hashOfConfig":"170"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},"7oqlpn",{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"340"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"340"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"340"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"340"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"340"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"340"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"340"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"340"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"340"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"340"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"340"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"340"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"340"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"340"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"340"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"340"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"340"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"340"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"340"},"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\index.js",[],["694","695"],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\context\\CandidateDataContext.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\App.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\context\\UserContext.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\context\\LayoutContext.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\themes\\index.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\companyRegister.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\mailApproval\\ApproveMail.js",["696","697","698","699","700","701","702","703","704","705","706"],"import React, { useState, useReducer } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  List,\r\n  Box,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Typography,\r\n  Backdrop,\r\n  CircularProgress,\r\n  DialogTitle,\r\n  Dialog,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport Notification from \"../../components/Notification\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useLocation } from 'react-router-dom';\r\nimport OtpInput from 'react-otp-input';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ApprovedSuccess from \"../../images/Approved_Mail.png\"\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const [open, setOpen] = useState(true);\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n\r\n  const handleDialogClose = (event, reason) => {\r\n    if (reason !== 'backdropClick') {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n      autoClose: notificationType === \"error\" ? false : 5000\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  async function onLogin(values) {\r\n    try {\r\n      props.setLoader(true);\r\n      const queryParams = new URLSearchParams(location.search);\r\n      const otp_token = queryParams.get(\"approval_id\");\r\n  \r\n      const result = await axios.post(`${process.env.REACT_APP_SERVER}CC/checkApprovalValidity`, {\r\n        \"otp\": values.otp\r\n      }, {\r\n        headers: {\r\n          Token: otp_token\r\n        }\r\n      });\r\n  \r\n      if (result.data.status === true) {\r\n        setOpen(false);\r\n        props.setData(result.data.c_data);\r\n        props.setLof(result.data.levelOfHiring_data);\r\n        props.setOrgRec(result.data.ordrec_data);\r\n      } else if (result.data.status === false) {\r\n        handleNotificationCall(\"error\", result.data.message);\r\n      }\r\n  \r\n      if (result?.data?.approved) {\r\n        props.setApprove(result.data.approved);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      props.setLoader(false);\r\n    }\r\n  }\r\n  \r\n  const validationSchema = Yup.object().shape({\r\n    otp: Yup.string().length(4, 'OTP must be exactly 4 digits').required('OTP is required')\r\n  });\r\n\r\n  const focusStyle = {\r\n    border: '2px solid blue',\r\n  };\r\n\r\n  const inputStyle = {\r\n    width: '3rem',\r\n    height: '3rem',\r\n    margin: '0 1rem',\r\n    fontSize: '2rem',\r\n    textAlign: 'center',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc',\r\n  };\r\n\r\n  const containerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  };\r\n\r\n  // const handleOtpsubmit = (value) => {\r\n  //   onClose(value);\r\n  // };\r\n  const {\r\n    register,\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <Dialog onClose={handleDialogClose} aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\" open={open} >\r\n      <div style={{ padding: '20px', display: 'grid', justifyContent: 'center' }}>\r\n        <DialogTitle id=\"simple-dialog-title\"  >\r\n          <Typography variant=\"h6\" style={{ textAlign: 'center', margin: 0, fontWeight: 600 }}> OTP Verification</Typography>\r\n        </DialogTitle>\r\n        <Typography variant=\"body2\" style={{ textAlign: 'center', margin: 0 }}> Enter the Verification code here</Typography>\r\n        <List>\r\n          <form onSubmit={handleSubmit(onLogin)} style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\", gap: \"40px\", padding: \"20px 0px 0px 0px\" }}>\r\n            <Controller\r\n              name=\"otp\"\r\n              control={control}\r\n              render={({ field }) => (\r\n                <OtpInput\r\n                  value={field.value}\r\n                  onChange={field.onChange}\r\n                  containerStyle={containerStyle}\r\n                  focusStyle={focusStyle}\r\n                  inputStyle={inputStyle}\r\n                  numInputs={4}\r\n                  renderSeparator={<span>-</span>}\r\n                  renderInput={(props) => <input {...props} />}\r\n                />\r\n              )}\r\n            />\r\n            {errors.otp && <p>{errors.otp.message}</p>}\r\n\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button} type=\"submit\" disabled={isSubmitting}>\r\n              {isSubmitting ? 'Verifying...' : 'Verify OTP'}\r\n            </Button>\r\n          </form>\r\n\r\n          {/* <Grid item xs={12}  >\r\n            <InputLabel shrink htmlFor=\"otp\" >  OTP </InputLabel>\r\n            <FormControl className={classes.margin}>\r\n\r\n              <TextField name=\"otp\" {...register(\"otp\")} classes={{ root: classes.customTextField }} InputProps={{ disableUnderline: true }} placeholder='Enter Otp' size=\"small\" error={errors.otp ? true : false} />\r\n\r\n              <Typography variant=\"inherit\" color=\"error\"> {errors.otp?.message} </Typography>\r\n            </FormControl>\r\n          </Grid>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleSubmit(onLogin)}\r\n          >\r\n            Login\r\n          </Button> */}\r\n        </List>\r\n\r\n        {/* <Backdrop className={classes.backdrop} open={loader}  >\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop> */}\r\n      </div>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n\r\nexport default function ApproveMail( ) {\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const approval_token = queryParams.get(\"approval_id\");\r\n  const mobile = queryParams.get(\"mobile\");\r\n\r\n  const [loader, setLoader] = useState(false);\r\n  const mobileQuery = useMediaQuery('(max-width:600px)');\r\n  const [sourceData, setSourceData] = useState({});\r\n  const [levelOfHiring, setLevelOfHiring] = useState([]);\r\n  const [OrgRecData, setOrgRecData] = useState([]);\r\n  const [approved, setApproved] = useState(\"\");\r\n\r\n  const useTableStyles = makeStyles(theme => ({\r\n    MuiToolbar:{\r\n      \"&root\":{\r\n        background:'red'\r\n      }\r\n    }\r\n  }))\r\n\r\n\r\n\r\n  function handleApproval(isApproved) {\r\n    try {\r\n      setLoader(true);\r\n      const queryParams = new URLSearchParams(location.search);\r\n      const otp_token = queryParams.get(\"approval_id\");\r\n\r\n      axios.post(`${process.env.REACT_APP_SERVER}CC/approveCLient`, {\r\n        \"approved\": isApproved\r\n      }, {\r\n        headers: {\r\n          Token: otp_token\r\n        }\r\n      })\r\n        .then((result) => {\r\n          if (result.data.status === true) {\r\n              setApproved(result.data.approved)\r\n          }\r\n\r\n          setLoader(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setLoader(false);\r\n\r\n        });\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n\r\n\r\n  }\r\n  return (\r\n    <Box style={{ display: 'flex', justifyContent: 'center', position: 'absolute', top: 0, bottom: 0, left: 0, right: 0 }}>\r\n      <Grid container spacing={2} direction=\"row\" className={classes.ApproveMailContainer}>\r\n\r\n        {!approved ?\r\n          <>\r\n          <SimpleDialog setData={setSourceData} setLof={setLevelOfHiring} setOrgRec={setOrgRecData} setApprove={setApproved} setLoader={setLoader}/>\r\n\r\n            <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n              <Grid item xs={12} sm={12} md={12} lg={12} style={{ display: 'flex', }}>\r\n                <Typography variant=\"h3\" style={{ textAlign: 'center' }}>Approval Mail</Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2} >\r\n              <Grid item xs={12}>\r\n                <MUIDataTable\r\n                  title=\"Project Details\"\r\n                  options={{\r\n                    textLabels: {\r\n                      body: {\r\n                        noMatch: 'Oops! Matching record could not be found',\r\n                      }\r\n                    },\r\n                    viewColumns: false,\r\n                    pagination: false,\r\n                    sort: false,\r\n                    selectableRows: \"none\",\r\n                    search: false,\r\n                    filter: false,\r\n                    download: false,\r\n                    print: false,\r\n                    fixedHeader: false,\r\n                    responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n                  }}\r\n                  columns={[\r\n                    {\r\n                      name: \"S.No\",\r\n                    },\r\n\r\n                    {\r\n                      name: \"Project Name\",\r\n                    },\r\n\r\n                    {\r\n                      name: \"Project Division\",\r\n                    },\r\n                    {\r\n                      name: \"Hiring Manager\",\r\n                    },\r\n                    {\r\n                      name: \"Hr Business Unit Code\",\r\n                    },\r\n                    {\r\n                      name: \"Project Region\",\r\n                    },\r\n                    {\r\n                      name: \"Project Location\",\r\n                    },\r\n                    {\r\n                      name: \"Reason for Hiring\",\r\n                    },\r\n                  ]}\r\n                  data={Object.keys(sourceData).length ? [[\r\n                    1,\r\n                    sourceData.clientName,\r\n                    sourceData.clientIndustry,\r\n                    (sourceData.handler.firstName) + (sourceData.handler.lastName),\r\n                    sourceData.hrbpCode,\r\n                    sourceData.projectRegion,\r\n                    sourceData.projectLocation,\r\n                    sourceData.reasonForHiring,\r\n                  ]] : []\r\n                  }\r\n                />\r\n\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <MUIDataTable\r\n                  title=\"Number To Be Hired\"\r\n                  options={{\r\n                    textLabels: {\r\n                      body: {\r\n                        noMatch: 'Oops! Matching record could not be found',\r\n                      }\r\n                    },\r\n                    viewColumns: false,\r\n                    searchAlwaysOpen: false,\r\n                    pagination: false,\r\n                    sort: false,\r\n                    selectableRows: \"none\",\r\n                    search: false,\r\n                    filter: false,\r\n                    download: false,\r\n                    print: false,\r\n                    fixedHeader: false,\r\n                    responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n                  }}\r\n                  columns={[\r\n                    {\r\n                      name: \"S.No\",\r\n                    },\r\n\r\n                    {\r\n                      name: \"Hiring Level\",\r\n                    },\r\n\r\n                    {\r\n                      name: \"Number To Be Hired\",\r\n                    },\r\n\r\n                  ]}\r\n                  data={levelOfHiring.length ? levelOfHiring.map((lof, index) => [\r\n                    (index + 1),\r\n                    lof.name,\r\n                    lof.noOfHires\r\n                  ]) : []\r\n                  }\r\n                />\r\n\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                <MUIDataTable\r\n                  title=\"Recruiter Details\"\r\n                  options={{\r\n                    textLabels: {\r\n                      body: {\r\n                        noMatch: 'Oops! Matching record could not be found',\r\n                      }\r\n                    },\r\n                    viewColumns: false,\r\n                    pagination: false,\r\n                    sort: false,\r\n                    selectableRows: \"none\",\r\n                    search: false,\r\n                    filter: false,\r\n                    download: false,\r\n                    print: false,\r\n                    fixedHeader: false,\r\n                    responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n                  }}\r\n                  columns={[\r\n                    {\r\n                      name: \"S.No\",\r\n                    },\r\n\r\n                    {\r\n                      name: \"Recruiter Name\",\r\n                    },\r\n\r\n                    {\r\n                      name: \"Email\",\r\n                    },\r\n                    {\r\n                      name: \"Mobile Number\",\r\n                    },\r\n\r\n                  ]}\r\n                  data={OrgRecData.length ? OrgRecData.map((rec, index) => [\r\n                    (index + 1),\r\n                    rec.name,\r\n                    rec.email,\r\n                    rec.mobile\r\n\r\n                  ]) : []\r\n                  }\r\n                />\r\n\r\n              </Grid>\r\n              <Grid item xs={12} style={{ display: 'flex', gap: \"20px\", justifyContent: 'center', margin: 'auto' }}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => handleApproval(\"Approved\")}\r\n                >\r\n                  Approved\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={() => handleApproval(\"Disapproved\")}\r\n                >\r\n                  Not Approved\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                  onClick={() => handleApproval(\"Pending\")}\r\n                >\r\n                  Pending\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n          :\r\n          approved ===\"Approved\" ?\r\n          <div style={{display:'flex',justifyContent:'center',alignItems:'center',position:'absolute',top:0,bottom:0,left:0,right:0}}>\r\n            <CheckCircleIcon style={{ color: \"#08c905\",fontSize:'50px' }} />   \r\n            <h1 style={{color:\"#08c905\",fontSize:'50px',marginLeft:'10px'}}>Approved</h1>\r\n          </div>:\r\n          approved ===\"Disapproved\" ?\r\n          <div style={{display:'flex',justifyContent:'center',alignItems:'center',position:'absolute',top:0,bottom:0,left:0,right:0}}>\r\n            <HighlightOffIcon style={{ color: \"#FF0000\",fontSize:'50px' }} />\r\n            <h1 style={{color:\"#FF0000\",fontSize:'50px',marginLeft:'10px'}}>Not Approved</h1>\r\n          </div>:\r\n          approved ===\"Pending\" ?\r\n          <div style={{display:'flex',justifyContent:'center',alignItems:'center',position:'absolute',top:0,bottom:0,left:0,right:0}}>\r\n            <ScheduleIcon style={{ color: \"#1679AB\",fontSize:'50px' }} />\r\n            <h1 style={{color:\"#1679AB\",fontSize:'50px',marginLeft:'10px'}}>Pending</h1>\r\n          </div>:<>\r\n\r\n          </>\r\n   \r\n        }\r\n      </Grid>\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </Box>\r\n  );\r\n}\r\n\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\Register.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\candidateCPV.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Shortlist.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\login\\author269.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\login\\Login.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\forget\\Forget.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Layout\\Layout.js",["707"],"import React, { useEffect, useState } from \"react\";\r\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\n// styles\r\nimport useStyles from \"./styles\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\n\r\n// component\r\nimport Header from \"../Header\";\r\nimport Sidebar from \"../Sidebar\";\r\nimport ParsedResume from \"../Candidates/ParsedResume\";\r\n // pages\r\nimport Dashboard from \"../../pages/dashboard\";\r\nimport Clients from \"../../pages/clients\";\r\nimport Projects from \"../../pages/projects\";\r\nimport AdminCandidates from \"../../pages/admin/Candidates\";\r\nimport AssignedCandidates from \"../../pages/admin/AssignedCandidates\";\r\nimport Share from \"../../pages/admin/Share\";\r\n\r\nimport CCCandidates from \"../../pages/cc/Candidates\";\r\nimport RecruiterCandidates from \"../../pages/recruiter/Candidates\";\r\nimport Search from \"../../pages/recruiter/Search\";\r\nimport Admin from \"../../pages/adminUser\";\r\nimport Users from \"../../pages/users\";\r\nimport Source from \"../../pages/source\";\r\nimport Ticket from \"../../pages/ticket\";\r\n\r\nimport Activity from \"../../pages/activity/Activity\"; \r\nimport FreeMessageActivity from \"../../pages/activity/FreeMsgActivity\";\r\nimport CandidateActivity from \"../../pages/activity/CandidateActivity\";\r\n\r\nimport AssignRequirements from \"../../pages/requirements/AssignRequirements\";\r\n\r\nimport PDF from \"../../pages/transaction/components/Pdf\"\r\nimport Requirements from \"../../pages/requirements/Requirements\";\r\nimport Chat from \"../../pages/chat\";\r\nimport Singlechat from \"../../pages/chat/Singlechat\";\r\nimport Invoice from \"../../pages/invoice\";\r\nimport ResumeSearch from \"../../pages/resumeSearch/ResumeSearch\"\r\nimport Price from \"../../pages/price\";\r\nimport Transaction from \"../../pages/transaction\";\r\nimport Plans from \"../../pages/plans\";\r\n import Company from \"../../pages/company\";  \r\nimport Contact from \"../../pages/contact\";  \r\n\r\nimport New from \"../../pages/admin/dashboard/New\";\r\nimport STC from \"../../pages/admin/dashboard/Stc\";\r\nimport DocumentColleted from \"../../pages/admin/dashboard/DocumentColleted\";\r\nimport FinalInterviewCompleted from \"../../pages/admin/dashboard/FinalInterviewCompleted\";\r\nimport FinalInterviewScheduled from \"../../pages/admin/dashboard/FinalInterviewScheduled\";\r\nimport InterviewScheduled from \"../../pages/admin/dashboard/InterviewScheduled\";\r\nimport ScheduleInterview from \"../../pages/admin/dashboard/ScheduleInterview\"; \r\nimport Joined from \"../../pages/admin/dashboard/Joined\";\r\nimport Offered from \"../../pages/admin/dashboard/Offered\";\r\nimport SalaryBreakup from \"../../pages/admin/dashboard/SalaryBreakup\";\r\nimport YetToJoin from \"../../pages/admin/dashboard/YetToJoin\";\r\n\r\nimport CCNew from \"../../pages/cc/dashboard/New\";\r\nimport CCSTC from \"../../pages/cc/dashboard/Stc\";\r\nimport CCDocumentColleted from \"../../pages/cc/dashboard/DocumentColleted\";\r\nimport CCFinalInterviewCompleted from \"../../pages/cc/dashboard/FinalInterviewCompleted\";\r\nimport CCFinalInterviewScheduled from \"../../pages/cc/dashboard/FinalInterviewScheduled\";\r\nimport CCInterviewScheduled from \"../../pages/cc/dashboard/InterviewScheduled\";\r\nimport CCScheduleInterview from \"../../pages/cc/dashboard/ScheduleInterview\";\r\nimport CCJoined from \"../../pages/cc/dashboard/Joined\";\r\nimport CCOffered from \"../../pages/cc/dashboard/Offered\";\r\nimport CCOfferedDeclined from \"../../pages/cc/dashboard/OfferedDeclined\";\r\nimport CCSalaryBreakup from \"../../pages/cc/dashboard/SalaryBreakup\";\r\nimport CCYetToJoin from \"../../pages/cc/dashboard/YetToJoin\";\r\n\r\nimport RECNew from \"../../pages/recruiter/dashboard/New\";\r\nimport RECSTC from \"../../pages/recruiter/dashboard/Stc\";\r\nimport RECDocumentColleted from \"../../pages/recruiter/dashboard/DocumentColleted\";\r\nimport RECFinalInterviewScheduled from \"../../pages/recruiter/dashboard/FinalInterviewScheduled\"\r\nimport RECFinalInterviewCompleted from \"../../pages/recruiter/dashboard/FinalInterviewCompleted\";\r\nimport RECScheduleInterview from \"../../pages/recruiter/dashboard/ScheduleInterview\";\r\nimport RECInterviewScheduled from \"../../pages/recruiter/dashboard/InterviewScheduled\";\r\nimport RECJoined from \"../../pages/recruiter/dashboard/Joined\";\r\nimport RECOffered from \"../../pages/recruiter/dashboard/Offered\";\r\nimport RECOfferedDeclined from \"../../pages/recruiter/dashboard/OfferedDeclined\";\r\nimport RECSalaryBreakup from \"../../pages/recruiter/dashboard/SalaryBreakup\";\r\nimport RECYetToJoin from \"../../pages/recruiter/dashboard/YetToJoin\";\r\n\r\nimport AllSTC from \"../../pages/admin/reports/Stc\";\r\nimport AllScheduleInterview from \"../../pages/admin/reports/ScheduleInterview\"; \r\nimport AllDocumentColleted from \"../../pages/admin/reports/DocumentColleted\";\r\nimport AllFinalInterviewCompleted from \"../../pages/admin/reports/FinalInterviewCompleted\";\r\nimport AllJoined from \"../../pages/admin/reports/Joined\";\r\nimport AllOffered from \"../../pages/admin/reports/Offered\";\r\nimport AllOfferedDeclined from \"../../pages/admin/reports/OfferedDeclined\";\r\nimport AllSalaryBreakup from \"../../pages/admin/reports/SalaryBreakup\";\r\nimport AllInvoiced from \"../../pages/admin/reports/Invoiced\";\r\nimport AllDitched from \"../../pages/admin/reports/Ditched\";\r\nimport AllCreditNotes from \"../../pages/admin/reports/CreditNotes\";\r\nimport AllDrop from \"../../pages/admin/reports/Drop\";\r\n\r\n \r\nimport othersCandidates from \"../../pages/others/Candidates\";\r\nimport othersRequirements from \"../../pages/others/Requirements\"; \r\nimport othersNew from \"../../pages/others/dashboard/New\";\r\nimport othersSTC from \"../../pages/others/dashboard/Stc\";\r\nimport othersDocumentColleted from \"../../pages/others/dashboard/DocumentColleted\";\r\nimport othersFinalInterviewScheduled from \"../../pages/others/dashboard/FinalInterviewScheduled\" ;\r\nimport othersFinalInterviewCompleted from \"../../pages/others/dashboard/FinalInterviewCompleted\";\r\nimport othersInterviewScheduled from \"../../pages/others/dashboard/InterviewScheduled\";\r\nimport othersScheduleInterview from \"../../pages/others/dashboard/ScheduleInterview\";\r\nimport othersJoined from \"../../pages/others/dashboard/Joined\";\r\nimport othersOffered from \"../../pages/others/dashboard/Offered\";\r\nimport othersOfferedDeclined from \"../../pages/others/dashboard/OfferedDeclined\";\r\nimport othersSalaryBreakup from \"../../pages/others/dashboard/SalaryBreakup\";\r\nimport othersYetToJoin from \"../../pages/others/dashboard/YetToJoin\";\r\nimport { useLayoutState } from \"../../context/LayoutContext\";\r\n\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { ToastContainer } from \"react-toastify\"; \r\nimport { createTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\n// context\r\n\r\nfunction Layout(props) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  var layoutState = useLayoutState();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const decoded = jwtDecode(token);\r\n  const role = decoded.role;\r\n  const companyType = decoded.companyType || \"\";\r\n\r\n  const getMuiTheme = () =>\r\n    createTheme({\r\n      overrides: {\r\n        MuiAvatar:{\r\n          root:{\r\n            fontFamily: '\"Satoshi\"'\r\n          }\r\n        },\r\n        MuiMenuItem:{\r\n          root:{\r\n            fontFamily: '\"Satoshi\"'\r\n          }\r\n        },\r\n        MUIDataTableToolbar: {\r\n          actions: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-end\",\r\n          },\r\n          icon:{\r\n            color: \"#064be2\",\r\n           \"& svg\":{\r\n            color: \"white\",\r\n            width: \"25px\",\r\n            cursor: \"pointer\",\r\n            height: \"25px\",\r\n            padding: \"5px\",\r\n            boxShadow: \"0 3px 9px 0 rgba(0,0,0,0.3)\",\r\n            borderRadius: \"100%\",\r\n            backgroundColor: \"#064be2\"\r\n           }\r\n          },\r\n\r\n          iconActive:{\r\n            color: \"#064be2\",\r\n            \"& svg\":{\r\n             color: \"white\",\r\n             width: \"25px\",\r\n             cursor: \"pointer\",\r\n             height: \"25px\",\r\n             padding: \"5px\",\r\n             boxShadow: \"0 3px 9px 0 rgba(0,0,0,0.3)\",\r\n             borderRadius: \"100%\",\r\n             backgroundColor: \"#064be2\"\r\n            }\r\n          }\r\n        },\r\n            MUIDataTableBody:{\r\n            \r\n            emptyTitle:{  \"@media (max-width: 425px)\": { display: \"flex\", justifyContent: \"flex-end\", alignItems:\"center\" \r\n            },\r\n            \"@media (max-width: 959.95px)\": {\r\n               marginLeft: \"-100px\",    \r\n            }\r\n          }\r\n            },\r\n        \r\n        MUIDataTableBodyCell: {  \r\n         \r\n          stackedCommon: {\r\n           \r\n            \"@media (max-width:959.95px)\": { fontSize: \"13px !important\",\r\n              \"&:nth-last-child(2)\":{ fontWeight: 700 }, \"&:last-child\":{ lineBreak:\"anywhere\" }\r\n            },\r\n\r\n             \r\n          },\r\n          responsiveStackedSmallParent:{\r\n            \"@media (max-width:425px)\": { width:\"93%\"\r\n            },\r\n          }\r\n        },\r\n        MuiTable:{\r\n          root:{\r\n            \"& caption\":{ fontFamily: '\"Satoshi\" !important',\r\n            }\r\n          }\r\n        },\r\n        MuiTab:{\r\n          root:{\r\n            minWidth: \"20% !important\",\r\n          },\r\n          wrapper:{\r\n            textTransform: \"initial !important\",\r\n          }\r\n        },\r\n        MuiTabs:{\r\n          scroller:{\r\n            overflowX: \"auto !important\",\r\n          }\r\n        },\r\n        MuiBadge:{\r\n          badge:{\r\n            height:\"30px!important\",\r\n            fontFamily: '\"Satoshi\" !important',\r\n          },\r\n          colorSecondary:{\r\n            backgroundColor: red[500] +\"!important\",\r\n          },\r\n          anchorOriginTopLeftCircular:{\r\n            top: \"14%\",\r\n            left: \"-21px\",\r\n            inlineSize: \"max-content\"\r\n          }\r\n\r\n        },\r\n        MuiTableCell: {\r\n          head: {\r\n            color: \"#121224\",\r\n            backgroundColor: \"#f0f5f9 !important\",\r\n            fontSize: \"15px !important\",\r\n            fontWeight: \"bold\",\r\n            letterSpacing: \"0.02em\"\r\n          },\r\n          body: {\r\n            color: \"#121224\",\r\n            fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"13.5px !important\",\r\n            \"&:last-child\": { whiteSpace: \"nowrap\",\r\n            },\r\n            \r\n          },\r\n          \r\n          root: {\r\n            padding: \"14px\",\r\n            fontFamily: '\"Satoshi\" !important',\r\n           \r\n          },\r\n          paddingCheckbox:{\r\n            \"@media (max-width:959.95px)\": { width:\"10px\",\r\n            },\r\n          }\r\n        },\r\n        MuiList:{\r\n          padding:{\r\n            paddingBottom: \"0px !important\"\r\n          }\r\n         \r\n        },\r\n        MuiListItem:{\r\n          secondaryAction:{\r\n            paddingRight:\"45px !important\"\r\n          }\r\n        },\r\n        MuiSelect:{\r\n          select:{\r\n            \"&:focus\":{ backgroundColor:\"none !important\" \r\n            }\r\n          }\r\n        },\r\n        \r\n        MuiTableRow: {\r\n         \r\n          root:{\r\n            '&:nth-of-type(odd)': { backgroundColor: \"white\",\r\n            },\r\n            '&:nth-of-type(even)': { backgroundColor: \"#f0f5f9\",\r\n            },\r\n          }\r\n         \r\n        },\r\n\r\n        MuiIconButton:{\r\n          root:{\r\n            padding:\"9px\"\r\n          }\r\n        },\r\n\r\n        MuiTypography: {\r\n          subtitle1: {\r\n            fontSize: \"1rem\",\r\n            fontWeight: \"500\",\r\n           fontFamily: '\"Satoshi\" !important',\r\n            \"@media (max-width:959.95px)\": { fontSize: \"0.9rem !important\",\r\n            },\r\n          },\r\n          subtitle2: {\r\n            fontWeight: \"500\",\r\n           fontFamily: '\"Satoshi\" !important',\r\n            textAlign: \"center\",\r\n            padding: \"10px\",\r\n            fontSize: \"21px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"calc(1.1rem) !important\",\r\n            },\r\n          },\r\n          body1: {\r\n           fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"14px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"13px !important\",\r\n            },\r\n          },\r\n          body2: {\r\n            color: \"#121224\",\r\n           fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"14px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"13px !important\",\r\n            },\r\n          },\r\n          h5: {\r\n            color: \"#121224\",\r\n           fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"14px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"calc(1.1rem) !important\",\r\n            },\r\n          },\r\n          h6: {\r\n            color: \"#121224\",\r\n           fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"14px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"calc(1.1rem) !important\",\r\n            },\r\n          },\r\n        },\r\n        MuiPaper: {\r\n          elevation4: {\r\n            boxShadow: \"none\", \r\n          },\r\n        },\r\n        \r\n        MuiDialog:{ \r\n          paper: {\r\n            margin: \"15px !important\",\r\n            border: \"1px solid #000 !important\",\r\n          },\r\n        },\r\n\r\n        \r\n        MuiFab:{\r\n        root:{\r\n          \"&:hover\":{\r\n          \r\n            backgroundColor: \"064be2 !important\"\r\n          }\r\n        }\r\n        },\r\n        MuiButton: { \r\n\r\n          root:{  \r\n            fontFamily: '\"Satoshi !important\"', fontSize: \"14px\", fontWeight: 500, boxShadow: \"0 3px 9px 0 rgba(0,0,0,0.3) !important\", \"@media (max-width:959.95px)\": { fontSize: \"10px !important\", }, \r\n            \"& $Mui-disabled\":{\r\n               color:\"rgba(0, 0, 0, 0.26) !important\",\r\n               backgroundColor: \"rgba(0, 0, 0, 0.26) !important\",\r\n            }\r\n          \r\n          },\r\n          label: {\r\n           fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"14px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"10px !important\",\r\n            },\r\n          },\r\n          containedPrimary:{ \r\n            backgroundColor: \"#064be2\",   \r\n            textTransform:  \"initial !important\", \r\n            '&:active':{ backgroundColor: \"#064be2 !important\", color:\"#fff !important\",\r\n            },\r\n            '&:hover':{ backgroundColor: \"#064be2 !important\", color:\"#fff !important\",\r\n            },\r\n            '&:disabled':{ backgroundColor: \"#064be2c7 !important\", color:\"#fff !important\",\r\n            }\r\n        },\r\n        containedSizeSmall:{\r\n          textTransform:  \"initial !important\", \r\n          padding:  \"4px 10px !important\",\r\n          fontWeight: \"300 !important\",\r\n          height: \"fit-content !important\",\r\n        },\r\n        containedSecondary:{ \r\n          backgroundColor: red[500] +\"!important\",\r\n          '&:active':{\r\n            backgroundColor: red[500] +\"!important\",\r\n            color:\"#fff !important\",\r\n          },\r\n          '&:hover':{\r\n            backgroundColor: red[500] +\"!important\",\r\n            color:\"#fff !important\",\r\n          }\r\n        },\r\n        },\r\n        MuiFormLabel: {\r\n          root: {\r\n           fontFamily: '\"Satoshi\" !important',\r\n            fontSize: \"20px\",\r\n            \"@media (max-width:959.95px)\": { fontSize: \"15px !important\",\r\n            },\r\n            color: \"rgba(0, 0, 0, 0.87)\",\r\n          },\r\n        },\r\n        MuiCheckbox: {\r\n          root: {\r\n            color: \"#bcbdbf\",\r\n          },\r\n        },\r\n        MuiFormControl: {\r\n          root: {\r\n            width: \"100%\",\r\n          },\r\n        },\r\n        MuiTooltip:{\r\n          tooltip:{\r\n            fontFamily: '\"Satoshi\" !important',\r\n          },\r\n          // popper:{\r\n          //   top: \"-34px !important\",\r\n          //   left: '-45px !important'\r\n          // }\r\n        },\r\n        MuiInputBase: {\r\n          root: {\r\n           \r\n            width: \"100%\",\r\n          },\r\n          input: {\r\n            width: \"100%\",\r\n            border: \"none\",\r\n            fontSize: \"13px\",\r\n            display: \"block\",\r\n            padding: \"10px 12px !important\",\r\n            \r\n            borderRadius: \"4px\",\r\n          },\r\n        },\r\n       \r\n        MuiAutocomplete: {\r\n          input: {\r\n            width: \"100% !important\",\r\n          },\r\n        },\r\n         \r\n        MuiFilledInput: {\r\n          root: {\r\n            width: \"100%\",\r\n            display: \"block\",\r\n            padding: \"0px 25px 0px 0px !important\",\r\n            position: \"relative\",\r\n            fontSize: \"13px\",\r\n            marginTop: \"24px\",\r\n           \r\n            backgroundColor: \"white\",\r\n            \"&:hover\": { backgroundColor: \"unset !important\",\r\n            },\r\n            \"&.Mui-focused\": { backgroundColor: \"unset !important\",\r\n            },\r\n          },\r\n\r\n          underline: {\r\n            \"&&&:before\": { borderBottom: \"none\",\r\n            },\r\n            \"&&:after\": { borderBottom: \"none\",\r\n            },\r\n          },\r\n          inputAdornedEnd: {\r\n            border: \"1px solid #ced4da\",\r\n          },\r\n        },\r\n       \r\n        MuiOutlined: {\r\n          MuiChip: {\r\n            avatar: { margin: \"0px\",\r\n            },\r\n          },\r\n        },\r\n\r\n        MuiCardContent:{\r\n          root:{\r\n            \"&:last-child\":{ \r\n              paddingBottom: \"10px !important\",\r\n             }\r\n           \r\n          }\r\n        },\r\n        MuiCardActions:{\r\n          root:{\r\n            marginBottom: \"1px !important\"\r\n            // padding: \"0px\",\r\n            // marginBottom: \"20px\", \r\n            // \"@media (max-width:959.95px)\": { \r\n            //   marginBottom: \"1px !important\",\r\n            // },\r\n          }\r\n        },\r\n\r\n      \r\n      \r\n        MuiDrawer: {\r\n          paperAnchorBottom: {\r\n            width: \"50%\",\r\n            left: \"30%\",\r\n            bottom: \"10%\",\r\n          },\r\n          paper:{\r\n            overflowY:\"auto\",\r\n            overflowX:\"hidden\",\r\n          }\r\n        },\r\n        MuiDialogTitle:{\r\n          root:{\r\n            padding:\"0px 10px !important\"\r\n          }\r\n        },\r\n\r\n        MuiChip: {\r\n          avatar: {\r\n            width: \"50px !important\",\r\n            height: \"50px !important\",\r\n            fontSize: \"1.5rem !important\",\r\n            margin: \"0px\",\r\n          },\r\n        },\r\n        MuiInputLabel: {\r\n          shrink: {\r\n            width: \"max-content\",\r\n          },\r\n        },\r\n      },\r\n\r\n      MuiFormGroup: {\r\n        row: {\r\n          marginTop: \"10px !important\",\r\n        },\r\n      },\r\n     \r\n      \r\n    });\r\n\r\n    var [isPermanent, setPermanent] = useState(true);\r\n\r\n    useEffect(function () {\r\n      window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n};\r\n});\r\n\r\n    function handleWindowWidthChange() {\r\n      var windowWidth = window.innerWidth;\r\n      // var breakpointWidth = theme.breakpoints.values.md\r\n      var breakpointWidth = theme.breakpoints.values.sm \r\n      var isSmallScreen = windowWidth < breakpointWidth\r\n       if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n      } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n      }\r\n      }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <>\r\n        <MuiThemeProvider theme={getMuiTheme()}>\r\n          <Sidebar />\r\n          <div\r\n            className={classnames(classes.content, {\r\n               [classes.contentShift]: isPermanent&&!layoutState.isSidebarOpened,\r\n               [classes.contentShift1]: layoutState.isSidebarOpened,\r\n             })}\r\n          >\r\n            <div className={classes.fakeToolbar}> <Header history={props.history} />\r\n            </div>\r\n\r\n            <Switch>\r\n            \r\n              <AuthRoute  path=\"/app/dashboard\" role={role} roles={[ \"SUPERADMIN\", \"ADMIN\", \"RECRUITER\", \"CLIENTCOORDINATOR\", \"FREELANCER\", \"SUBVENDOR\"]} component={Dashboard} /> <AuthRoute  path=\"/app/admin\"  role={role}   roles={[\"SUPERADMIN\"]} component={Admin}   /> <AuthRoute  path=\"/app/transaction\" role={role} roles={[\"SUPERADMIN\", \"ADMIN\"]} component={Transaction} /> <AuthRoute path=\"/app/price\" role={role} roles={[\"SUPERADMIN\"]} component={Price} />\r\n              <AuthRoute path=\"/app/search\" role={role} roles={[\"ADMIN\", \"RECRUITER\", \"CLIENTCOORDINATOR\", \"FREELANCER\", \"SUBVENDOR\"]} component={Search} /> \r\n              <AuthRoute path=\"/app/pdf_view\" role={role} roles={[\"SUPERADMIN\"]} component={PDF} /> \r\n               <AuthRoute path=\"/app/company\" role={role} roles={[\"SUPERADMIN\"]} component={Company} />  \r\n              <AuthRoute path=\"/app/contact\" role={role} roles={[\"SUPERADMIN\"]} component={Contact} /> \r\n              <AuthRoute path=\"/app/ticket\" role={role} roles={[\"SUPERADMIN\",\"ADMIN\"]} component={Ticket} />\r\n              <AuthRoute path=\"/app/singlechat\" role={role} roles={[   \"SUPERADMIN\",   \"ADMIN\",   \"RECRUITER\",   \"CLIENTCOORDINATOR\", ]} component={Singlechat} />\r\n              <AuthRoute path=\"/app/assign_requirements\" role={role} roles={[\"ADMIN\"]} component={AssignRequirements} />\r\n              <AuthRoute path=\"/app/assigned_candidates\" role={role} roles={[\"ADMIN\"]} component={AssignedCandidates} />\r\n              <AuthRoute path=\"/app/requirements_Candidate\" role={role} roles={[\"ADMIN\"]} component={Share} />\r\n              <AuthRoute path=\"/app/reports/all_candidates_stc\" role={role} roles={[\"ADMIN\"]} component={AllSTC} />\r\n              <AuthRoute path=\"/app/reports/all_candidates_schedule_interview\" role={role} roles={[\"ADMIN\"]} component={AllScheduleInterview} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_fic\" role={role} roles={[\"ADMIN\"]} component={AllFinalInterviewCompleted} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_document_collected\" role={role} roles={[\"ADMIN\"]} component={AllDocumentColleted} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_salary_breakup_shared\" role={role} roles={[\"ADMIN\"]} component={AllSalaryBreakup} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_offered\" role={role} roles={[\"ADMIN\"]} component={AllOffered} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_joined\" role={role} roles={[\"ADMIN\"]} component={AllJoined} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_ditched\" role={role} roles={[\"ADMIN\"]} component={AllDitched} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_credit_note\" role={role} roles={[\"ADMIN\"]} component={AllCreditNotes} /> \r\n              <AuthRoute path=\"/app/reports/all_candidates_Offered_declined\" role={role} roles={[\"ADMIN\"]} component={AllOfferedDeclined} />\r\n              <AuthRoute path=\"/app/reports/all_candidates_drop\" role={role} roles={[\"ADMIN\"]} component={AllDrop} />\r\n             \r\n              <AuthRoute path=\"/app/users\" role={role} roles={[\"ADMIN\"]} component={Users} /> \r\n              {/* <AuthRoute path=\"/app/invoice\" role={role} roles={[\"ADMIN\"]} component={Invoice} />  */}\r\n              <AuthRoute path=\"/app/chat\" role={role} roles={[\"ADMIN\"]} component={Chat} /> \r\n              <AuthRoute path=\"/app/settings/source\" role={role} roles={[\"ADMIN\", \"CLIENTCOORDINATOR\"]} component={Source} /> \r\n              <AuthRoute path=\"/app/activity\" role={role} roles={[\"ADMIN\"]} component={Activity} /> \r\n              <AuthRoute path=\"/app/settings/free_message_activity\" role={role} roles={[\"ADMIN\"]} component={FreeMessageActivity} /> \r\n              <AuthRoute path=\"/app/candidate_activity\" role={role} roles={[\"ADMIN\"]} component={CandidateActivity} /> \r\n              <AuthRoute path=\"/app/requirements\" role={role} roles={[\"ADMIN\", \"CLIENTCOORDINATOR\"]} component={Requirements} /> \r\n              <AuthRoute path=\"/app/admin_candidates\" role={role} roles={[\"ADMIN\"]} component={AdminCandidates} />\r\n              <AuthRoute path=\"/app/parsed_resume\" role={role} roles={[\"ADMIN\",\"RECRUITER\",\"CLIENTCOORDINATOR\",\"FREELANCER\", \"SUBVENDOR\"]} component={ParsedResume} />\r\n              <AuthRoute path=\"/app/plans\" role={role} roles={[\"ADMIN\"]} component={Plans} />  \r\n              <AuthRoute path=\"/app/cc_candidates\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCCandidates} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates\" role={role} roles={[\"RECRUITER\"]} component={RecruiterCandidates} /> \r\n \r\n              <AuthRoute path=\"/app/admin_candidates_new\" role={role} roles={[\"ADMIN\"]} component={New} /> \r\n              <AuthRoute path=\"/app/admin_candidates_stc\" role={role} roles={[\"ADMIN\"]} component={STC} /> \r\n              <AuthRoute path=\"/app/admin_candidates_schedule_interview\" role={role} roles={[\"ADMIN\"]} component={ScheduleInterview} />\r\n              <AuthRoute path=\"/app/admin_candidates_interview_scheduled\" role={role} roles={[\"ADMIN\"]} component={InterviewScheduled} /> \r\n              <AuthRoute path=\"/app/admin_candidates_final_interview_scheduled\" role={role} roles={[\"ADMIN\"]} component={FinalInterviewScheduled} />\r\n              <AuthRoute path=\"/app/admin_candidates_fic\" role={role} roles={[\"ADMIN\"]} component={FinalInterviewCompleted} /> \r\n              <AuthRoute path=\"/app/admin_candidates_document_collected\" role={role} roles={[\"ADMIN\"]} component={DocumentColleted} /> \r\n              <AuthRoute path=\"/app/admin_candidates_salary_breakup_shared\" role={role} roles={[\"ADMIN\"]} component={SalaryBreakup} /> \r\n              <AuthRoute path=\"/app/admin_candidates_offered\" role={role} roles={[\"ADMIN\"]} component={Offered} /> \r\n              <AuthRoute path=\"/app/admin_candidates_joined\" role={role} roles={[\"ADMIN\"]} component={Joined} /> \r\n              <AuthRoute path=\"/app/admin_candidates_yet_to_join\" role={role} roles={[\"ADMIN\"]} component={YetToJoin} />\r\n\r\n              <AuthRoute path=\"/app/cc_candidates_new\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCNew} /> \r\n              <AuthRoute path=\"/app/cc_candidates_stc\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCSTC} /> \r\n              <AuthRoute path=\"/app/cc_candidates_interview_scheduled\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCInterviewScheduled} /> \r\n              <AuthRoute path=\"/app/cc_candidates_schedule_interview\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCScheduleInterview} />\r\n              <AuthRoute path=\"/app/cc_candidates_fis\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCFinalInterviewScheduled} />\r\n              <AuthRoute path=\"/app/cc_candidates_fic\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCFinalInterviewCompleted} /> \r\n              <AuthRoute path=\"/app/cc_candidates_document_collected\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCDocumentColleted} />\r\n              <AuthRoute path=\"/app/cc_candidates_salary_breakup_shared\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCSalaryBreakup} /> \r\n              <AuthRoute path=\"/app/cc_candidates_offered\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCOffered} /> \r\n              <AuthRoute path=\"/app/cc_candidates_joined\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCJoined} /> \r\n              <AuthRoute path=\"/app/cc_candidates_offer_declined\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCOfferedDeclined} /> \r\n              <AuthRoute path=\"/app/cc_candidates_yet_to_join\" role={role} roles={[\"CLIENTCOORDINATOR\"]} component={CCYetToJoin} />\r\n\r\n              <AuthRoute path=\"/app/recruiter_candidates_new\" role={role} roles={[\"RECRUITER\"]} component={RECNew} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_stc\" role={role} roles={[\"RECRUITER\"]} component={RECSTC} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_schedule_interview\" role={role} roles={[\"RECRUITER\"]} component={RECScheduleInterview} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_interview_scheduled\" role={role} roles={[\"RECRUITER\"]} component={RECInterviewScheduled} />\r\n              <AuthRoute path=\"/app/recruiter_candidates_fis\" role={role} roles={[\"RECRUITER\"]} component={RECFinalInterviewScheduled} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_fic\" role={role} roles={[\"RECRUITER\"]} component={RECFinalInterviewCompleted} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_document_collected\" role={role} roles={[\"RECRUITER\"]} component={RECDocumentColleted} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_salary_breakup_shared\" role={role} roles={[\"RECRUITER\"]} component={RECSalaryBreakup} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_offered\" role={role} roles={[\"RECRUITER\"]} component={RECOffered} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_joined\" role={role} roles={[\"RECRUITER\"]} component={RECJoined} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_offer_declined\" role={role} roles={[\"RECRUITER\"]} component={RECOfferedDeclined} /> \r\n              <AuthRoute path=\"/app/recruiter_candidates_yet_to_join\" role={role} roles={[\"RECRUITER\"]} component={RECYetToJoin} />\r\n\r\n              <AuthRoute path=\"/app/others_candidates\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersCandidates} /> \r\n              <AuthRoute path=\"/app/others_requirements\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersRequirements} /> \r\n              <AuthRoute path=\"/app/others_candidates_new\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersNew} /> \r\n              <AuthRoute path=\"/app/others_candidates_stc\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersSTC} /> \r\n              <AuthRoute path=\"/app/others_candidates_schedule_interview\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersScheduleInterview} /> \r\n              <AuthRoute path=\"/app/others_candidates_interview_scheduled\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersInterviewScheduled} />\r\n              <AuthRoute path=\"/app/others_candidates_fis\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersFinalInterviewScheduled} /> \r\n              <AuthRoute path=\"/app/others_candidates_fic\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersFinalInterviewCompleted} /> \r\n              <AuthRoute path=\"/app/others_candidates_document_collected\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersDocumentColleted} /> \r\n              <AuthRoute path=\"/app/others_candidates_salary_breakup_shared\" role={role} roles={[\"others\"]} component={othersSalaryBreakup} /> \r\n              <AuthRoute path=\"/app/others_candidates_offered\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersOffered} /> \r\n              <AuthRoute path=\"/app/others_candidates_joined\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersJoined} /> \r\n              <AuthRoute path=\"/app/others_candidates_offer_declined\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersOfferedDeclined} /> \r\n              <AuthRoute path=\"/app/others_candidates_yet_to_join\" role={role} roles={[\"FREELANCER\", \"SUBVENDOR\"]} component={othersYetToJoin} />\r\n              {renderRoutesBasedOnCompanyType(companyType, role)}\r\n      </Switch>\r\n          </div>\r\n          <ToastContainer\r\n        closeButton={\r\n          <CloseButton className={classes.notificationCloseButton} />\r\n        }\r\n        closeOnClick={false}\r\n        hideProgressBar={true}\r\n      />\r\n        </MuiThemeProvider>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Layout);\r\n\r\nfunction CloseButton({ closeToast, className }) {\r\n  return <CloseIcon className={className} onClick={closeToast} />;\r\n}\r\nfunction AuthRoute({ component, role, roles = [], ...rest }) {\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        roles.includes(role) ? (\r\n          React.createElement(component, props)\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { from: props.location, },\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderRoutesBasedOnCompanyType(companyType, role) {\r\n  if (companyType === \"COMPANY\") {\r\n    return (\r\n      <>\r\n        <AuthRoute path=\"/app/projects\" role={role} roles={[\"ADMIN\",\"CLIENTCOORDINATOR\"]} component={Projects} /> \r\n        <AuthRoute path=\"/app/reports/vendor_onboarded_candidates\" role={role} roles={[\"ADMIN\"]} component={AllInvoiced} />\r\n      </>\r\n    );\r\n  }\r\n  else{\r\n    return(\r\n      <>\r\n        <AuthRoute path=\"/app/clients\" role={role} roles={[\"ADMIN\"]} component={Clients} /> \r\n        <AuthRoute path=\"/app/resume_search\" role={role} roles={[\"ADMIN\"]} component={ResumeSearch} /> \r\n        {/* Reports */}\r\n        <AuthRoute path=\"/app/reports/all_candidates_invoiced\" role={role} roles={[\"ADMIN\"]} component={AllInvoiced} />\r\n      </>\r\n    )\r\n  }\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\themes\\default.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\login\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Notification\\Notification.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Notification\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Wrappers\\Wrappers.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\YetToJoin.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\SalaryBreakup.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\Joined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\OfferedDeclined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\Offered.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\InterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\ScheduleInterview.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\FinalInterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\Candidates.js",["708","709","710","711","712","713","714","715","716","717","718","719","720"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport moment from \"moment\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n import { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\"; \r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n//import GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Notification from \"../../components/Notification\";\r\nimport Add from \"../../components/Candidates/Add\";\r\nimport Edit from \"../../components/Candidates/Edit\";\r\nimport View from \"../../components/Candidates/View\"; \r\nimport Bar from \"../../components/Candidates/Bar\"; \r\nimport ResumeDialog from \"../../components/Candidates/Dialogs\";  \r\nimport Status from \"../../components/Recruiter/SearchStatus\"; \r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';  \r\nimport ExpandButton from \"../../components/Candidates/ExpandButton\"; \r\nimport {jwtDecode} from \"jwt-decode\"; \r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport MatchJDDialog from \"../../components/Candidates/MatchJDDialog.js\";\r\nimport { useResumeDataContext } from \"../../context/CandidateDataContext.js\";\r\n \r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables(props) {\r\n   const mobileQuery = useMediaQuery('(max-width:600px)'); \r\n\r\n  var classes = useStyles();\r\n  const messageRef=useRef();\r\n  const history = useHistory(); \r\n  const candidate_search = props.location.search;  \r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n\r\n   const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false); \r\n  const [source, setSource] = useState([]);\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n   const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    requirementName: \"\",\r\n    source: \"\", \r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",       \r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\", \r\n    \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false\r\n\r\n  });\r\n  const [listCanditate, setListCanditate] = useState([]); \r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id:\"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",\r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n\r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [rowsPerPage] = useState(50);\r\n   const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const [file, setFile] = useState([]);\r\n  const [assessment,setAssessment] = useState([]);\r\n  const [hideContactDetails,setHideContactDetails] = useState(false);\r\n\r\n  const [search, setSearch] = useState(new URLSearchParams(candidate_search).get('search'));\r\n  const { setResumeParsedData } = useResumeDataContext();\r\n\r\n  \r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  \r\n  const [resumeOpen, setResumeOpen] = React.useState(false); \r\n  const [matchJDOpen, setMatchJDOpen] = React.useState(false);\r\n\r\n\r\n  const handleResumeClose = () => {\r\n    setResumeOpen(false);\r\n  };\r\n\r\n  const handleResumeOpen = () => {\r\n    setResumeOpen(true);\r\n  };\r\n\r\n  const handleJDClose = () => {\r\n    setMatchJDOpen(false);\r\n    setResumePercentage([])\r\n  };\r\n\r\n  const handleJDOpen = () => {\r\n    setMatchJDOpen(true);\r\n  };\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n\r\n  const [ resumePercentage , setResumePercentage]= useState([])\r\n  const [ matchLoading, setMatchLoading] = useState(false)\r\n  const [candidMatchId, setCandidMatchId] = useState(\"\");\r\n  const [requirementName, setRequirementName] = useState('');\r\n\r\n \r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  const [requirement, setRequirement] = useState([]);\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n \r\n\r\n\r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n\r\n  const [validation, setValidation] = useState(false); \r\n\r\n \r\n  const filterRef = useRef(null);\r\n \r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required'),\r\n    firstName: Yup.string().required('First Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string().max(255).required('Last Name is required')\r\n    .max(255)\r\n    .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n      message: \"Last Name be Alphanumeric\",\r\n    }),\r\n    mobile: Yup.string().required('Mobile is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required('Skill is required'),\r\n    source: Yup.string(),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n    location: Yup.string().nullable().notRequired(),  \r\n    alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required('Gender is required').notRequired(),\r\n    educationalQualification: Yup.string().nullable().notRequired(), \r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(), \r\n    native: Yup.string().nullable().notRequired(),\r\n    candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n    candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n    candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n\r\n  });\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n     location: Yup.string().nullable().notRequired(),\r\n     alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n     native: Yup.string().nullable().notRequired(),\r\n     preferredLocation: Yup.string().nullable().notRequired(),\r\n     relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     educationalQualification: Yup.string().nullable().notRequired(),\r\n     day: Yup.string().nullable().notRequired(),\r\n     month: Yup.string().nullable().notRequired(),\r\n     year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required('Gender is required').notRequired(),\r\n     differentlyAbled: Yup.string().nullable().notRequired(),\r\n     currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     noticePeriod: Yup.string().nullable().notRequired(),\r\n     reasonForJobChange: Yup.string().nullable().notRequired(),\r\n     candidateProcessed: Yup.string().nullable().notRequired(),\r\n     reason: Yup.string().nullable().notRequired(), \r\n     candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n     candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n     candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n     candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  }); \r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset:editreset\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isSubmitting },\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n \r\n \r\n  useEffect(() => {\r\n    setLoader(true);\r\n    setSearch(new URLSearchParams(candidate_search).get('search'));\r\n\r\n    var mobile = sessionStorage.getItem(\"use\");\r\n\r\n    if(mobile !== \"\" && mobile !== null){\r\n      setState({ ...state, right: true }); \r\n    setDataList(\"ADD\"); \r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n        data: {\r\n          mobile:mobile.substring(2)\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) { \r\n          if (response.data.status === true) {\r\n   \r\n            sessionStorage.setItem('use', \"\");\r\n              reset({\r\n                requirementId:recruitmentId, \r\n                mobile: mobile.substring(2),\r\n                email: response.data.data?.email,\r\n                firstName: response.data.data?.firstName,\r\n                lastName: response.data.data?.lastName,\r\n                skills: response.data.data?.skills,  \r\n                experience: response.data.data?.experience, \r\n                location: response.data.data?.currentLocation,\r\n                       \r\n                 gender: response.data.data?.gender,\r\n                differentlyAbled:  response.data.data?.differentlyAbled, \r\n                candidateProcessed:  response.data.data?.candidateProcessed,\r\n                native:  response.data.data?.nativeLocation,\r\n                preferredLocation:  response.data.data?.preferredLocation,\r\n                relevantExperience: response.data.data?.relevantExperience,\r\n                educationalQualification:  response.data.data?.educationalQualification,\r\n              \r\n                currentCtc: response.data.data?.currentCtc,\r\n                expectedCtc:  response.data.data?.expectedCtc,\r\n                noticePeriod: response.data.data?.noticePeriod,\r\n                reasonForJobChange: response.data.data?.reasonForJobChange,\r\n                reason: response.data.data?.reason,\r\n                currentCompanyName: response.data.data?.currentCompanyName\r\n                })\r\n    \r\n              setCandidate({\r\n                ...candidate,\r\n                mobile:mobile.substring(2),\r\n              email: response.data.data?.email,\r\n              firstName: response.data.data?.firstName,\r\n              lastName: response.data.data?.lastName,\r\n              skills: response.data.data?.skills,  \r\n              experience: response.data.data?.experience, \r\n              location: response.data.data?.currentLocation,\r\n              dob: response.data.data?.dob,\r\n               gender: response.data.data?.gender,\r\n              differentlyAbled:  response.data.data?.differentlyAbled, \r\n              candidateProcessed:  response.data.data?.candidateProcessed,\r\n              native:  response.data.data?.nativeLocation,\r\n              preferredLocation:  response.data.data?.preferredLocation,\r\n              relevantExperience: response.data.data?.relevantExperience,\r\n              educationalQualification:  response.data.data?.educationalQualification, \r\n              currentCtc: response.data.data?.currentCtc,\r\n              expectedCtc:  response.data.data?.expectedCtc,\r\n              noticePeriod: response.data.data?.noticePeriod,\r\n              reasonForJobChange: response.data.data?.reasonForJobChange,\r\n              reason: response.data.data?.reason,\r\n              candidateRecruiterDiscussionRecording:response.data.data?.candidateRecruiterDiscussionRecording, \r\n              candidateSkillExplanationRecording:response.data.data?.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data?.candidateMindsetAssessmentLink,\r\n             candidateAndTechPannelDiscussionRecording:response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n             currentCompanyName: response.data.data?.currentCompanyName,\r\n              freeValue: \"YES\",\r\n             }); \r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n\r\n      const form = filterRef.current; \r\n      if(new URLSearchParams(candidate_search).get('search')){\r\n        form[\"search\"].value= new URLSearchParams(candidate_search).get('search');\r\n      }\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n        data: {\r\n          page: \"1\",\r\n          search: `${form[\"search\"].value}`,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [reducerValue, token, new URLSearchParams(candidate_search).get('search'), sessionStorage.getItem(\"use\")]);\r\n\r\n    \r\n    function updateData(id){\r\n \r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n        data: {\r\n          id: id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n    \r\n          if (response.data.status === true) { \r\n    \r\n            var myCandidateStatuses= response.data.data;\r\n    \r\n            axios({\r\n              method: \"post\",\r\n              url: `${process.env.REACT_APP_SERVER}recruiter/candidate`,\r\n              data: {\r\n                id: id,\r\n              },\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: token,\r\n              },\r\n            })\r\n              .then(function (result) {\r\n              \r\n                 if (result.data.status === true) {  \r\n           \r\n            const updateState = candidatesData.map(item => {\r\n        \r\n              if (item.id === id) { \r\n                return { ...item,  \r\n                    candidateDetail: result.data.data.candidateDetail,  \r\n                    invoiceValue: result.data.data.invoiceValue,  \r\n                    invoicedDate: result.data.data.invoicedDate,  \r\n                    joinedDate: result.data.data.joinedDate, \r\n                    statusCode: result.data.data.statusList.statusCode,\r\n                    statusList: result.data.data.statusList,  \r\n                    myCandidateStatuses: myCandidateStatuses,\r\n                    droppedReason: result.data.data.droppedReason,\r\n                    ditchReason: result.data.data.ditchReason,\r\n                    creditNoteReason: result.data.data.creditNoteReason,\r\n                };\r\n                \r\n              }\r\n              return item;\r\n            }); \r\n         \r\n            setCandidatesData(updateState);\r\n          }\r\n        \r\n          });   \r\n      \r\n          \r\n    \r\n    }\r\n    })\r\n    .catch(function (error) {\r\n    console.log(error);\r\n    }); \r\n    \r\n      }\r\n\r\n \r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setSearch(\"\");\r\n    history.push(\"/app/others_candidates?search=\");\r\n    forceUpdate();\r\n  };\r\n \r\n  function getFilterData() {\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      search: `${form[\"search\"].value}`,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/getAssignedRequierments`,\r\n      data: { },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n \r\n      if (response.data.status === true) {\r\n        setRequirement(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      search: `${form[\"search\"].value}`,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n  \r\n  const [recruitmentId, setRecruitmentId]  = useState(\"\");\r\n\r\n  function handleAdd(values) { \r\n    setLoader(true); \r\n \r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n      } else {\r\n        \r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n          \r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem('firstName'),\r\n              rec_mobile_no: localStorage.getItem('mobile'),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n\r\n            CheckAlreadyExit(values);\r\n\r\n          \r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\nfunction CheckAlreadyExit(values){\r\n   var dob = values.day+\"-\"+values.month+\"-\"+values.year;\r\n   setLoader(true); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n    data: {\r\n      email: values.email,\r\n      firstName: values.firstName,\r\n      lastName: values.lastName,\r\n      mobile: values.mobile,\r\n      requirementId: recruitmentId,\r\n      skills: values.skills,\r\n      sourceId: values.source,\r\n      isAnswered: candidate.freeValue,\r\n      message: \"\",\r\n      experience:values.experience,\r\n      currentLocation: values.location,\r\n      alternateMobile:values.alternateMobile,\r\n      preferredLocation:values.preferredLocation,\r\n      nativeLocation:values.native,\r\n       relevantExperience:values.relevantExperience,\r\n      currentCtc:values.currentCtc,\r\n      expectedCtc:values.expectedCtc,\r\n      dob: values.day===undefined? candidatesEdit.dob : dob!== \"--\"?  dob: candidatesEdit.dob,\r\n      noticePeriod:values.noticePeriod,\r\n      reasonForJobChange:values.reasonForJobChange,\r\n      candidateProcessed:values.candidateProcessed,\r\n      differentlyAbled:values.differentlyAbled,\r\n      educationalQualification:values.educationalQualification,\r\n      gender:values.gender,\r\n      reason: values.reason, \r\n      candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n      candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n      candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n      candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n      sendMessage: \"\"  \r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n    \r\n    if (response.data.status === true) { \r\n     \r\n \r\n      handleAddList(false, values);\r\n\r\n}\r\n// else{\r\n//   handleNotificationCall(\"error\", response.data.message);\r\n \r\n// }\r\nsetLoader(false); \r\n });\r\n}\r\n\r\n  function handleEdit(values) {\r\n  \r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var dob = values.day+\"-\"+values.month+\"-\"+values.year;\r\n     \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/editCandidate`,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience:values.experience, \r\n          currentLocation: values.location, \r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile:values.alternateMobile,\r\n          preferredLocation:values.preferredLocation,\r\n          nativeLocation:values.native,\r\n           relevantExperience:values.relevantExperience,\r\n          currentCtc:values.currentCtc,\r\n          expectedCtc:values.expectedCtc, \r\n          dob: values.day===undefined? candidatesEdit.dob : dob!== \"--\"?  dob: candidatesEdit.dob,\r\n          noticePeriod:values.noticePeriod,\r\n          reasonForJobChange:values.reasonForJobChange,\r\n          candidateProcessed:values.candidateProcessed,\r\n          differentlyAbled:values.differentlyAbled,\r\n          educationalQualification:values.educationalQualification,\r\n          gender:values.gender,\r\n          reason: values.reason, \r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n        hideContactDetails: candidatesEdit.hideContactDetails,\r\n        currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n \r\n            \r\n            if(file !== undefined ){\r\n              if(file?.length !== 0){\r\n              uploadResume(file, response.data.candidateDetailsId); \r\n            }\r\n          } \r\n\r\n          if(assessment !== undefined ){\r\n            if(assessment?.length !== 0){\r\n              uploadAssessment(assessment, response.data.candidateId);\r\n            }\r\n           } \r\n\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            updateData(candidatesEdit.id);\r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          }\r\n\r\n          setLoader(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n \r\n  function handleAddList(send, addList) {\r\n    setLoader(true); \r\n \r\n    var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year; \r\n    var message =  \"Hi \" +   requirementList.cand1_name + \", Can we chat today about a job opening \" +  localStorage.getItem('firstName') +\r\n    \", \" +   localStorage.getItem('mobile') +  \", \" +  localStorage.getItem('companyName') +   \". Always reply by clicking back arrow button/right swipe only.\";\r\n \r\n    var data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: message,\r\n        experience:addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile:addList.alternateMobile,\r\n        preferredLocation:addList.preferredLocation,\r\n        nativeLocation:addList.native,\r\n         relevantExperience:addList.relevantExperience,\r\n        currentCtc:addList.currentCtc,\r\n        expectedCtc:addList.expectedCtc,\r\n        dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n        noticePeriod:addList.noticePeriod,\r\n        reasonForJobChange:addList.reasonForJobChange,\r\n        candidateProcessed:addList.candidateProcessed,\r\n        differentlyAbled:addList.differentlyAbled,\r\n        educationalQualification:addList.educationalQualification,\r\n        gender:addList.gender,\r\n        reason: addList.reason, \r\n        sendMessage: send,\r\n        candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName:addList.currentCompanyName,\r\n      }\r\n   \r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n    \r\n      if (response.data.status === true) {\r\n        handleClose();\r\n\r\n         \r\n        if(file !== undefined ){\r\n          if(file?.length !== 0){\r\n          uploadResume(file, response.data.candidateDetailsId); \r\n        }\r\n      } \r\n\r\n      if(assessment !== undefined ){\r\n        if(assessment?.length !== 0){\r\n          uploadAssessment(assessment, response.data.candidateId);\r\n      }}\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        forceUpdate();\r\n        setState({ ...state, right: false });\r\n        reset();\r\n      } else {\r\n       \r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function getCanididateResumeInfo(candidateData,candidateDetail) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/getCanididateResumeInfo`,\r\n      data: {\r\n        id:candidateData\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setResumeParsedData({\r\n          data:response.data?.data,\r\n          candidateName: candidateDetail?.firstName + \" \"+ candidateDetail?.lastName,\r\n        })\r\n        const responsedData = JSON.stringify(response.data?.data)\r\n        const candidateFullName = candidateDetail?.firstName + \" \"+ candidateDetail?.lastName\r\n        sessionStorage.setItem('candidateResume',responsedData)\r\n        sessionStorage.setItem('candidateName',candidateFullName)\r\n        window.open(`/v1#/app/parsed_resume`,'_blank')\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\nfunction uploadResume(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"resume\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n      // aiResumeUpload(data)\r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\n \r\nfunction uploadAssessment(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"fiel\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n       \r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\nconst ExistCheck=(e)=>{\r\n\r\n  CheckExitAlready(recruitmentId, e); \r\n  \r\n};\r\n\r\n\r\nfunction CheckExitAlready(recruitmentId, e) {\r\nvar data = {}; \r\nvar url=\"\";\r\n\r\nif(e.target.name === \"email\"){\r\n  data =  { \r\n    requirementId: recruitmentId,\r\n    email: e.target.value\r\n  } \r\n  url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`\r\n} else {\r\n  data =  { \r\n    requirementId: recruitmentId,\r\n    mobile: e.target.value\r\n  }  \r\n  url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`\r\n}\r\n\r\n  axios({\r\n    method: \"post\",\r\n    url: url,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n     if (response.data.status === true) {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n\r\n  })\r\n}\r\nfunction cvMatchingPercentage(id,requirementId) {\r\n\r\n  setMatchLoading(true)\r\n  const isRequirementIdExist = resumePercentage.some(item => item.requirementId === requirementId);\r\n  if (isRequirementIdExist) {\r\n    setMatchLoading(false)\r\n    handleNotificationCall(\"error\", \"Requirement already exists in the match list.\");\r\n    return;\r\n  }\r\n\r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}AI/jdMatcher`,\r\n    data: {\r\n      id: id,\r\n      requirementId: requirementId\r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then((response) => {\r\n    if (response.data.status === true) {\r\n      \r\n      const previousPercentage = [...resumePercentage];\r\n\r\n      const newPercentageItem = {\r\n        description: response.data?.data,\r\n        requirementName: response.data?.requirementName,\r\n        requirementId: response.data?.requirementId\r\n      };\r\n\r\n      previousPercentage.push(newPercentageItem);\r\n\r\n      setResumePercentage(previousPercentage);\r\n    } else if (response.data.status === false) {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n    setMatchLoading(false)\r\n  });\r\n}\r\n\r\nconst removePercentage = (requirementIdToRemove) => {\r\n  const updatedPercentage = resumePercentage.filter(item => item.requirementId !== requirementIdToRemove);\r\n  setResumePercentage(updatedPercentage);\r\n};\r\n  \r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else  {\r\n      setDataList(\"VIEW\");\r\n    }  \r\n    editreset();\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/candidate`,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n       \r\n          if (response.data.status === true) {\r\n             setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc: response.data.data.requirement?.recruiter?.firstName +  \" \" + response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              resume:response.data.data.candidateDetail?.resume, \r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              isCandidateCpv: response.data.data.isCandidateCpv,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile.substring(2),\r\n              resume:response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setState({ ...state, right: true });\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n\r\n\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n          data: {\r\n            id: values,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n \r\n            if (response.data.status === true) {\r\n\r\n        setListCanditate(response.data.data);\r\n\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n    \r\n      \r\n  }\r\n\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n \r\n\r\n \r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n         \r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  // const CustomExpandIcon = ({ isRowExpanded }) => {\r\n  //   if (isRowExpanded) {\r\n  //     return (\r\n  //       <Tooltip title=\"List of Invoiced Candidates\" placement=\"right\">\r\n  //         <ExpandLessIcon />\r\n  //       </Tooltip>\r\n  //     );\r\n  //   } else {\r\n  //     return (\r\n  //       <Tooltip title=\"List of Invoiced Candidates\" placement=\"right\">\r\n  //         <ExpandMoreIcon/>\r\n  //       </Tooltip>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Oops! Matching record could not be found',\r\n      }\r\n    },\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    search: false,\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery===true? 'vertical' : 'standard',\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n            <Bar\r\n              title=\"Candidates\"\r\n              list={list} \r\n            />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n  \r\n  const components = {\r\n    ExpandButton: function(props) { \r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  const [candidate, setCandidate] = useState({\r\n    requirementId:\"\",\r\n    source:\"\",\r\n    email:\"\", \r\n    firstName:\"\",\r\n    lastName:\"\",\r\n    skills:\"\",  \r\n    location:\"\", \r\n    experience:null,    \r\n     candidateProcessed:\"\",\r\n    native:\"\",\r\n    preferredLocation:\"\",\r\n    relevantExperience:null,\r\n    educationalQualification:\"\",\r\n    gender:\"\",\r\n    differentlyAbled:\"\",\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    dob:\"\", \r\n    candidateRecruiterDiscussionRecording:\"\", \r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n     candidateAndTechPannelDiscussionRecording:\"\",\r\n    freeValue:  \"YES\",\r\n\r\n}); \r\n \r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n   \r\n \r\n \r\n \r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n           file={file}\r\n           setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation }\r\n          show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) : dataList === \"ADD\" ? (\r\n      <>\r\n        <Add\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          handleAddList={handleAddList}\r\n          register={register} \r\n          source={source} \r\n          recruitmentList={recruitmentList}\r\n          handleClose={handleClose}\r\n          errors={errors}\r\n          setValue={setValue}\r\n          setLoader={setLoader}\r\n          toggleDrawer={toggleDrawer}\r\n          setRecruitmentList={setRecruitmentList}\r\n          requirementList={requirementList}\r\n          handleSubmit={handleSubmit}\r\n          handleAdd={handleAdd}\r\n          requirement={requirement}\r\n          isSubmitting={isSubmitting}\r\n          open={open}\r\n          messageRef={messageRef}\r\n          reset={reset}\r\n          setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          setCandidate={setCandidate}\r\n          candidate={candidate}\r\n          setFile={setFile}\r\n          file={file}\r\n          setRecruitmentId={setRecruitmentId}\r\n          recruitmentId={recruitmentId}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          setPhoneValidation={setPhoneValidation }\r\n          setHideContactDetails={setHideContactDetails}\r\n          hideContactDetails={hideContactDetails}\r\n          ExistCheck={ExistCheck}\r\n          requirementId={\"true\"}\r\n        />\r\n      </>\r\n    ) :  (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          \r\n          <PageTitle title=\"Candidates\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n        <div className={classes.lgButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<AddCircleIcon />} \r\n            color=\"primary\"\r\n            className={classes.addUser}\r\n            onClick={(e) => {\r\n            \r\n              setDataList(\"ADD\");\r\n              reset({ });\r\n              setCandidate({\r\n                ...candidate,\r\n                requirementId:\"\",\r\n                source:\"\",\r\n                email:\"\", \r\n                firstName:\"\",\r\n                lastName:\"\",\r\n                skills:\"\",  \r\n                location:\"\", \r\n                experience:null,   \r\n                gender:\"\",\r\n                differentlyAbled:\"\", \r\n                candidateProcessed:\"\",\r\n                native:\"\",\r\n                preferredLocation:\"\",\r\n                relevantExperience:null,\r\n                educationalQualification:\"\", \r\n                currentCtc:null,\r\n                expectedCtc:null,\r\n                noticePeriod:\"\",\r\n                reasonForJobChange:\"\",\r\n                reason:\"\",\r\n                dob:\"\", \r\n                candidateRecruiterDiscussionRecording:\"\", \r\n                candidateSkillExplanationRecording:\"\",\r\n                candidateMindsetAssessmentLink:\"\",\r\n                candidateAndTechPannelDiscussionRecording:\"\",\r\n                freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n\r\n               });\r\n               setState({ ...state, right: true });\r\n               setPhoneValidation(false);\r\n               setRecruitmentId(\"\");\r\n              setValidation(false);\r\n              setFile([]);\r\n            }}\r\n          >\r\n            Add New Candidate\r\n          </Button>\r\n          </div>\r\n          <div className={classes.smButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<AddCircleIcon />} \r\n            className={classes.addUser}\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              setState({ ...state, right: true });\r\n              setDataList(\"ADD\");\r\n              reset();\r\n              setValidation(false);\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n          </div>\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{ paper: dataList===\"VIEW\"? classes.drawer: classes.clientDrawer }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n        <TextField \r\n          label=\"Search\"\r\n            type=\"text\"\r\n            name=\"search\" \r\n            placeholder=\"Enter Candidate Unique ID/Name/Email/Mobile (eg: 91XXXXXXXXXX)\"\r\n            InputLabelProps={{ shrink: true }}\r\n            value={search}\r\n            defaultValue={search}\r\n            onChange={(e) => {\r\n              setSearch(e.target.value);\r\n            }}\r\n            \r\n           \r\n            className={classes.searchWidth} \r\n          />\r\n          <TextField\r\n           \r\n            name=\"fromDate\"\r\n           label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n            \r\n          />\r\n\r\n          <TextField\r\n            \r\n            name=\"toDate\"\r\n           label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n            \r\n             \r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n           components={components}\r\n            options={table_options}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n\r\n              {\r\n                name: \"Resume\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                 <Grid container className={classes.space}>\r\n                 <Tooltip title=\"Edit Candidate\" placement=\"bottom\" aria-label=\"edit\">\r\n                 <EditIcon\r\n                   className={classes.toolIcon}\r\n                   onClick={(e) => {\r\n                     handleShow(item.id, \"EDIT\");\r\n                   }}\r\n                 />\r\n               </Tooltip>\r\n               <Tooltip title=\"View Candidate\" placement=\"bottom\" aria-label=\"view\">\r\n                 <ViewIcon\r\n                   className={classes.toolIcon}\r\n                   onClick={(e) => {\r\n                     handleShow(item.id,  \"VIEW\");\r\n                   }}\r\n                 />\r\n               </Tooltip>\r\n             </Grid>,\r\n             item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item} \r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n                <> {item.candidateDetail?.firstName + \" \" +  item.candidateDetail?.lastName}   <br/>   {\" (\" +  item.uniqueId +   \")\"}</>,\r\n             \r\n                item.mainId === decode.mainId ? \r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n                : item.hideContactDetails !== true?\r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n                :\"\",\r\n                <> {item.requirement?.requirementName} <br/>{  \"(\" +  item.requirement?.uniqueId +    \")\"}</>,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName, \r\n                item.requirement?.recruiter?.firstName +  \" \" +  item.requirement?.recruiter?.lastName,\r\n                \r\n             <>{item.candidateDetail?.resume !== \"https://liverefo.s3.amazonaws.com/\" ? ( <>   <Grid container className={classes.space}>     <Grid item xs className={classes.toolAlign}>      \r\n             <Tooltip         title=\"View Resume\"         placement=\"bottom\"         aria-label=\"view\"       >         \r\n               <DescriptionIcon           className={classes.toolIcon}           onClick={()=>{ handleResumeOpen(); setFile([\r\n                 {\r\n                   url: item.candidateDetail?.resume\r\n                 }\r\n               ])}}         />      \r\n             </Tooltip>\r\n             {/* <Tooltip         title=\"Downlaod Resume\"         placement=\"bottom\"         aria-label=\"downlaod\"       > \r\n               <a href={item.candidateDetail?.resume} download>  <GetAppIcon className={classes.toolIcon} />    </a>      \r\n             </Tooltip>      */}\r\n             </Grid>   </Grid> </> ) : ( \"No Resume Found\" )}</>,\r\n            //  <Tooltip\r\n            //       title=\"Match JD\"\r\n            //       placement=\"bottom\"\r\n            //       aria-label=\"view\"\r\n            //     >\r\n            //       <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n            //         onClick={(e) => {\r\n            //           handleJDOpen();\r\n            //           cvMatchingPercentage(item.id);\r\n            //           setCandidMatchId(item.id);\r\n            //           setRequirementName(item.requirementName)\r\n            //         }}>\r\n            //         %\r\n            //       </div>\r\n            //     </Tooltip>,\r\n                // <Tooltip\r\n                //   title=\"Get Resume Info\"\r\n                //   placement=\"bottom\"\r\n                //   aria-label=\"view\"\r\n                // >\r\n                //   <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n                //     onClick={(e) => {\r\n                //       getCanididateResumeInfo(item.candidateDetailId,item.candidateDetail);\r\n                //     }}>\r\n                //     i\r\n                //   </div>\r\n                // </Tooltip>,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n \r\n      <ResumeDialog\r\n       resume={file}\r\n       resumeOpen={resumeOpen}\r\n       handleResumeClose={handleResumeClose}\r\n      />\r\n{/* \r\n      <MatchJDDialog\r\n        resumePercentage={resumePercentage}\r\n        requirementName={requirementName}\r\n        matchLoading={matchLoading}\r\n        jDOpen={matchJDOpen}\r\n        handleJDClose={handleJDClose}\r\n        candidMatchId={candidMatchId}\r\n        cvMatchingPercentage={cvMatchingPercentage}\r\n        removePercentage={removePercentage}\r\n      /> */}\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\Requirements.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\FinalInterviewCompleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\DocumentColleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\Stc.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\others\\dashboard\\New.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Drop.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Ditched.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Invoiced.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\CreditNotes.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Offered.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\SalaryBreakup.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\OfferedDeclined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\DocumentColleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Stc.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\FinalInterviewCompleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\ScheduleInterview.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\reports\\Joined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\Offered.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\YetToJoin.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\OfferedDeclined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\SalaryBreakup.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\ScheduleInterview.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\InterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\Joined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\Stc.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\FinalInterviewCompleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\New.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\FinalInterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\dashboard\\DocumentColleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\YetToJoin.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\SalaryBreakup.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\Offered.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\Joined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\FinalInterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\InterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\SalaryBreakup.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\ScheduleInterview.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\ScheduleInterview.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\YetToJoin.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\Offered.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\OfferedDeclined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\Joined.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\FinalInterviewCompleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\New.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\DocumentColleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\InterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\FinalInterviewScheduled.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\dashboard\\Stc.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\FinalInterviewCompleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\DocumentColleted.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\Stc.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\dashboard\\New.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\themes\\style.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\Search.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\Share.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\recruiter\\Candidates.js",["721","722","723","724","725","726","727","728","729","730","731","732","733","734","735"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport moment from \"moment\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\"; \r\n\r\n import Notification from \"../../components/Notification/Notification\";\r\nimport Actions from \"../../components/Candidates/Actions\";\r\nimport Add from \"../../components/Candidates/Add\";\r\nimport Edit from \"../../components/Candidates/Edit\";\r\nimport View from \"../../components/Candidates/View\";\r\nimport Note from \"../../components/Candidates/Note\";\r\nimport Bar from \"../../components/Candidates/Bar\";\r\nimport Drop from \"../../components/Candidates/Drop\";\r\nimport ResumeDialog from \"../../components/Candidates/Dialogs\";  \r\nimport Dialogs from \"../../components/Recruiter/Dialogs\";\r\nimport Status from \"../../components/Recruiter/Status\";\r\nimport Message from \"../../components/Candidates/Message\";\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';  \r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\n//import GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport ExpandButton from \"../../components/Candidates/ExpandButton\"; \r\n\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport MatchJDDialog from \"../../components/Candidates/MatchJDDialog.js\";\r\nimport { useResumeDataContext } from \"../../context/CandidateDataContext.js\";\r\n \r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables(props) {\r\n   const mobileQuery = useMediaQuery('(max-width:600px)'); \r\n\r\n  var classes = useStyles();\r\n  const messageRef=useRef();\r\n  const history = useHistory();\r\n\r\n  \r\n  const candidate_search = props.location.search;  \r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n \r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n  \r\n\r\n  const [source, setSource] = useState([]);\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n  const [candidatesNote, setCandidatesNote] = useState([]);\r\n  const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    requirementName: \"\",\r\n    source: \"\", \r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",       \r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\", \r\n    \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false\r\n\r\n  });\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n  \r\n  const [resumeOpen, setResumeOpen] = React.useState(false); \r\n  const [matchJDOpen, setMatchJDOpen] = React.useState(false);\r\n\r\n\r\n  const handleResumeClose = () => {\r\n    setResumeOpen(false);\r\n  };\r\n\r\n  const handleResumeOpen = () => {\r\n    setResumeOpen(true);\r\n  };\r\n\r\n  const handleJDClose = () => {\r\n    setMatchJDOpen(false);\r\n    setResumePercentage([])\r\n  };\r\n\r\n  const handleJDOpen = () => {\r\n    setMatchJDOpen(true);\r\n  };\r\n\r\n  const [candidateList, setCandidateList] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    mobile: \"\",\r\n    message: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n  });\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id:\"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",\r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n\r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [rowsPerPage] = useState(50);\r\n  const [setCandidatesChange] = useState([]);\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const [file, setFile] = useState([]);\r\n  const [assessment,setAssessment] = useState([]);\r\n  const [hideContactDetails,setHideContactDetails] = useState(false);\r\n\r\n  const [search, setSearch] = useState(new URLSearchParams(candidate_search).get('search'));\r\n  const { setResumeParsedData } = useResumeDataContext();\r\n  \r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n\r\n  const [ resumePercentage , setResumePercentage]= useState([])\r\n  const [ matchLoading, setMatchLoading] = useState(false)\r\n  const [candidMatchId, setCandidMatchId] = useState(\"\");\r\n  const [requirementName, setRequirementName] = useState(\"\");\r\n\r\n  function handleUse(mobile){ \r\n    history.push(\"/app/recruiter_candidates\");\r\n    sessionStorage.setItem('use', mobile);\r\n\r\n    setState({ ...state, right: true }); \r\n    setDataList(\"ADD\"); \r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n        data: {\r\n          mobile:mobile.substring(2)\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) { \r\n          if (response.data.status === true) {\r\n   \r\n            // reset({\r\n            //   requirementId:recruitmentId, \r\n            //   mobile: mobile.substring(2),\r\n            //   email: response.data.data?.email,\r\n            //   firstName: response.data.data?.firstName,\r\n            //   lastName: response.data.data?.lastName,\r\n            //   skills: response.data.data?.skills,  \r\n            //   experience: response.data.data?.experience, \r\n            //   location: response.data.data?.currentLocation,\r\n                     \r\n            //    gender: response.data.data?.gender,\r\n            //   differentlyAbled:  response.data.data?.differentlyAbled, \r\n            //   candidateProcessed:  response.data.data?.candidateProcessed,\r\n            //   native:  response.data.data?.nativeLocation,\r\n            //   preferredLocation:  response.data.data?.preferredLocation,\r\n            //   relevantExperience: response.data.data?.relevantExperience,\r\n            //   educationalQualification:  response.data.data?.educationalQualification,\r\n            \r\n            //   currentCtc: response.data.data?.currentCtc,\r\n            //   expectedCtc:  response.data.data?.expectedCtc,\r\n            //   noticePeriod: response.data.data?.noticePeriod,\r\n            //   reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            //   currentCompanyName: response.data.data?.currentCompanyName,\r\n            //   reason: response.data.data?.reason,\r\n            //   })\r\n  \r\n            setCandidate({\r\n              ...candidate,\r\n              mobile:mobile.substring(2),\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,  \r\n            experience: response.data.data?.experience, \r\n            location: response.data.data?.currentLocation,\r\n            dob: response.data.data?.dob,\r\n             gender: response.data.data?.gender,\r\n            differentlyAbled:  response.data.data?.differentlyAbled, \r\n            candidateProcessed:  response.data.data?.candidateProcessed,\r\n            native:  response.data.data?.nativeLocation,\r\n            preferredLocation:  response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:  response.data.data?.educationalQualification, \r\n            currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc:  response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            reason: response.data.data?.reason,\r\n            candidateRecruiterDiscussionRecording:response.data.data?.candidateRecruiterDiscussionRecording, \r\n            candidateSkillExplanationRecording:response.data.data?.candidateSkillExplanationRecording,\r\n            candidateMindsetAssessmentLink:response.data.data?.candidateMindsetAssessmentLink,\r\n           candidateAndTechPannelDiscussionRecording:response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n           currentCompanyName: response.data.data?.currentCompanyName,\r\n            freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n           });\r\n        }\r\n      });\r\n\r\n  } \r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  const [requirement, setRequirement] = useState([]);\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n  const [shortList, setShortList] = useState({\r\n    id: \"\",\r\n    cand_name: \"\",\r\n    job_id: \"\",\r\n    job_name: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    cand_mobile: \"\",\r\n    statusCode: \"\",\r\n    free: \"\",\r\n  });\r\n\r\n\r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n\r\n  const [validation, setValidation] = useState(false);\r\n  const [saveOnly,setSaveOnly]=useState(\"YES\");\r\n\r\n\r\n  const [addList, setAddList] = useState([]);\r\n\r\n  const filterRef = useRef(null);\r\n  const joiningRef = useRef();\r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required'),\r\n    firstName: Yup.string().required('First Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string().max(255).required('Last Name is required')\r\n    .max(255)\r\n    .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n      message: \"Last Name be Alphanumeric\",\r\n    }),\r\n    mobile: Yup.string().required('Mobile is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required('Skill is required'),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n    location: Yup.string().nullable().notRequired(),  \r\n    alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required('Gender is required').notRequired(),\r\n    educationalQualification: Yup.string().nullable().notRequired(), \r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(), \r\n    native: Yup.string().nullable().notRequired(),\r\n    candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n    candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n    candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n     location: Yup.string().nullable().notRequired(),\r\n     alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n     native: Yup.string().nullable().notRequired(),\r\n     preferredLocation: Yup.string().nullable().notRequired(),\r\n     relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     educationalQualification: Yup.string().nullable().notRequired(),\r\n     day: Yup.string().nullable().notRequired(),\r\n     month: Yup.string().nullable().notRequired(),\r\n     year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required('Gender is required').notRequired(),\r\n     differentlyAbled: Yup.string().nullable().notRequired(),\r\n     currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     noticePeriod: Yup.string().nullable().notRequired(),\r\n     reasonForJobChange: Yup.string().nullable().notRequired(),\r\n     candidateProcessed: Yup.string().nullable().notRequired(),\r\n     reason: Yup.string().nullable().notRequired(), \r\n     candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n     candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n     candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n     candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n \r\n  const noteSchema = Yup.object().shape({\r\n    message: Yup.string().required(\"Message is required\"),\r\n  });\r\n\r\n  const dropSchema = Yup.object().shape({\r\n    reason: Yup.string().required(\"Reason is required\"),\r\n  });\r\n\r\n  const {\r\n    register: dropCandidates,\r\n    formState: { errors: dropErrors },\r\n    handleSubmit: dropSubmit,\r\n    reset: dropReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(dropSchema),\r\n  });\r\n\r\n  const {\r\n    register: noteCandidates,\r\n    formState: { errors: noteErrors },\r\n    handleSubmit: noteSubmit,\r\n    reset: noteReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(noteSchema),\r\n  });\r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset:editreset\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isSubmitting },\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n\r\n \r\n \r\n  useEffect(() => {\r\n    setLoader(true);\r\n    setSearch(new URLSearchParams(candidate_search).get('search'));\r\n\r\n    var mobile = sessionStorage.getItem(\"use\");\r\n\r\n    if(mobile !== \"\" && mobile !== null){\r\n      setState({ ...state, right: true }); \r\n    setDataList(\"ADD\"); \r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n        data: {\r\n          mobile:mobile.substring(2)\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) { \r\n          if (response.data.status === true) {\r\n   \r\n            sessionStorage.setItem('use', \"\");\r\n              reset({\r\n                requirementId:recruitmentId, \r\n                mobile: mobile.substring(2),\r\n                email: response.data.data?.email,\r\n                firstName: response.data.data?.firstName,\r\n                lastName: response.data.data?.lastName,\r\n                skills: response.data.data?.skills,  \r\n                experience: response.data.data?.experience, \r\n                location: response.data.data?.currentLocation,\r\n                       \r\n                 gender: response.data.data?.gender,\r\n                differentlyAbled:  response.data.data?.differentlyAbled, \r\n                candidateProcessed:  response.data.data?.candidateProcessed,\r\n                native:  response.data.data?.nativeLocation,\r\n                preferredLocation:  response.data.data?.preferredLocation,\r\n                relevantExperience: response.data.data?.relevantExperience,\r\n                educationalQualification:  response.data.data?.educationalQualification,\r\n              \r\n                currentCtc: response.data.data?.currentCtc,\r\n                expectedCtc:  response.data.data?.expectedCtc,\r\n                noticePeriod: response.data.data?.noticePeriod,\r\n                reasonForJobChange: response.data.data?.reasonForJobChange,\r\n                currentCompanyName: response.data.data?.currentCompanyName,\r\n                reason: response.data.data?.reason,\r\n                })\r\n    \r\n              setCandidate({\r\n                ...candidate,\r\n                mobile:mobile.substring(2),\r\n              email: response.data.data?.email,\r\n              firstName: response.data.data?.firstName,\r\n              lastName: response.data.data?.lastName,\r\n              skills: response.data.data?.skills,  \r\n              experience: response.data.data?.experience, \r\n              location: response.data.data?.currentLocation,\r\n              dob: response.data.data?.dob,\r\n               gender: response.data.data?.gender,\r\n              differentlyAbled:  response.data.data?.differentlyAbled, \r\n              candidateProcessed:  response.data.data?.candidateProcessed,\r\n              native:  response.data.data?.nativeLocation,\r\n              preferredLocation:  response.data.data?.preferredLocation,\r\n              relevantExperience: response.data.data?.relevantExperience,\r\n              educationalQualification:  response.data.data?.educationalQualification, \r\n              currentCtc: response.data.data?.currentCtc,\r\n              expectedCtc:  response.data.data?.expectedCtc,\r\n              noticePeriod: response.data.data?.noticePeriod,\r\n              reasonForJobChange: response.data.data?.reasonForJobChange,\r\n              reason: response.data.data?.reason,\r\n              candidateRecruiterDiscussionRecording:response.data.data?.candidateRecruiterDiscussionRecording, \r\n              candidateSkillExplanationRecording:response.data.data?.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data?.candidateMindsetAssessmentLink,\r\n             candidateAndTechPannelDiscussionRecording:response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n             currentCompanyName: response.data.data?.currentCompanyName,\r\n              freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n             }); \r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n\r\n      const form = filterRef.current; \r\n      if(new URLSearchParams(candidate_search).get('search')){\r\n        form[\"search\"].value= new URLSearchParams(candidate_search).get('search');\r\n      }\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n        data: {\r\n          page: \"1\",\r\n          search: `${form[\"search\"].value}`,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [reducerValue, token, new URLSearchParams(candidate_search).get('search'), sessionStorage.getItem(\"use\")]);\r\n\r\n    \r\n    function updateData(id){\r\n \r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n        data: {\r\n          id: id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n    \r\n          if (response.data.status === true) { \r\n    \r\n            var myCandidateStatuses= response.data.data;\r\n    \r\n            axios({\r\n              method: \"post\",\r\n              url: `${process.env.REACT_APP_SERVER}recruiter/candidate`,\r\n              data: {\r\n                id: id,\r\n              },\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: token,\r\n              },\r\n            })\r\n              .then(function (result) {\r\n              \r\n                 if (result.data.status === true) {  \r\n           \r\n            const updateState = candidatesData.map(item => {\r\n        \r\n              if (item.id === id) { \r\n                return { ...item,  \r\n                    candidateDetail: result.data.data.candidateDetail,  \r\n                    invoiceValue: result.data.data.invoiceValue,  \r\n                    invoicedDate: result.data.data.invoicedDate,  \r\n                    joinedDate: result.data.data.joinedDate, \r\n                    statusCode: result.data.data.statusList.statusCode,\r\n                    statusList: result.data.data.statusList,  \r\n                    myCandidateStatuses: myCandidateStatuses,\r\n                    droppedReason: result.data.data.droppedReason,\r\n                    ditchReason: result.data.data.ditchReason,\r\n                    creditNoteReason: result.data.data.creditNoteReason,\r\n                };\r\n                \r\n              }\r\n              return item;\r\n            }); \r\n         \r\n            setCandidatesData(updateState);\r\n          }\r\n          setLoader(false);\r\n        \r\n          });   \r\n      \r\n          \r\n    \r\n    }\r\n    })\r\n    .catch(function (error) {\r\n    console.log(error);\r\n    }); \r\n    \r\n      }\r\n\r\n      \r\n  function handleAddNotes(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/addCandidateNotes`,\r\n        data: {\r\n          candidateId: candidatesEdit.id,\r\n          message: values.message,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setSearch(\"\");\r\n    history.push(\"/app/recruiter_candidates?search=\");\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleDropOpen = () => {\r\n    setDropOpen(true);\r\n  };\r\n\r\n  const handleDropClose = () => {\r\n    setDropOpen(false);\r\n  };\r\n\r\n  const [dropReasonOpen, setDropReasonOpen] = useState(false);\r\n\r\n  const handleDropReasonOpen = () => {\r\n    \r\n    setDropReasonOpen(true);\r\n    setStatusOpen(false); \r\n  };\r\n\r\n  const handleDropReasonClose = () => {\r\n    setDropReasonOpen(false);\r\n  };\r\n\r\n  const reasonRef =useRef()\r\n\r\n  const [reasonOpen, setReasonOpen] = useState(false);\r\n\r\n  const handleReasonOpen = () => {  \r\n    setStatusOpen(false);\r\n    setStatusNewOpen(false);\r\n    setReasonOpen(true); \r\n  };\r\n\r\n  const handleReasonClose = () => {\r\n    setReasonOpen(false);\r\n  };\r\n\r\n  const [ changeMessageOpen, setChangeMessageOpen] = useState(false);\r\n\r\n \r\n  const handleChangeMessageOpen = () => {\r\n    setChangeMessageOpen(true);\r\n    handleStatusClose();\r\n  };\r\n\r\n  const handleChangeMessageClose = () => {\r\n    setChangeMessageOpen(false);\r\n  };\r\n\r\n  function getFilterData() {\r\n    const form = filterRef.current;\r\n    if (form[\"fromDate\"].value > form[\"toDate\"].value) {\r\n      handleNotificationCall(\"error\", \"Check your Selected Dates\");\r\n      return\r\n    }\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      search: `${form[\"search\"].value}`,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let url = \"\"\r\n    if (decode.companyType === \"COMPANY\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/myassignedRequirementsList`\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/requirementList`\r\n    }\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        page: \"1\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (decode.companyType === \"COMPANY\") {\r\n          const responeData = response.data.data\r\n\r\n          responeData.map((item)=>{\r\n            const newData = {\r\n              id: item.requirement.id,\r\n              requirementName: item.requirement.requirementName,\r\n              uniqueId: item.requirement.uniqueId,\r\n            }\r\n\r\n            setRequirement([...requirement,newData ]);\r\n          })\r\n\r\n        }else{\r\n          setRequirement(response.data.data);\r\n        }\r\n        console.log(response.data.data)\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      search: `${form[\"search\"].value}`,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n  \r\n  const [recruitmentId, setRecruitmentId]  = useState(\"\");\r\n\r\n  function handleAdd(values) { \r\n \r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n      } else {\r\n        setAddList(values);\r\n\r\n \r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n          \r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem('firstName'),\r\n              rec_mobile_no: localStorage.getItem('mobile'),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n\r\n            CheckAlreadyExit(values);\r\n\r\n          \r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\nfunction CheckAlreadyExit(addList){\r\n \r\n  var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n    data: {\r\n      email: addList.email,\r\n      firstName: addList.firstName,\r\n      lastName: addList.lastName,\r\n      mobile: addList.mobile,\r\n      requirementId: recruitmentId,\r\n      skills: addList.skills,\r\n      sourceId: addList.source,\r\n      isAnswered: candidate.freeValue,\r\n      message: \"\",\r\n      experience:addList.experience,\r\n      currentLocation: addList.location,\r\n      alternateMobile:addList.alternateMobile,\r\n      preferredLocation:addList.preferredLocation,\r\n      nativeLocation:addList.native,\r\n       relevantExperience:addList.relevantExperience,\r\n      currentCtc:addList.currentCtc,\r\n      expectedCtc:addList.expectedCtc,\r\n      dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n      noticePeriod:addList.noticePeriod,\r\n      reasonForJobChange:addList.reasonForJobChange,\r\n      candidateProcessed:addList.candidateProcessed,\r\n      differentlyAbled:addList.differentlyAbled,\r\n      educationalQualification:addList.educationalQualification,\r\n      gender:addList.gender,\r\n      reason: addList.reason, \r\n      candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n      candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n      candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n      candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n      sendMessage: \"\"  \r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n    \r\n    if (response.data.status === true) { \r\n  \r\n      handleClickOpen();\r\n\r\n} \r\n// else{\r\n//   handleNotificationCall(\"error\", response.data.message);\r\n\r\n// }\r\n});\r\n}\r\n\r\n  function handleEdit(values) { \r\n\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n     \r\n      var dob = values.day+\"-\"+values.month+\"-\"+values.year;\r\n     \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/editCandidate`,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience:values.experience, \r\n          currentLocation: values.location, \r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile:values.alternateMobile,\r\n          preferredLocation:values.preferredLocation,\r\n          nativeLocation:values.native,\r\n           relevantExperience:values.relevantExperience,\r\n          currentCtc:values.currentCtc,\r\n          expectedCtc:values.expectedCtc, \r\n          dob: values.day===undefined? candidatesEdit.dob : dob!== \"--\"?  dob: candidatesEdit.dob,\r\n          noticePeriod:values.noticePeriod,\r\n          reasonForJobChange:values.reasonForJobChange,\r\n          candidateProcessed:values.candidateProcessed,\r\n          differentlyAbled:values.differentlyAbled,\r\n          educationalQualification:values.educationalQualification,\r\n          gender:values.gender,\r\n          reason: values.reason, \r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n \r\n             if(file !== undefined ){\r\n              if(file?.length !== 0){\r\n              uploadResume(file, response.data.candidateDetailsId); \r\n            }\r\n          }\r\n\r\n          if(assessment !== undefined ){\r\n            if(assessment?.length !== 0){\r\n              uploadAssessment(assessment, response.data.candidateId);\r\n            }\r\n           } \r\n            handleNotificationCall(\"success\", response.data.message);\r\n            updateData(candidatesEdit.id);\r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n            setLoader(false);\r\n          }\r\n          resolve();\r\n          \r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n \r\n  function handleAddList(send) {\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n \r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience:addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile:addList.alternateMobile,\r\n        preferredLocation:addList.preferredLocation,\r\n        nativeLocation:addList.native,\r\n         relevantExperience:addList.relevantExperience,\r\n        currentCtc:addList.currentCtc,\r\n        expectedCtc:addList.expectedCtc,\r\n        dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n        noticePeriod:addList.noticePeriod,\r\n        reasonForJobChange:addList.reasonForJobChange,\r\n        candidateProcessed:addList.candidateProcessed,\r\n        differentlyAbled:addList.differentlyAbled,\r\n        educationalQualification:addList.educationalQualification,\r\n        gender:addList.gender,\r\n        reason: addList.reason, \r\n        sendMessage: send,  \r\n        candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName:addList.currentCompanyName,\r\n      }\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience:addList.experience,\r\n         currentLocation: addList.location,\r\n         alternateMobile:addList.alternateMobile,\r\n         preferredLocation:addList.preferredLocation,\r\n         nativeLocation:addList.native,\r\n          relevantExperience:addList.relevantExperience,\r\n         currentCtc:addList.currentCtc,\r\n         expectedCtc:addList.expectedCtc,\r\n         dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n         noticePeriod:addList.noticePeriod,\r\n         reasonForJobChange:addList.reasonForJobChange,\r\n         candidateProcessed:addList.candidateProcessed,\r\n         differentlyAbled:addList.differentlyAbled,\r\n         educationalQualification:addList.educationalQualification,\r\n         gender:addList.gender,\r\n         reason: addList.reason, \r\n        sendMessage: send,\r\n        candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName:addList.currentCompanyName,\r\n       }\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n    \r\n      if (response.data.status === true) {\r\n        handleClose();\r\n\r\n         var message =\"\";\r\n\r\n        if(file !== undefined ){\r\n          if(file?.length !== 0){\r\n          uploadResume(file, response.data.candidateDetailsId); \r\n        }\r\n      }\r\n      if(assessment !== undefined ){\r\n        if(assessment?.length !== 0){\r\n          uploadAssessment(assessment, response.data.candidateId);\r\n      }}\r\n        if (send === true) {  \r\n        if (candidate.freeValue === \"YES\") {\r\n          message = messageRef.current.value;\r\n\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=+91\" +\r\n              addList.mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        } else {\r\n          message =  \"Hi \" +   requirementList.cand1_name + \", Can we chat today about a job opening \" +  localStorage.getItem('firstName') +\r\n          \", \" +   localStorage.getItem('mobile') +  \", \" +  localStorage.getItem('companyName') +   \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n          handleMessage(\r\n            response.data.candidate_mobile,\r\n            message,\r\n            response.data.candidateId,\r\n          );\r\n        }\r\n      }\r\n\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        forceUpdate();\r\n        setState({ ...state, right: false });\r\n        reset();\r\n      } else {\r\n       \r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function getCanididateResumeInfo(candidateData,candidateDetail) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/getCanididateResumeInfo`,\r\n      data: {\r\n        id:candidateData\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setResumeParsedData({\r\n          data:response.data?.data,\r\n          candidateName: candidateDetail?.firstName + \" \"+ candidateDetail?.lastName,\r\n        })\r\n        const responsedData = JSON.stringify(response.data?.data)\r\n        const candidateFullName = candidateDetail?.firstName + \" \"+ candidateDetail?.lastName\r\n        sessionStorage.setItem('candidateResume',responsedData)\r\n        sessionStorage.setItem('candidateName',candidateFullName)\r\n        window.open(`/v1#/app/parsed_resume`,'_blank')\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\nfunction uploadResume(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"resume\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n      // aiResumeUpload(data)\r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\nfunction uploadAssessment(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"file\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n       \r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\n  function handleMessage(mobile, message, candidateId) {\r\n    var url = \"\";\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"first_message\",\r\n        vars: [\r\n          requirementList.cand1_name,\r\n          requirementList.rec_name,\r\n          requirementList.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: requirementList.cand1_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        setLoader(false);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n     \r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function changeStatus(send, message, status, candidateId) {\r\n    setLoader(true);\r\n    const template_name =\r\n    shortList.statusCode === 303\r\n       ? \"1st_interview_round\"\r\n       : shortList.statusCode === 3031\r\n       ? \"initial_interview_rounds\"\r\n       : shortList.statusCode === 304\r\n       ? status === \"Schedule Another Interview\"\r\n         ? \"initial_interview_rounds\"\r\n         : status === \"Schedule Final Interview\"\r\n         ? \"final_interview_round\"\r\n         : status === \"Send Document\"\r\n         ? \"document_collect\"\r\n         : \"\"\r\n       : shortList.statusCode === 3041\r\n       ? \"document_collect\"\r\n       : shortList.statusCode === 305\r\n       ? \"salary_breakup_shared_confirmation\"\r\n       : shortList.statusCode === 307\r\n       ? \"offer_released_confirmation\"\r\n       : shortList.statusCode === 308\r\n       ? status === \"Joining Confirmation\"\r\n         ? \"joining_confirmation\"\r\n         : \"\"\r\n       : \"\";\r\n\r\n    const vars =\r\n      shortList.statusCode === 308\r\n        ? [\r\n            shortList.cand_name,\r\n            shortList.job_id, \r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ]\r\n        : [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ];\r\n\r\n    var url = \"\";\r\n    if (shortList.free === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        sendMessage: send,\r\n        candidateId: candidateId,\r\n        phone_number: shortList.cand_mobile,\r\n        template_name: template_name,\r\n        vars: vars,\r\n        message: message,\r\n        candidate_name: shortList.cand_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        if (shortList.free === \"YES\" && send === true) {\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=\" +\r\n              shortList.cand_mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        }\r\n\r\n        updateData(candidateId); \r\n        setState({ ...state, right: false });\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n     \r\n    });\r\n\r\n \r\n  }\r\n\r\n  function joinedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateJoinedStatus`,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        joinedDate: joiningRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function updateJoiningDitchedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateJoiningDitchedStatus`,\r\n      data: {\r\n        candidateId: shortList.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  function DropStatus(values) {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`;\r\n\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id,\r\n          droppedReason: values.reason\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id);\r\n          handleDropReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  function changeStcStatus() {\r\n     \r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateStcStatus`;\r\n \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id, \r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id);\r\n          handleChangeMessageClose(); \r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    \r\n  }\r\n\r\n  function OfferDeclineStatus(values) {\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateOfferDeclineStatus`;\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: shortList.id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id);\r\n          handleStatusNewClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  const ExistCheck=(e)=>{\r\n\r\n    if(recruitmentId!==\"\"){\r\n\r\n      CheckExitAlready(recruitmentId, e);\r\n\r\n    } else{\r\n      handleNotificationCall(\"error\", \"Select Requirement\");\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n  function CheckExitAlready(recruitmentId, e) {\r\n  var data = {}; \r\n  var url=\"\";\r\n\r\n  if(e.target.name === \"email\"){\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      email: e.target.value\r\n    } \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`\r\n  } else {\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      mobile: e.target.value\r\n    }  \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`\r\n  }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n       if (response.data.status === true) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n  \r\n    })\r\n  }\r\n\r\n  function cvMatchingPercentage(id,requirementId) {\r\n\r\n    setMatchLoading(true)\r\n    const isRequirementIdExist = resumePercentage.some(item => item.requirementId === requirementId);\r\n    if (isRequirementIdExist) {\r\n      setMatchLoading(false)\r\n      handleNotificationCall(\"error\", \"Requirement already exists in the match list.\");\r\n      return;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/jdMatcher`,\r\n      data: {\r\n        id: id,\r\n        requirementId: requirementId\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then((response) => {\r\n      if (response.data.status === true) {\r\n        \r\n        const previousPercentage = [...resumePercentage];\r\n\r\n        const newPercentageItem = {\r\n          description: response.data?.data,\r\n          requirementName: response.data?.requirementName,\r\n          requirementId: response.data?.requirementId\r\n        };\r\n\r\n        previousPercentage.push(newPercentageItem);\r\n\r\n        setResumePercentage(previousPercentage);\r\n      } else if (response.data.status === false) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n      setMatchLoading(false)\r\n    });\r\n  }\r\n\r\n  const removePercentage = (requirementIdToRemove) => {\r\n    const updatedPercentage = resumePercentage.filter(item => item.requirementId !== requirementIdToRemove);\r\n    setResumePercentage(updatedPercentage);\r\n  };\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"VIEW\") {\r\n      setDataList(\"VIEW\");\r\n    } else {\r\n      setDataList(\"NOTES\");\r\n    }\r\n    if (name !== \"NOTES\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/candidate`,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n       \r\n          if (response.data.status === true) {\r\n             setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc: response.data.data.requirement?.recruiter?.firstName +  \" \" + response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              resume:response.data.data.candidateDetail?.resume, \r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              isCandidateCpv: response.data.data.isCandidateCpv,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile.substring(2),\r\n              resume:response.data.data.candidateDetail?.resume, \r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setState({ ...state, right: true });\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n\r\n\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n          data: {\r\n            id: values,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n \r\n            if (response.data.status === true) {\r\n\r\n        setListCanditate(response.data.data);\r\n\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n    \r\n    } else {\r\n      setCandidatesEdit({\r\n        ...candidatesEdit,\r\n        id: values,\r\n      });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/viewCandidateNotes`,\r\n        data: {\r\n          candidateId: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setCandidatesNote(response.data.data);\r\n          setState({ ...state, right: true });\r\n          setLoader(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n \r\n\r\n \r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n         \r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  // const CustomExpandIcon = ({ isRowExpanded }) => {\r\n  //   if (isRowExpanded) {\r\n  //     return (\r\n  //       <Tooltip title=\"List of Invoiced Candidates\" placement=\"right\">\r\n  //         <ExpandLessIcon />\r\n  //       </Tooltip>\r\n  //     );\r\n  //   } else {\r\n  //     return (\r\n  //       <Tooltip title=\"List of Invoiced Candidates\" placement=\"right\">\r\n  //         <ExpandMoreIcon/>\r\n  //       </Tooltip>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Oops! Matching record could not be found',\r\n      }\r\n    },\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    search: false,\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery===true? 'vertical' : 'standard',\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n            <Bar\r\n              title=\"Candidates\"\r\n              list={list} \r\n            />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n  \r\n  const components = {\r\n    ExpandButton: function(props) { \r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [stausOpen, setStatusOpen] = React.useState(false);\r\n  const [stausNewOpen, setStatusNewOpen] = React.useState(false);\r\n  const [dropOpen, setDropOpen] = React.useState(false);\r\n  const [messageOpen, setMessageOpen] = React.useState(false);\r\n\r\n   \r\n  const [candidate, setCandidate] = useState({\r\n    requirementId:\"\",\r\n    source:\"\",\r\n    email:\"\", \r\n    firstName:\"\",\r\n    lastName:\"\",\r\n    skills:\"\",  \r\n    location:\"\", \r\n    experience:null,    \r\n     candidateProcessed:\"\",\r\n    native:\"\",\r\n    preferredLocation:\"\",\r\n    relevantExperience:null,\r\n    educationalQualification:\"\",\r\n    gender:\"\",\r\n    differentlyAbled:\"\",\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    dob:\"\", \r\n    candidateRecruiterDiscussionRecording:\"\", \r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n     candidateAndTechPannelDiscussionRecording:\"\",\r\n    freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n\r\n}); \r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleStatusOpen = () => {\r\n    setStatusOpen(true);\r\n  };\r\n\r\n  const handleStatusClose = () => {\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleStatusNewOpen = () => {\r\n    setStatusNewOpen(true);\r\n  };\r\n\r\n  const handleStatusNewClose = () => {\r\n    setStatusNewOpen(false);\r\n  };\r\n\r\n  const handleMessageOpen = () => {\r\n    setMessageOpen(true);\r\n  };\r\n\r\n  const handleMessageClose = () => {\r\n    setMessageOpen(false);\r\n  };\r\n  const [view, setView] = useState(\"\");\r\n\r\n  function sendMessage(candidateId, mobile, message, candidate_name, list) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"general_message\",\r\n        vars: [\r\n          candidate_name,\r\n          list.rec_name,\r\n          list.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: candidate_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n\r\n          setLoader(false);\r\n          handleMessageClose();\r\n          handleNotificationCall(\"success\", response.data.message); \r\n\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  function dropConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setDropOpen(false);\r\n        updateData(id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n           file={file}\r\n           setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation }\r\n          show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) : dataList === \"ADD\" ? (\r\n      <>\r\n        <Add\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          handleAddList={handleAddList}\r\n          register={register} \r\n          source={source} \r\n          recruitmentList={recruitmentList}\r\n          handleClose={handleClose}\r\n          errors={errors}\r\n          setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          setLoader={setLoader}\r\n          toggleDrawer={toggleDrawer}\r\n          setRecruitmentList={setRecruitmentList}\r\n          requirementList={requirementList}\r\n          handleSubmit={handleSubmit}\r\n          handleAdd={handleAdd}\r\n          requirement={requirement}\r\n          setValue={setValue}\r\n          isSubmitting={isSubmitting}\r\n          open={open}\r\n          messageRef={messageRef}\r\n          reset={reset}\r\n           \r\n          setCandidate={setCandidate}\r\n          candidate={candidate}\r\n          setFile={setFile}\r\n          file={file}\r\n          setRecruitmentId={setRecruitmentId}\r\n          recruitmentId={recruitmentId}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          setPhoneValidation={setPhoneValidation }\r\n          setHideContactDetails={setHideContactDetails}\r\n          hideContactDetails={hideContactDetails}\r\n          ExistCheck={ExistCheck} \r\n          requirementId={\"true\"}\r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Note\r\n          toggleDrawer={toggleDrawer}\r\n          candidatesNote={candidatesNote}\r\n          noteCandidates={noteCandidates}\r\n          noteErrors={noteErrors}\r\n          handleAddNotes={handleAddNotes}\r\n          noteSubmit={noteSubmit}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          \r\n          <PageTitle title=\"Candidates\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n        <div className={classes.lgButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<AddCircleIcon />} \r\n            color=\"primary\"\r\n            className={classes.addUser}\r\n            onClick={(e) => {\r\n            \r\n              setDataList(\"ADD\");\r\n              reset({ });\r\n              setCandidate({\r\n                ...candidate,\r\n                requirementId:\"\",\r\n                source:\"\",\r\n                email:\"\", \r\n                firstName:\"\",\r\n                lastName:\"\",\r\n                skills:\"\",  \r\n                location:\"\", \r\n                experience:null,   \r\n                gender:\"\",\r\n                differentlyAbled:\"\", \r\n                candidateProcessed:\"\",\r\n                native:\"\",\r\n                preferredLocation:\"\",\r\n                relevantExperience:null,\r\n                educationalQualification:\"\", \r\n                currentCtc:null,\r\n                expectedCtc:null,\r\n                noticePeriod:\"\",\r\n                reasonForJobChange:\"\",\r\n                reason:\"\",\r\n                dob:\"\", \r\n                candidateRecruiterDiscussionRecording:\"\", \r\n                candidateSkillExplanationRecording:\"\",\r\n                candidateMindsetAssessmentLink:\"\",\r\n                candidateAndTechPannelDiscussionRecording:\"\",\r\n                freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n\r\n               });\r\n               setState({ ...state, right: true });\r\n               setPhoneValidation(false);\r\n               setRecruitmentId(\"\");\r\n              setValidation(false);\r\n              setFile([]);\r\n            }}\r\n          >\r\n            Add New Candidate\r\n          </Button>\r\n          </div>\r\n          <div className={classes.smButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            startIcon={<AddCircleIcon />} \r\n            className={classes.addUser}\r\n            color=\"primary\"\r\n            onClick={(e) => {\r\n              setState({ ...state, right: true });\r\n              setDataList(\"ADD\");\r\n              reset();\r\n              setValidation(false);\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n          </div>\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{ paper: dataList===\"VIEW\" || dataList===\"NOTES\"? classes.drawer: classes.clientDrawer }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n        <TextField \r\n          label=\"Search\"\r\n            type=\"text\"\r\n            name=\"search\" \r\n            placeholder=\"Enter Candidate Unique ID/Name/Email/Mobile (eg: 91XXXXXXXXXX)\"\r\n            InputLabelProps={{ shrink: true }}\r\n            value={search}\r\n            defaultValue={search}\r\n            onChange={(e) => {\r\n              setSearch(e.target.value);\r\n            }}\r\n            \r\n           \r\n            className={classes.searchWidth} \r\n          />\r\n          <TextField\r\n           \r\n            name=\"fromDate\"\r\n           label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n            \r\n          />\r\n\r\n          <TextField\r\n            \r\n            name=\"toDate\"\r\n           label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n            \r\n             \r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n           components={components}\r\n            options={table_options}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: \"Resume\",\r\n              },\r\n              {\r\n                name: \"View Candidate\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <Actions\r\n                  index={index}\r\n                  item={item}\r\n                  reset={reset}\r\n                  editreset={editreset}\r\n                  noteReset={noteReset}\r\n                  setCandidateList={setCandidateList}\r\n                  handleMessageOpen={handleMessageOpen}\r\n                  candidateList={candidateList}\r\n                  handleDropOpen={handleDropOpen}\r\n                  handleReverseOpen={handleDropOpen}\r\n                  handleShow={handleShow}\r\n                  setFile={setFile}\r\n                  setAssessment={setAssessment}\r\n                  setCandidatesChange={setCandidatesChange} \r\n                  setPhoneValidation={setPhoneValidation}\r\n                  handleUse={handleUse}\r\n                />,\r\n                item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item}\r\n                      handleStatusOpen={handleStatusOpen}\r\n                      handleStatusNewOpen={handleStatusNewOpen}\r\n                      setValidation={setValidation}\r\n                      setShortList={setShortList}\r\n                      shortList={shortList}\r\n                      setView={setView}\r\n                      view={view}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n                < >\r\n                 \r\n              {item.candidateDetail?.firstName + \" \" +  item.candidateDetail?.lastName}   <br/>   {\" (\" +  item.uniqueId +   \")\"}\r\n            \r\n              </>,\r\n             \r\n             item.mainId === decode.mainId ? \r\n             <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n             : item.hideContactDetails !== true?\r\n             <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n             :\"\",\r\n\r\n                <> {item.requirement?.requirementName} <br/>{  \"(\" +  item.requirement?.uniqueId +    \")\"}</>,\r\n                item.requirement?.recruiter?.firstName +  \" \" +  item.requirement?.recruiter?.lastName,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName,\r\n                \r\n              \r\n                \r\n             \r\n             <>{item.candidateDetail?.resume !== \"https://liverefo.s3.amazonaws.com/\" ? ( <>   <Grid container className={classes.space}>     <Grid item xs className={classes.toolAlign}>      \r\n             <Tooltip         title=\"View Resume\"         placement=\"bottom\"         aria-label=\"view\"       >         \r\n               <DescriptionIcon           className={classes.toolIcon}           onClick={()=>{ handleResumeOpen(); setFile([\r\n                 {\r\n                   url: item.candidateDetail?.resume\r\n                 }\r\n               ])}}         />      \r\n             </Tooltip>\r\n             {/* <Tooltip         title=\"Downlaod Resume\"         placement=\"bottom\"         aria-label=\"downlaod\"       > \r\n               <a href={item.candidateDetail?.resume} download>  <GetAppIcon className={classes.toolIcon} />    </a>      \r\n             </Tooltip>  */}\r\n             </Grid>   </Grid> </> ) : ( \"No Resume Found\" )}</>,\r\n             <Tooltip         title=\"View Candidate\"         placement=\"bottom\"         aria-label=\"view\"       > \r\n                <ViewIcon\r\n                onClick={(e) => {\r\n                    handleShow(item.id, \"VIEW\");\r\n                  }}\r\n                    className={classes.toolIcon}\r\n                  \r\n                  />\r\n             </Tooltip>,\r\n              //   <Tooltip\r\n              //     title=\"Match JD\"\r\n              //     placement=\"bottom\"\r\n              //     aria-label=\"view\"\r\n              //   >\r\n              //     <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n              //       onClick={(e) => {\r\n              //         handleJDOpen();\r\n              //         cvMatchingPercentage(item.id);\r\n              //         setCandidMatchId(item.id);\r\n              //         setRequirementName(item.requirementName)\r\n              //       }}>\r\n              //       %\r\n              //     </div>\r\n              //   </Tooltip> \r\n              // ,\r\n              // <Tooltip\r\n              //     title=\"Get Resume Info\"\r\n              //     placement=\"bottom\"\r\n              //     aria-label=\"view\"\r\n              //   >\r\n              //     <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n              //       onClick={(e) => {\r\n              //         getCanididateResumeInfo(item.candidateDetailId,item.candidateDetail);\r\n              //       }}>\r\n              //       i\r\n              //     </div>\r\n              //   </Tooltip>,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Message\r\n        setState={setState}\r\n        state={state}\r\n        candidateList={candidateList}\r\n        decode={decode}\r\n        sendMessage={sendMessage}\r\n        handleMessageOpen={handleMessageOpen}\r\n        messageOpen={messageOpen}\r\n        handleMessageClose={handleMessageClose}\r\n      />\r\n\r\n\r\n      <Dialogs\r\n        handleStatusClose={handleStatusClose}\r\n        handleStatusNewClose={handleStatusNewClose}\r\n        validation={validation}\r\n        stausOpen={stausOpen}\r\n        stausNewOpen={stausNewOpen}\r\n        changeStatus={changeStatus}\r\n        shortList={shortList}\r\n        view={view}\r\n        setView={setView}\r\n        joinedStatus={joinedStatus}\r\n        updateJoiningDitchedStatus={updateJoiningDitchedStatus}\r\n        OfferDeclineStatus={OfferDeclineStatus}\r\n        joiningRef={joiningRef}\r\n        \r\n        saveOnly={saveOnly}\r\n        setSaveOnly={setSaveOnly} \r\n        dropCandidates ={ dropCandidates}\r\n        dropErrors={dropErrors}\r\n        dropSubmit={dropSubmit}\r\n        dropReset={dropReset}\r\n        DropStatus={DropStatus}\r\n        handleDropReasonClose={handleDropReasonClose}\r\n        dropReasonOpen={dropReasonOpen}\r\n        handleDropReasonOpen={handleDropReasonOpen}\r\n        changeMessageOpen={changeMessageOpen}\r\n        handleChangeMessageClose={handleChangeMessageClose}\r\n        changeStcStatus={changeStcStatus}\r\n        handleChangeMessageOpen={handleChangeMessageOpen}\r\n\r\n        reasonRef={reasonRef} \r\n        handleReasonOpen={handleReasonOpen}\r\n        reasonOpen={reasonOpen}\r\n        handleReasonClose={handleReasonClose}\r\n      />\r\n\r\n      <Drop\r\n        handleDropClose={handleDropClose}\r\n        dropOpen={dropOpen}\r\n        dropConfirmation={dropConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n            <ResumeDialog\r\n       resume={file}\r\n       resumeOpen={resumeOpen}\r\n       handleResumeClose={handleResumeClose}\r\n      />\r\n\r\n      {/* <MatchJDDialog\r\n        resumePercentage={resumePercentage}\r\n        requirementName={requirementName}\r\n        matchLoading={matchLoading}\r\n        jDOpen={matchJDOpen}\r\n        handleJDClose={handleJDClose}\r\n        candidMatchId={candidMatchId}\r\n        cvMatchingPercentage={cvMatchingPercentage}\r\n        removePercentage={removePercentage}\r\n      /> */}\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\AssignedCandidates.js",["736"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Avatar\r\n} from \"@material-ui/core\"; \r\nimport PageTitle from \"../../components/PageTitle\";\r\n import { toast } from \"react-toastify\";\r\n//import CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport moment from \"moment\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n//import classNames from \"classnames\";\r\nimport { useHistory } from \"react-router-dom\"; \r\nimport external from \"../../images/external.png\";\r\n// import { saveAs } from \"file-saver\";\r\n// import XlsxPopulate from \"xlsx-populate\";\r\n import ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n//import GetAppIcon from \"@material-ui/icons/GetApp\";\r\n\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport Notification from \"../../components/Notification\";\r\n\r\nimport Status from \"../../components/Admin/Status\";\r\nimport Dialogs from \"../../components/Admin/Dialogs\";\r\nimport ResumeDialog from \"../../components/Candidates/Dialogs\"; \r\nimport Drop from \"../../components/Candidates/Drop\";\r\n import Reverse from \"../../components/Admin/Reverse\";\r\nimport Actions from \"../../components/Candidates/Actions\";\r\n \r\nimport Add from \"../../components/Candidates/Add\";\r\nimport Edit from \"../../components/Candidates/Edit\";\r\nimport View from \"../../components/Candidates/View\";\r\nimport Note from \"../../components/Candidates/Note\";\r\nimport Bar from \"../../components/Candidates/Bar\";\r\nimport Message from \"../../components/Candidates/Message\"; \r\nimport ExpandButton from \"../../components/Candidates/ExpandButton\"; \r\nimport useStyles from \"../../themes/style.js\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Candidates(props) {\r\n \r\n  var classes = useStyles();\r\n  const messageRef=useRef()\r\n  const candidate_search = props.location.search;\r\n  const history = useHistory();\r\n  const mobileQuery = useMediaQuery('(max-width:600px)');   \r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n\r\n   \r\n  const filterRef = useRef(null);\r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n    const [candidateList, setCandidateList] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    mobile: \"\",\r\n    message: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n  });\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n   const [search, setSearch] = useState(new URLSearchParams(candidate_search).get('search'));\r\n \r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n\r\n    \r\n  function handleUse(mobile){\r\n    history.push(\"admin_candidates\");\r\n    sessionStorage.setItem('use', mobile);\r\n\r\n    setState({ ...state, right: true }); \r\n    setDataList(\"ADD\");\r\n    \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n      data: {\r\n        mobile:mobile.substring(2)\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) { \r\n        if (response.data.status === true) {\r\n \r\n          // reset({\r\n          //   requirementId:recruitmentId, \r\n          //   mobile: mobile.substring(2),\r\n          //   email: response.data.data?.email,\r\n          //   firstName: response.data.data?.firstName,\r\n          //   lastName: response.data.data?.lastName,\r\n          //   skills: response.data.data?.skills,  \r\n          //   experience: response.data.data?.experience, \r\n          //   location: response.data.data?.currentLocation, \r\n          //    candidateProcessed:  response.data.data?.candidateProcessed,\r\n          //   native:  response.data.data?.nativeLocation,\r\n          //   preferredLocation:  response.data.data?.preferredLocation,\r\n          //   relevantExperience: response.data.data?.relevantExperience,\r\n          //   educationalQualification:  response.data.data?.educationalQualification,\r\n          //   gender: response.data.data?.gender,\r\n          //   differentlyAbled: response.data.data?.differentlyAbled,\r\n          //   currentCtc: response.data.data?.currentCtc,\r\n          //   expectedCtc:  response.data.data?.expectedCtc,\r\n          //   noticePeriod: response.data.data?.noticePeriod,\r\n          //   reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          //   reason: response.data.data?.reason,\r\n          //   currentCompanyName: response.data.data?.currentCompanyName,\r\n          //   })\r\n\r\n          setCandidate({\r\n            ...candidate,\r\n            mobile:mobile.substring(2),\r\n          email: response.data.data?.email,\r\n          firstName: response.data.data?.firstName,\r\n          lastName: response.data.data?.lastName,\r\n          skills: response.data.data?.skills,  \r\n          experience: response.data.data?.experience, \r\n          location: response.data.data?.currentLocation,\r\n          dob: response.data.data?.dob,\r\n           candidateProcessed:  response.data.data?.candidateProcessed,\r\n          native:  response.data.data?.nativeLocation,\r\n          preferredLocation:  response.data.data?.preferredLocation,\r\n          relevantExperience: response.data.data?.relevantExperience,\r\n          educationalQualification:  response.data.data?.educationalQualification,\r\n          gender: response.data.data?.gender,\r\n          differentlyAbled: response.data.data?.differentlyAbled,\r\n          currentCtc: response.data.data?.currentCtc,\r\n          expectedCtc:  response.data.data?.expectedCtc,\r\n          noticePeriod: response.data.data?.noticePeriod,\r\n          reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          reason: response.data.data?.reason,\r\n          candidateRecruiterDiscussionRecording:response.data.data?.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:response.data.data?.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:response.data.data?.candidateMindsetAssessmentLink,\r\n         candidateAndTechPannelDiscussionRecording:response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n         currentCompanyName: response.data.data?.currentCompanyName,\r\n          freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n         });\r\n      }\r\n    });\r\n \r\n  } \r\n\r\n\r\n  const [candidatesNote, setCandidatesNote] = useState([]);\r\n  const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    requirementName: \"\",\r\n    source: \"\", \r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",       \r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false\r\n  });\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id:\"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    cc: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    invoiceValue: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n    location:\"\",\r\n    experience:null, \r\n    resume: \"\",\r\n\r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n  const [rowsPerPage] = useState(50);\r\n\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const joiningRef = useRef();\r\n  const invoiceRef = useRef();\r\n  const [file, setFile] = useState([]);\r\n  const [assessment,setAssessment] = useState([]);\r\n  const [hideContactDetails,setHideContactDetails] = useState(false);\r\n\r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  const [requirement, setRequirement] = useState([]);\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n  const [shortList, setShortList] = useState({\r\n    id: \"\",\r\n    cand_name: \"\",\r\n    job_id: \"\",\r\n    job_name: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    cand_mobile: \"\",\r\n    statusCode: \"\",\r\n    free: \"\",\r\n  });\r\n\r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n\r\n  const [validation, setValidation] = useState(false);\r\n\r\n  const [addList, setAddList] = useState([]);\r\n  const [source, setSource] = useState([]);\r\n  const [saveOnly,setSaveOnly]=useState(\"YES\");\r\n \r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n   const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required'),\r\n    firstName: Yup.string().required('First Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string().max(255).required('Last Name is required')\r\n    .max(255)\r\n    .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n      message: \"Last Name be Alphanumeric\",\r\n    }),\r\n    mobile: Yup.string().required('Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required('Skill is required'),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    location: Yup.string().nullable().notRequired(),  \r\n    alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n     month: Yup.string().nullable().notRequired(),\r\n     year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().nullable().required('Gender is required'),\r\n    educationalQualification: Yup.string().nullable().notRequired(), \r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(), \r\n    native: Yup.string().nullable().notRequired(),\r\n    candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n    candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n    candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n \r\n\r\n  \r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n     experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n     location: Yup.string().nullable().notRequired(),\r\n     alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n     native: Yup.string().nullable().notRequired(),\r\n     preferredLocation: Yup.string().nullable() ,\r\n     relevantExperience:Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n     educationalQualification: Yup.string().nullable().notRequired(),\r\n     day: Yup.string().nullable().notRequired(),\r\n     month: Yup.string().nullable().notRequired(),\r\n     year: Yup.string().nullable().notRequired(),\r\n     gender: Yup.string().nullable().required('Gender is required'),     \r\n     differentlyAbled: Yup.string().nullable().notRequired(),\r\n     currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     noticePeriod: Yup.string().nullable().notRequired(),\r\n     reasonForJobChange: Yup.string().nullable().notRequired(),\r\n     candidateProcessed: Yup.string().nullable().notRequired(),\r\n     reason: Yup.string().nullable().notRequired(), \r\n     candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n     candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n     candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n     candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const invoiceSchema = Yup.object().shape({\r\n    invoice: Yup.number().test('len', 'Must be exactly 15 digits', val => Math.ceil(Math.log10(val + 1)) <= 15).required(\"Invoice Value is required\").nullable(true).transform((_, val) => val ? Number(val) : null),\r\n  });\r\n\r\n  const noteSchema = Yup.object().shape({\r\n    message: Yup.string().required(\"Message is required\"),\r\n  });\r\n\r\n  const dropSchema = Yup.object().shape({\r\n    reason: Yup.string().required(\"Reason is required\"),\r\n  });\r\n\r\n  \r\n  const {\r\n    register: dropCandidates,\r\n    formState: { errors: dropErrors },\r\n    handleSubmit: dropSubmit,\r\n    reset: dropReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(dropSchema),\r\n  });\r\n\r\n  const {\r\n    register: noteCandidates,\r\n    formState: { errors: noteErrors },\r\n    handleSubmit: noteSubmit,\r\n    reset: noteReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(noteSchema),\r\n  });\r\n\r\n  const {\r\n    register: invoiceCandidates,\r\n    formState: { errors: invoiceErrors },\r\n    handleSubmit: invoiceSubmit,\r\n    reset: invoicereset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(invoiceSchema),\r\n  });\r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n \r\n\r\n  useEffect(() => {\r\n\r\n   \r\n    setLoader(true);\r\n \r\n   \r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n \r\n      const form = filterRef.current; \r\n\r\n   \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/viewRequirementCandidates`,\r\n        data: {\r\n          page: \"1\",\r\n          search: `${form[\"search\"].value}`,\r\n          requirementId: sessionStorage.getItem(\"recruitmentId\")!==null? sessionStorage.getItem(\"recruitmentId\") : \"\"\r\n\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n           setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n \r\n \r\n\r\n    fetchData();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token, new URLSearchParams(candidate_search).get('search'), sessionStorage.getItem(\"use\")]);\r\n\r\n\r\n \r\n\r\n  function updateData(id){\r\n \r\n    \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n    data: {\r\n      id: id,\r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  })\r\n    .then(function (response) {\r\n\r\n      if (response.data.status === true) {\r\n\r\n        var myCandidateStatuses= response.data.data;\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}admin/viewCandidate`,\r\n          data: {\r\n            id: id,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (result) {\r\n          \r\n             if (result.data.status === true) {  \r\n       \r\n        const updateState = candidatesData.map(item => {\r\n    \r\n          if (item.id === id) { \r\n            return { ...item,  \r\n                candidateDetail: result.data.data.candidateDetail,  \r\n                invoiceValue: result.data.data.invoiceValue,  \r\n                invoicedDate: result.data.data.invoicedDate,  \r\n                joinedDate: result.data.data.joinedDate, \r\n                statusCode: result.data.data.statusList.statusCode,\r\n                statusList: result.data.data.statusList,  \r\n                myCandidateStatuses: myCandidateStatuses,\r\n                droppedReason: result.data.data.droppedReason,\r\n                ditchReason: result.data.data.ditchReason,\r\n                creditNoteReason: result.data.data.creditNoteReason,\r\n            };\r\n            \r\n          }\r\n          return item;\r\n        }); \r\n     \r\n        setCandidatesData(updateState); \r\n      }\r\n      setLoader(false);\r\n      });   \r\n   \r\n}\r\n})\r\n.catch(function (error) {\r\nconsole.log(error);\r\n});\r\n \r\n\r\n  }\r\n \r\n\r\n  function handleAddNotes(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/addCandidateNotes`,\r\n        data: {\r\n          candidateId: candidatesEdit.id,\r\n          message: values.message,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n \r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n  //  setRecruiterId(null); \r\n    setSearch(\"\");\r\n    history.push(\"/app/admin_candidates?search=\");\r\n    sessionStorage.removeItem('recruitmentId');\r\n    forceUpdate();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/requirementList`,\r\n      data: {\r\n        page: \"1\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setRequirement(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      search: `${form[\"search\"].value}`,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      requirementId: sessionStorage.getItem(\"recruitmentId\")!==null? sessionStorage.getItem(\"recruitmentId\") : \"\"\r\n     });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewRequirementCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n         setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n\r\n  function getFilterData() {\r\n     \r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    const form = filterRef.current;\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      search: `${form[\"search\"].value}`,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      requirementId: sessionStorage.getItem(\"recruitmentId\")!==null? sessionStorage.getItem(\"recruitmentId\") : \"\"\r\n     });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewRequirementCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n        \r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n           setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [stausOpen, setStatusOpen] = React.useState(false);\r\n  const [stausNewOpen, setStatusNewOpen] = React.useState(false);\r\n  const [dropOpen, setDropOpen] = React.useState(false);\r\n  const [reverseOpen, setReverseOpen] = React.useState(false);\r\n  const [messageOpen, setMessageOpen] = React.useState(false);\r\n\r\n  const [resumeOpen, setResumeOpen] = React.useState(false); \r\n\r\n  const handleResumeClose = () => {\r\n    setResumeOpen(false);\r\n  };\r\n\r\n  const handleResumeOpen = () => {\r\n    setResumeOpen(true);\r\n  };\r\n\r\n\r\n\r\n  const [candidate, setCandidate] = useState({\r\n      requirementId:\"\",\r\n      source:\"\",\r\n      email:\"\", \r\n      firstName:\"\",\r\n      lastName:\"\",\r\n      skills:\"\",  \r\n      location:\"\", \r\n      experience:null,    \r\n       candidateProcessed:\"\",\r\n      native:\"\",\r\n      preferredLocation:\"\",\r\n      relevantExperience:null,\r\n      educationalQualification:\"\",\r\n      gender:\"\",\r\n      differentlyAbled:\"\",\r\n      currentCtc:null,\r\n      expectedCtc:null,\r\n      noticePeriod:\"\",\r\n      reasonForJobChange:\"\",\r\n      reason:\"\",\r\n      dob:\"\", \r\n      candidateRecruiterDiscussionRecording:\"\", \r\n      candidateSkillExplanationRecording:\"\",\r\n      candidateMindsetAssessmentLink:\"\",\r\n      candidateAndTechPannelDiscussionRecording:\"\",\r\n      freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n\r\n  }); \r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleStatusOpen = () => {\r\n    setStatusOpen(true);\r\n  };\r\n\r\n  const handleStatusClose = () => {\r\n    setStatusOpen(false); \r\n  };\r\n\r\n  const handleStatusNewOpen = () => {\r\n    setStatusNewOpen(true);  \r\n  };\r\n\r\n  const handleStatusNewClose = () => {\r\n    setStatusNewOpen(false);\r\n   \r\n  };\r\n\r\n  const handleMessageOpen = () => {\r\n    setMessageOpen(true);\r\n  };\r\n\r\n  const handleMessageClose = () => {\r\n    setMessageOpen(false);\r\n  };\r\n\r\n  const handleDropOpen = () => {\r\n    setDropOpen(true);\r\n  };\r\n\r\n  const handleDropClose = () => {\r\n    setDropOpen(false);\r\n  };\r\n\r\n  const handleReverseOpen = () => {\r\n    setReverseOpen(true);\r\n  };\r\n\r\n  const handleReverseClose = () => {\r\n    setReverseOpen(false);\r\n  };\r\n  \r\n  const [dropReasonOpen, setDropReasonOpen] = useState(false);\r\n\r\n  const handleDropReasonOpen = () => {\r\n    \r\n    setDropReasonOpen(true);\r\n    setStatusOpen(false); \r\n  };\r\n\r\n  const handleDropReasonClose = () => {\r\n    setDropReasonOpen(false);\r\n  };\r\n\r\n\r\n const reasonRef =useRef()\r\n\r\n  const [reasonOpen, setReasonOpen] = useState(false);\r\n\r\n  const handleReasonOpen = () => {  \r\n    setStatusOpen(false);\r\n    setStatusNewOpen(false);\r\n    setReasonOpen(true); \r\n  };\r\n\r\n  const handleReasonClose = () => {\r\n    setReasonOpen(false);\r\n  };\r\n\r\n  const [ changeMessageOpen, setChangeMessageOpen] = useState(false);\r\n\r\n \r\n  const handleChangeMessageOpen = () => {\r\n    setChangeMessageOpen(true);\r\n    handleStatusClose();\r\n  };\r\n\r\n  const handleChangeMessageClose = () => {\r\n    setChangeMessageOpen(false);\r\n  };\r\n\r\n \r\n  const [view, setView] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n \r\n \r\n\r\n  const [recruitmentId, setRecruitmentId]  = useState(\"\");\r\n\r\n\r\n  function handleAdd(values) { \r\n \r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n\r\n\r\n      } else {\r\n        setAddList(values);\r\n\r\n \r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n          \r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem('firstName'),\r\n              rec_mobile_no: localStorage.getItem('mobile'),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n \r\n            CheckAlreadyExit(values); \r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\nfunction CheckAlreadyExit(addList){\r\n \r\n  var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n    data: {\r\n      email: addList.email,\r\n      firstName: addList.firstName,\r\n      lastName: addList.lastName,\r\n      mobile: addList.mobile,\r\n      requirementId: recruitmentId,\r\n      skills: addList.skills,\r\n      sourceId: addList.source,\r\n      isAnswered: candidate.freeValue,\r\n      message: \"\",\r\n      experience:addList.experience,\r\n      currentLocation: addList.location,\r\n      alternateMobile:addList.alternateMobile,\r\n      preferredLocation:addList.preferredLocation,\r\n      nativeLocation:addList.native,\r\n       relevantExperience:addList.relevantExperience,\r\n      currentCtc:addList.currentCtc,\r\n      expectedCtc:addList.expectedCtc,\r\n      dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n      noticePeriod:addList.noticePeriod,\r\n      reasonForJobChange:addList.reasonForJobChange,\r\n      candidateProcessed:addList.candidateProcessed,\r\n      differentlyAbled:addList.differentlyAbled,\r\n      educationalQualification:addList.educationalQualification,\r\n      gender:addList.gender,\r\n      reason: addList.reason, \r\n      candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n      candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n      candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n      candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n      sendMessage: \"\"  \r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n    \r\n    if (response.data.status === true) { \r\n  \r\n      handleClickOpen();\r\n\r\n} else{\r\n  handleNotificationCall(\"error\", response.data.message);\r\n\r\n}\r\n});\r\n}\r\n\r\n  function handleEdit(values) {\r\n  \r\n     return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var dob = values.day+\"-\"+values.month+\"-\"+values.year;\r\n      \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/adminEditCandidate`,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience:values.experience, \r\n          currentLocation: values.location, \r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile:values.alternateMobile,\r\n          preferredLocation:values.preferredLocation,\r\n          nativeLocation:values.native,\r\n           relevantExperience:values.relevantExperience,\r\n          currentCtc:values.currentCtc,\r\n          expectedCtc:values.expectedCtc,\r\n          dob: values.day===undefined? candidatesEdit.dob : dob!== \"--\"?  dob: candidatesEdit.dob,\r\n          noticePeriod:values.noticePeriod,\r\n          reasonForJobChange:values.reasonForJobChange,\r\n          candidateProcessed:values.candidateProcessed,\r\n          differentlyAbled:values.differentlyAbled,\r\n          educationalQualification:values.educationalQualification,\r\n          gender:values.gender,\r\n          reason: values.reason, \r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n           if (response.data.status === true) {\r\n \r\n           if(file !== undefined ){\r\n            if(file?.length !== 0){\r\n              uploadResume(file, response.data.candidateDetailsId); \r\n            }\r\n           } \r\n\r\n           if(assessment !== undefined ){\r\n            if(assessment?.length !== 0){\r\n              uploadAssessment(assessment, response.data.candidateId);\r\n            }\r\n           } \r\n\r\n            setLoader(false);\r\n            setState({ ...state, right: false });\r\n            handleNotificationCall(\"success\", response.data.message);\r\n             \r\n             updateData(candidatesEdit.id);\r\n\r\n          } else {\r\n            setLoader(false);\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          } \r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n \r\n  function handleAddList(send) {\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience:addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile:addList.alternateMobile,\r\n        preferredLocation:addList.preferredLocation,\r\n        nativeLocation:addList.native,\r\n         relevantExperience:addList.relevantExperience,\r\n        currentCtc:addList.currentCtc,\r\n        expectedCtc:addList.expectedCtc,\r\n        dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n        noticePeriod:addList.noticePeriod,\r\n        reasonForJobChange:addList.reasonForJobChange,\r\n        candidateProcessed:addList.candidateProcessed,\r\n        differentlyAbled:addList.differentlyAbled,\r\n        educationalQualification:addList.educationalQualification,\r\n        gender:addList.gender,\r\n        reason: addList.reason, \r\n        candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName:addList.currentCompanyName,\r\n        sendMessage: send  \r\n        \r\n      }\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience:addList.experience,\r\n         currentLocation: addList.location,\r\n         alternateMobile:addList.alternateMobile,\r\n         preferredLocation:addList.preferredLocation,\r\n         nativeLocation:addList.native,\r\n          relevantExperience:addList.relevantExperience,\r\n         currentCtc:addList.currentCtc,\r\n         expectedCtc:addList.expectedCtc,\r\n          dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n         noticePeriod:addList.noticePeriod,\r\n         reasonForJobChange:addList.reasonForJobChange,\r\n         candidateProcessed:addList.candidateProcessed,\r\n         differentlyAbled:addList.differentlyAbled,\r\n         educationalQualification:addList.educationalQualification,\r\n         gender:addList.gender,\r\n         reason: addList.reason, \r\n         candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n         candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n         candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n         candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n         currentCompanyName:addList.currentCompanyName,\r\n        sendMessage: send\r\n       }\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n    \r\n      if (response.data.status === true) {\r\n        handleClose();\r\n         var message =\"\";\r\n\r\n        if(file !== undefined ){\r\n          if(file?.length !== 0){\r\n          uploadResume(file, response.data.candidateDetailsId); \r\n        }}\r\n\r\n        if(assessment !== undefined ){\r\n          if(assessment?.length !== 0){\r\n            uploadAssessment(assessment, response.data.candidateId);\r\n        }}\r\n       \r\n        if (send === true) {  \r\n        if (candidate.freeValue === \"YES\") {\r\n          message = messageRef.current.value;\r\n\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=+91\" +\r\n              addList.mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        } else {\r\n          message =  \"Hi \" +   requirementList.cand1_name + \", Can we chat today about a job opening \" +  localStorage.getItem('firstName') +\r\n          \", \" +   localStorage.getItem('mobile') +  \", \" +  localStorage.getItem('companyName') +   \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n          handleMessage(\r\n            response.data.candidate_mobile,\r\n            message,\r\n            response.data.candidateId,\r\n          );\r\n        }\r\n      }\r\n\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        forceUpdate();\r\n        setState({ ...state, right: false });\r\n        reset();\r\n\r\n      \r\n      } else {\r\n       \r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\nfunction uploadResume(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"resume\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n      // aiResumeUpload(data)\r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction uploadAssessment(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"file\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n       \r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\n  function handleMessage(mobile, message, candidateId) {\r\n    var url = \"\";\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"first_message\",\r\n        vars: [\r\n          requirementList.cand1_name,\r\n          requirementList.rec_name,\r\n          requirementList.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: requirementList.cand1_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        setLoader(false);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose(); \r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  \r\n  function changeStatus(send, message, status, candidateId) {\r\n       setLoader(true);\r\n    const template_name =\r\n     shortList.statusCode === 303\r\n        ? \"1st_interview_round\"\r\n        : shortList.statusCode === 3031\r\n        ? \"initial_interview_rounds\"\r\n        : shortList.statusCode === 304\r\n        ? status === \"Schedule Another Interview\"\r\n          ? \"initial_interview_rounds\"\r\n          : status === \"Schedule Final Interview\"\r\n          ? \"final_interview_round\"\r\n          : status === \"Send Document\"\r\n          ? \"document_collect\"\r\n          : \"\"\r\n        : shortList.statusCode === 3041\r\n        ? \"document_collect\"\r\n        : shortList.statusCode === 305\r\n        ? \"salary_breakup_shared_confirmation\"\r\n        : shortList.statusCode === 307\r\n        ? \"offer_released_confirmation\"\r\n        : shortList.statusCode === 308\r\n        ? status === \"Joining Confirmation\"\r\n          ? \"joining_confirmation\"\r\n          : \"\"\r\n        : \"\";\r\n\r\n    const vars =\r\n      shortList.statusCode === 308\r\n        ? [\r\n            shortList.cand_name,\r\n            shortList.job_id, \r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ]\r\n        : [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ];\r\n\r\n    var url = \"\";\r\n    if (shortList.free === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        sendMessage: send,\r\n        candidateId: candidateId,\r\n        phone_number: shortList.cand_mobile,\r\n        template_name: template_name,\r\n        vars: vars,\r\n        message: message,\r\n        candidate_name: shortList.cand_name, \r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        if (shortList.free === \"YES\" && send === true) { \r\n\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=\" +\r\n              shortList.cand_mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        }\r\n\r\n        setLoader(false);\r\n        updateData(candidateId); \r\n        handleNotificationCall(\"success\", response.data.message); \r\n        setState({ ...state, right: false });\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n     \r\n      \r\n    });\r\n\r\n \r\n  }\r\n\r\n  function joinedStatus() {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateJoinedStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        joinedDate: joiningRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message); \r\n      } else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n\r\n    \r\n  }\r\n\r\n  function creditNoteStatus() {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}admin/updateCrediNoteStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        creditNoteReason: reasonRef.current.value\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleReasonClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n      } else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function updateJoiningDitchedStatus() {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateJoiningDitchedStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        ditchReason: reasonRef.current.value\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleReasonClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function InvoicedStatus(values) {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateInvoicedStatus`;\r\n\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: shortList.id,\r\n          invoice: values.invoice,\r\n          invoicedDate: invoiceRef.current.value,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id); \r\n          handleStatusClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  function DropStatus(values) {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`;\r\n\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id,\r\n          droppedReason: values.reason\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id); \r\n          handleDropReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  function changeStcStatus() {\r\n    setLoader(true);\r\n\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateStcStatus`;\r\n \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id, \r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id); \r\n          handleChangeMessageClose(); \r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    \r\n  }\r\n\r\n  function OfferDeclineStatus(values) {\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateOfferDeclineStatus`;\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: shortList.id,\r\n          offerDeclinedReason: reasonRef.current.value\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id); \r\n          handleReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  const ExistCheck=(e)=>{\r\n\r\n    if(recruitmentId!==\"\"){\r\n\r\n      CheckExitAlready(recruitmentId, e);\r\n\r\n    } else{\r\n      handleNotificationCall(\"error\", \"Select Requirement\");\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n  function CheckExitAlready(recruitmentId, e) {\r\n  var data = {}; \r\n  var url=\"\";\r\n\r\n  if(e.target.name === \"email\"){\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      email: e.target.value\r\n    } \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`\r\n  } else {\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      mobile: e.target.value\r\n    }  \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`\r\n  }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n       if (response.data.status === true) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n  \r\n    })\r\n  }\r\n\r\n \r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"VIEW\") {\r\n      setDataList(\"VIEW\");\r\n    } else {\r\n      setDataList(\"NOTES\");\r\n    }\r\n\r\n    if (name !== \"NOTES\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/viewCandidate`,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n           \r\n           if (response.data.status === true) {\r\n  \r\n            setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc:   response.data.data.requirement?.recruiter?.firstName +  \" \" + response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile,\r\n              resume:response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              isCandidateCpv: response.data.data.isCandidateCpv,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            \r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile?.substring(2),\r\n              resume:response.data.data.candidateDetail?.resume,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n             });\r\n\r\n            setState({ ...state, right: true });\r\n\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n          data: {\r\n            id: values,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n \r\n            if (response.data.status === true) {\r\n\r\n        setListCanditate(response.data.data);\r\n\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n\r\n    } else {\r\n      setCandidatesEdit({\r\n        ...candidatesEdit,\r\n        id: values,\r\n      });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/viewCandidateNotes`,\r\n        data: {\r\n          candidateId: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setCandidatesNote(response.data.data);\r\n          setState({ ...state, right: true });\r\n          setLoader(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function dropConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setDropOpen(false);\r\n        updateData(id);  \r\n      }  else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function reverseConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/resetStatus`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setReverseOpen(false);\r\n        setLoader(false);\r\n        updateData(id); \r\n        handleNotificationCall(\"success\", response.data.message); \r\n      }  else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function sendMessage(candidateId, mobile, message, candidate_name, list) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"general_message\",\r\n        vars: [\r\n          candidate_name,\r\n          list.rec_name,\r\n          list.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: candidate_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n\r\n          setLoader(false);\r\n          handleMessageClose();\r\n          handleNotificationCall(\"success\", response.data.message); \r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n          file={file}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n           days={days}\r\n           months={months}\r\n           years={years}\r\n           setDay={setDay}\r\n           setMonth={setMonth}\r\n           setYear={setYear}\r\n           date={date}\r\n           month={month}\r\n           year={year}\r\n           setPhoneValidation={setPhoneValidation }\r\n           show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) : dataList === \"ADD\" ? (\r\n      <> \r\n        <Add\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          handleAddList={handleAddList}\r\n          register={register}\r\n           source={source} \r\n          recruitmentList={recruitmentList}\r\n          handleClose={handleClose}\r\n          errors={errors} \r\n          setLoader={setLoader}\r\n          toggleDrawer={toggleDrawer}\r\n          setRecruitmentList={setRecruitmentList}\r\n          requirementList={requirementList}\r\n          handleSubmit={handleSubmit}\r\n          handleAdd={handleAdd}\r\n          requirement={requirement}\r\n          isSubmitting={isSubmitting}\r\n          open={open}\r\n          messageRef={messageRef}\r\n          reset={reset}\r\n          setCandidate={setCandidate}\r\n          candidate={candidate}\r\n          setFile={setFile}\r\n          file={file}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n          setRecruitmentId={setRecruitmentId}\r\n          recruitmentId={recruitmentId}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          setPhoneValidation={setPhoneValidation}\r\n          setHideContactDetails={setHideContactDetails}\r\n          hideContactDetails={hideContactDetails}\r\n          ExistCheck={ExistCheck} \r\n          requirementId={\"true\"}\r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n          \r\n        />\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Note\r\n          toggleDrawer={toggleDrawer}\r\n          candidatesNote={candidatesNote}\r\n          noteCandidates={noteCandidates}\r\n          noteErrors={noteErrors}\r\n          handleAddNotes={handleAddNotes}\r\n          noteSubmit={noteSubmit}\r\n        />\r\n      </>\r\n    );\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n        {/* <Tooltip title=\"Dowmload\" placement=\"bottom\" aria-label=\"download\">\r\n          {count !== 0 ? (\r\n            <CloudDownloadIcon\r\n              className={classNames(classes.toolIcon)}\r\n              onClick={(e) => {\r\n                downloadExel();\r\n              }}\r\n            />\r\n          ) : (\r\n            <CloudDownloadIcon className={classes.downloadIcon} />\r\n          )}\r\n        </Tooltip> */}\r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Oops! Matching record could not be found',\r\n      }\r\n    },\r\n    search: false,\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery===true? 'vertical' : 'standard',\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n       const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n              <Bar\r\n                title=\"Candidates\"\r\n                list={list}\r\n               \r\n              />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n\r\n  const components = {\r\n    ExpandButton: function(props) { \r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n\r\n  // function getSheetData(data, header) {\r\n  //   var fields = Object.keys(data[0]);\r\n  //   var sheetData = data.map(function (row) {\r\n  //     return fields.map(function (fieldName) {\r\n  //       return row[fieldName] ? row[fieldName] : \"\";\r\n  //     });\r\n  //   });\r\n  //   sheetData.unshift(header);\r\n  //   return sheetData;\r\n  // }\r\n\r\n  // async function saveAsExcel(data) {\r\n  //   let header = [\r\n  //   \"S.No\", \r\n  //   \"Requirement Name\",\r\n  //   \"Client Coordinator\",\r\n  //   \"Recruiter\",\r\n  //   \"Candidate Name\",\r\n  //   \"Email\",\r\n  //   \"Mobile\",\r\n  //   \"Gender\",\r\n  //   \"Current Location\",\r\n  //   \"Preferred Location\",\r\n  //   \"Native Location\",\r\n  //   \"Total Years of Experience\",\r\n  //   \"Relevant Experience\",\r\n  //   \"Current CTC\",\r\n  //   \"Expected CTC\",\r\n  //   \"DOB\",  \r\n  //   \"Notice Period\",\r\n  //   \"Reason for Job Change\",\r\n  //   \"Candidate Attended\",\r\n  //   \"Differently Abled\",\r\n  //   \"Educational Qualification\", \r\n  //   \"Posted Date\",  \r\n  //   ];\r\n\r\n  //   XlsxPopulate.fromBlankAsync().then(async (workbook) => {\r\n  //     const sheet1 = workbook.sheet(0);\r\n  //     const sheetData = getSheetData(data, header);\r\n  //     const totalColumns = sheetData[0].length;\r\n\r\n  //     sheet1.cell(\"A1\").value(sheetData);\r\n  //     const range = sheet1.usedRange();\r\n  //     const endColumn = String.fromCharCode(64 + totalColumns);\r\n  //     sheet1.row(1).style(\"bold\", true);\r\n  //     sheet1.range(\"A1:\" + endColumn + \"1\").style(\"fill\", \"BFBFBF\");\r\n  //     range.style(\"border\", true);\r\n  //     return workbook.outputAsync().then((res) => {\r\n  //       saveAs(\r\n  //         res,\r\n  //         `Candidates_${moment(new Date()).format(\"DD_MM_YYYY_HH_mm\")}.xlsx`,\r\n  //       );\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          \r\n          <PageTitle title=\"Candidates\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n       \r\n\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{ paper: dataList===\"VIEW\" || dataList===\"NOTES\"? classes.drawer: classes.clientDrawer }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n\r\n        <TextField \r\n          label=\"Search\"\r\n            type=\"text\"\r\n            name=\"search\" \r\n            placeholder=\"Enter Candidate Unique ID/Name/Email/Mobile (eg: 91XXXXXXXXXX)\"\r\n            InputLabelProps={{ shrink: true }}\r\n            value={search!==null?search:\"\"}\r\n            \r\n            onChange={(e) => {\r\n              setSearch(e.target.value);\r\n            }}\r\n            \r\n           \r\n            className={classes.searchWidth} \r\n          />\r\n        \r\n        \r\n          <TextField\r\n            name=\"fromDate\"\r\n           label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n             \r\n            onChange={handleFromDateChange}\r\n          />\r\n\r\n          <TextField\r\n            name=\"toDate\"\r\n           label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n            \r\n            className={classes.filterWidth}\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n     \r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}> \r\n      \r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            options={table_options}\r\n            components={components}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n\r\n              {\r\n                name: \"Resume\",\r\n              },\r\n              {\r\n                name: \"View Candidate\",\r\n              },\r\n\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <Actions\r\n                  index={index}\r\n                  item={item}\r\n                  reset={reset}\r\n                  editreset={editreset}\r\n                  noteReset={noteReset}\r\n                  setCandidateList={setCandidateList}\r\n                  handleMessageOpen={handleMessageOpen}\r\n                  candidateList={candidateList}\r\n                  handleDropOpen={handleDropOpen}\r\n                  handleReverseOpen={handleReverseOpen}\r\n                  handleShow={handleShow}  \r\n                   setFile={setFile}\r\n                   setAssessment={setAssessment}\r\n                   setPhoneValidation={setPhoneValidation}\r\n                   handleUse={handleUse}\r\n                />,\r\n                item.statusCode ? (\r\n                  <Grid >\r\n                    <Status\r\n                      list={item}\r\n                      handleStatusOpen={handleStatusOpen}\r\n                      handleStatusNewOpen={handleStatusNewOpen}\r\n                      setValidation={setValidation}\r\n                      setShortList={setShortList}\r\n                      shortList={shortList}\r\n                      setView={setView}\r\n                      view={view}\r\n                      invoicereset={invoicereset}\r\n                    />\r\n\r\n\r\n\r\n                  </Grid>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n\r\n              <Grid container row spacing={2} >  \r\n              {item.candidateDetail?.isExternal === \"YES\"?\r\n     <Tooltip title=\"SUBVENDOR/FREELANCER\"  placement=\"bottom\" aria-label=\"title\">   \r\n             <Avatar  alt=\"Profile\"   src={external}   className={classes.externalIcon}  />  \r\n     </Tooltip>   : \"\" }  \r\n            {item.candidateDetail?.firstName + \" \" +  item.candidateDetail?.lastName } <br /> {\" (\" +  item.uniqueId +   \")\"} \r\n             \r\n             </Grid>,\r\n                    <>  \r\n                {item.mainId === decode.mainId ? \r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n                : item.hideContactDetails !== true?\r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n                : \"\"} </>,\r\n              <>{item.requirement?.requirementName} <br/> {\" (\" +  item.requirement?.uniqueId +  \")\"} </> ,\r\n                item.requirement?.recruiter?.firstName + \" \" +  item.requirement?.recruiter?.lastName,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName, \r\n <>{item.candidateDetail?.resume !== \"https://liverefo.s3.amazonaws.com/\" ? ( <>   <Grid container className={classes.space}>     <Grid item xs className={classes.toolAlign}>      \r\n<Tooltip         title=\"View Resume\"         placement=\"bottom\"         aria-label=\"view\"       >         \r\n  <DescriptionIcon className={classes.toolIcon} onClick={()=>{ handleResumeOpen(); setFile([\r\n    {\r\n      url: item.candidateDetail?.resume\r\n    }\r\n  ])}}         />      \r\n</Tooltip>\r\n{/* <Tooltip         title=\"Downlaod Resume\"         placement=\"bottom\"         aria-label=\"downlaod\"       > \r\n  <a href={item.candidateDetail?.resume} download>  <GetAppIcon className={classes.toolIcon} />    </a>      \r\n</Tooltip>      */}\r\n</Grid>   </Grid> </> ) : ( \"No Resume Found\" )}</>,\r\n<Tooltip         title=\"View Candidate\"         placement=\"bottom\"         aria-label=\"view\"       > \r\n            <ViewIcon onClick={(e) => {\r\n                handleShow(item.id, \"VIEW\");\r\n              }}\r\n                className={classes.toolIcon}\r\n              \r\n              />\r\n</Tooltip>             ,\r\n\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Message\r\n        setState={setState}\r\n        state={state}\r\n        candidateList={candidateList}\r\n        decode={decode}\r\n        sendMessage={sendMessage}\r\n        handleMessageOpen={handleMessageOpen}\r\n        messageOpen={messageOpen}\r\n        handleMessageClose={handleMessageClose}\r\n      />\r\n\r\n      <Dialogs\r\n        handleStatusClose={handleStatusClose}\r\n        handleStatusNewClose={handleStatusNewClose}\r\n        validation={validation}\r\n        stausOpen={stausOpen}\r\n        stausNewOpen={stausNewOpen}\r\n        changeStatus={changeStatus}\r\n        shortList={shortList}\r\n        view={view}\r\n        setView={setView}\r\n        invoiceCandidates={invoiceCandidates}\r\n        invoiceErrors={invoiceErrors}\r\n        invoiceSubmit={invoiceSubmit}\r\n        InvoicedStatus={InvoicedStatus} \r\n        joinedStatus={joinedStatus}\r\n        creditNoteStatus={creditNoteStatus}\r\n        updateJoiningDitchedStatus={updateJoiningDitchedStatus}\r\n        OfferDeclineStatus={OfferDeclineStatus}\r\n        joiningRef={joiningRef}\r\n        invoiceRef={invoiceRef} \r\n        saveOnly={saveOnly}\r\n        setSaveOnly={setSaveOnly}\r\n        \r\n        dropCandidates ={ dropCandidates}\r\n        dropErrors={dropErrors}\r\n        dropSubmit={dropSubmit}\r\n        dropReset={dropReset}\r\n        DropStatus={DropStatus}\r\n        handleDropReasonClose={handleDropReasonClose}\r\n        dropReasonOpen={dropReasonOpen}\r\n        handleDropReasonOpen={handleDropReasonOpen}\r\n        changeMessageOpen={changeMessageOpen}\r\n        handleChangeMessageClose={handleChangeMessageClose}\r\n        changeStcStatus={changeStcStatus}\r\n        handleChangeMessageOpen={handleChangeMessageOpen} \r\n        reasonRef={reasonRef} \r\n        handleReasonOpen={handleReasonOpen}\r\n        reasonOpen={reasonOpen}\r\n        handleReasonClose={handleReasonClose}\r\n      />\r\n \r\n \r\n      <ResumeDialog\r\n       resume={file}\r\n       resumeOpen={resumeOpen}\r\n       handleResumeClose={handleResumeClose}\r\n      />\r\n     \r\n      <Drop\r\n        handleDropClose={handleDropClose}\r\n        dropOpen={dropOpen}\r\n        dropConfirmation={dropConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n\r\n      <Reverse\r\n        handleReverseClose={handleReverseClose}\r\n        reverseOpen={reverseOpen}\r\n        reverseConfirmation={reverseConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n \r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n  ","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\admin\\Candidates.js",["737","738","739","740","741","742","743","744","745","746","747","748","749","750"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport { toast } from \"react-toastify\";\r\n//import CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport moment from \"moment\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n//import classNames from \"classnames\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport external from \"../../images/external.png\";\r\n// import { saveAs } from \"file-saver\";\r\n// import XlsxPopulate from \"xlsx-populate\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\n//import GetAppIcon from \"@material-ui/icons/GetApp\";\r\n\r\nimport { Document, Page } from \"react-pdf\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport Notification from \"../../components/Notification\";\r\n\r\nimport Status from \"../../components/Admin/Status\";\r\nimport Dialogs from \"../../components/Admin/Dialogs\";\r\nimport ResumeDialog from \"../../components/Candidates/Dialogs\";\r\nimport Drop from \"../../components/Candidates/Drop\";\r\nimport Reverse from \"../../components/Admin/Reverse\";\r\nimport Actions from \"../../components/Candidates/Actions\";\r\n\r\nimport Add from \"../../components/Candidates/Add\";\r\nimport Edit from \"../../components/Candidates/Edit\";\r\nimport View from \"../../components/Candidates/View\";\r\nimport Note from \"../../components/Candidates/Note\";\r\nimport Bar from \"../../components/Candidates/Bar\";\r\nimport Message from \"../../components/Candidates/Message\";\r\nimport ExpandButton from \"../../components/Candidates/ExpandButton\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport MatchJDDialog from \"../../components/Candidates/MatchJDDialog.js\";\r\nimport {useResumeDataContext } from '../../context/CandidateDataContext.js'\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Candidates(props) {\r\n  var classes = useStyles();\r\n  const messageRef = useRef();\r\n  const candidate_search = props.location.search;\r\n  const history = useHistory();\r\n  const mobileQuery = useMediaQuery(\"(max-width:600px)\");\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const filterRef = useRef(null);\r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n  const [userName, setUserName] = useState([]);\r\n  const [clientName, setClientName] = useState([]);\r\n  const [candidateList, setCandidateList] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    mobile: \"\",\r\n    message: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n  });\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n  const [search, setSearch] = useState(\r\n    new URLSearchParams(candidate_search).get(\"search\"),\r\n  );\r\n  const { setResumeParsedData } = useResumeDataContext();\r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from(\r\n    { length: 60 },\r\n    (_, i) => moment(new Date()).format(\"YYYY\") - i,\r\n  );\r\n\r\n  const [ resumePercentage , setResumePercentage]= useState([])\r\n  const [ matchLoading, setMatchLoading] = useState(false)\r\n  const [candidMatchId, setCandidMatchId] = useState(\"\");\r\n  const [numPages, setNumPages] = useState();\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n  }\r\n\r\n  function handleUse(mobile) {\r\n    history.push(\"admin_candidates\");\r\n    sessionStorage.setItem(\"use\", mobile);\r\n\r\n    setState({ ...state, right: true });\r\n    setDataList(\"ADD\");\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n      data: {\r\n        mobile: mobile.substring(2),\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        // reset({\r\n        //   requirementId:recruitmentId,\r\n        //   mobile: mobile.substring(2),\r\n        //   email: response.data.data?.email,\r\n        //   firstName: response.data.data?.firstName,\r\n        //   lastName: response.data.data?.lastName,\r\n        //   skills: response.data.data?.skills,\r\n        //   experience: response.data.data?.experience,\r\n        //   location: response.data.data?.currentLocation,\r\n        //    candidateProcessed:  response.data.data?.candidateProcessed,\r\n        //   native:  response.data.data?.nativeLocation,\r\n        //   preferredLocation:  response.data.data?.preferredLocation,\r\n        //   relevantExperience: response.data.data?.relevantExperience,\r\n        //   educationalQualification:  response.data.data?.educationalQualification,\r\n        //   gender: response.data.data?.gender,\r\n        //   differentlyAbled: response.data.data?.differentlyAbled,\r\n        //   currentCtc: response.data.data?.currentCtc,\r\n        //   expectedCtc:  response.data.data?.expectedCtc,\r\n        //   noticePeriod: response.data.data?.noticePeriod,\r\n        //   reasonForJobChange: response.data.data?.reasonForJobChange,\r\n        //   currentCompanyName: response.data.data?.currentCompanyName,\r\n        //   reason: response.data.data?.reason,\r\n        //   })\r\n\r\n        setCandidate({\r\n          ...candidate,\r\n          mobile: mobile.substring(2),\r\n          email: response.data.data?.email,\r\n          firstName: response.data.data?.firstName,\r\n          lastName: response.data.data?.lastName,\r\n          skills: response.data.data?.skills,\r\n          experience: response.data.data?.experience,\r\n          location: response.data.data?.currentLocation,\r\n          dob: response.data.data?.dob,\r\n          candidateProcessed: response.data.data?.candidateProcessed,\r\n          native: response.data.data?.nativeLocation,\r\n          preferredLocation: response.data.data?.preferredLocation,\r\n          relevantExperience: response.data.data?.relevantExperience,\r\n          educationalQualification:\r\n            response.data.data?.educationalQualification,\r\n          gender: response.data.data?.gender,\r\n          differentlyAbled: response.data.data?.differentlyAbled,\r\n          currentCtc: response.data.data?.currentCtc,\r\n          expectedCtc: response.data.data?.expectedCtc,\r\n          noticePeriod: response.data.data?.noticePeriod,\r\n          reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          reason: response.data.data?.reason,\r\n          candidateRecruiterDiscussionRecording:\r\n            response.data.data?.candidateRecruiterDiscussionRecording,\r\n          candidateSkillExplanationRecording:\r\n            response.data.data?.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:\r\n            response.data.data?.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:\r\n            response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n          currentCompanyName: response.data.data?.currentCompanyName,\r\n          freeValue:\r\n            decode.isEnableFree === true\r\n              ? \"YES\"\r\n              : decode.isEnablePaid === true\r\n              ? \"NO\"\r\n              : \"YES\",\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  const [candidatesNote, setCandidatesNote] = useState([]);\r\n  const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    requirementName: \"\",\r\n    source: \"\",\r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    candidateProcessed: \"\",\r\n    currentLocation: \"\",\r\n    preferredLocation: \"\",\r\n    nativeLocation: \"\",\r\n    relevantExperience: null,\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    dob: \"\",\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    educationalQualification: \"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording: \"\",\r\n    candidateSkillExplanationRecording: \"\",\r\n    candidateMindsetAssessmentLink: \"\",\r\n    candidateAndTechPannelDiscussionRecording: \"\",\r\n    mainId: \"\",\r\n    recruiterId: \"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false,\r\n  });\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id: \"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    cc: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    invoiceValue: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    candidateProcessed: \"\",\r\n    currentLocation: \"\",\r\n    preferredLocation: \"\",\r\n    nativeLocation: \"\",\r\n    relevantExperience: null,\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    dob: \"\",\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    educationalQualification: \"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording: \"\",\r\n    candidateSkillExplanationRecording: \"\",\r\n    candidateMindsetAssessmentLink: \"\",\r\n    candidateAndTechPannelDiscussionRecording: \"\",\r\n    mainId: \"\",\r\n    isCandidateCpv: \"\",\r\n    currentCompanyName: \"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n  const [rowsPerPage] = useState(50);\r\n\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const joiningRef = useRef();\r\n  const invoiceRef = useRef();\r\n  const [file, setFile] = useState([]);\r\n  const [docFile, setDocFile] = useState([]);\r\n  const [profile, setProfile] = useState([]);\r\n  const [assessment, setAssessment] = useState([]);\r\n  const [hideContactDetails, setHideContactDetails] = useState(false);\r\n\r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  const [requirement, setRequirement] = useState([]);\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n  const [shortList, setShortList] = useState({\r\n    id: \"\",\r\n    cand_name: \"\",\r\n    job_id: \"\",\r\n    job_name: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    cand_mobile: \"\",\r\n    statusCode: \"\",\r\n    free: \"\",\r\n  });\r\n\r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n\r\n  const [validation, setValidation] = useState(false);\r\n\r\n  const [addList, setAddList] = useState([]);\r\n  const [source, setSource] = useState([]);\r\n  const [saveOnly, setSaveOnly] = useState(\"YES\");\r\n  const [requirementName, setRequirementName] = useState([]);\r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Email must be a Valid Email Address\")\r\n      .required(\"Email is required\"),\r\n    firstName: Yup.string()\r\n      .required(\"First Name is required\")\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    mobile: Yup.string()\r\n      .required(\"Contact Number is required\")\r\n      .min(10, \"Must be exactly 10 digits\")\r\n      .max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    location: Yup.string().nullable().notRequired(),\r\n    alternateMobile:\r\n      phoneValidation === true\r\n        ? Yup.string()\r\n            .required(\"Alternate Contact Number is required\")\r\n            .min(10, \"Must be exactly 10 digits\")\r\n            .max(10, \"Must be exactly 10 digits\")\r\n        : Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().nullable().required(\"Gender is required\"),\r\n    educationalQualification: Yup.string().nullable().notRequired(),\r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    expectedCtc: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(),\r\n    native: Yup.string().nullable().notRequired(),\r\n    candidateRecruiterDiscussionRecording: Yup.string()\r\n      .nullable()\r\n      .notRequired(),\r\n    candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n    candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n    candidateAndTechPannelDiscussionRecording: Yup.string()\r\n      .nullable()\r\n      .notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email:\r\n      candidatesEdit.recruiterId === decode.recruiterId\r\n        ? Yup.string()\r\n            .email(\"Email must be a Valid Email Address\")\r\n            .required(\"Email is required\")\r\n        : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    experience: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    location: Yup.string().nullable().notRequired(),\r\n    alternateMobile:\r\n      phoneValidation === true\r\n        ? Yup.string()\r\n            .required(\"Alternate Contact Number is required\")\r\n            .min(10, \"Must be exactly 10 digits\")\r\n            .max(10, \"Must be exactly 10 digits\")\r\n        : Yup.string(),\r\n    native: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable(),\r\n    relevantExperience: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    educationalQualification: Yup.string().nullable().notRequired(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().nullable().required(\"Gender is required\"),\r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    expectedCtc: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(),\r\n    candidateRecruiterDiscussionRecording: Yup.string()\r\n      .nullable()\r\n      .notRequired(),\r\n    candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n    candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n    candidateAndTechPannelDiscussionRecording: Yup.string()\r\n      .nullable()\r\n      .notRequired(),\r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const invoiceSchema = Yup.object().shape({\r\n    invoice: Yup.number()\r\n      .test(\r\n        \"len\",\r\n        \"Must be exactly 15 digits\",\r\n        (val) => Math.ceil(Math.log10(val + 1)) <= 15,\r\n      )\r\n      .required(\"Invoice Value is required\")\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n  });\r\n\r\n  const noteSchema = Yup.object().shape({\r\n    message: Yup.string().required(\"Message is required\"),\r\n  });\r\n\r\n  const dropSchema = Yup.object().shape({\r\n    reason: Yup.string().required(\"Reason is required\"),\r\n  });\r\n\r\n  const {\r\n    register: dropCandidates,\r\n    formState: { errors: dropErrors },\r\n    handleSubmit: dropSubmit,\r\n    reset: dropReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(dropSchema),\r\n  });\r\n\r\n  const {\r\n    register: noteCandidates,\r\n    formState: { errors: noteErrors },\r\n    handleSubmit: noteSubmit,\r\n    reset: noteReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(noteSchema),\r\n  });\r\n\r\n  const {\r\n    register: invoiceCandidates,\r\n    formState: { errors: invoiceErrors },\r\n    handleSubmit: invoiceSubmit,\r\n    reset: invoicereset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(invoiceSchema),\r\n  });\r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/userList`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setUserName(response.data.data);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    var mobile = sessionStorage.getItem(\"use\");\r\n\r\n    setLoader(true);\r\n    setSearch(new URLSearchParams(candidate_search).get(\"search\"));\r\n\r\n    if (mobile !== \"\" && mobile !== null) {\r\n      setState({ ...state, right: true });\r\n      setDataList(\"ADD\");\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n        data: {\r\n          mobile: mobile.substring(2),\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          sessionStorage.removeItem(\"use\");\r\n\r\n          reset({\r\n            requirementId: recruitmentId,\r\n            mobile: mobile.substring(2),\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,\r\n            experience: response.data.data?.experience,\r\n            location: response.data.data?.currentLocation,\r\n            candidateProcessed: response.data.data?.candidateProcessed,\r\n            native: response.data.data?.nativeLocation,\r\n            preferredLocation: response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:\r\n              response.data.data?.educationalQualification,\r\n            gender: response.data.data?.gender,\r\n            differentlyAbled: response.data.data?.differentlyAbled,\r\n            currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc: response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            reason: response.data.data?.reason,\r\n            currentCompanyName: response.data.data?.currentCompanyName,\r\n          });\r\n\r\n          setCandidate({\r\n            ...candidate,\r\n            mobile: mobile.substring(2),\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,\r\n            experience: response.data.data?.experience,\r\n            location: response.data.data?.currentLocation,\r\n            dob: response.data.data?.dob,\r\n            candidateProcessed: response.data.data?.candidateProcessed,\r\n            native: response.data.data?.nativeLocation,\r\n            preferredLocation: response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:\r\n              response.data.data?.educationalQualification,\r\n            gender: response.data.data?.gender,\r\n            differentlyAbled: response.data.data?.differentlyAbled,\r\n            currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc: response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            reason: response.data.data?.reason,\r\n            candidateRecruiterDiscussionRecording:\r\n              response.data.data?.candidateRecruiterDiscussionRecording,\r\n            candidateSkillExplanationRecording:\r\n              response.data.data?.candidateSkillExplanationRecording,\r\n            candidateMindsetAssessmentLink:\r\n              response.data.data?.candidateMindsetAssessmentLink,\r\n            candidateAndTechPannelDiscussionRecording:\r\n              response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n            currentCompanyName: response.data.data?.currentCompanyName,\r\n            freeValue:\r\n              decode.isEnableFree === true\r\n                ? \"YES\"\r\n                : decode.isEnablePaid === true\r\n                ? \"NO\"\r\n                : \"YES\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n\r\n      const form = filterRef.current;\r\n\r\n      if (new URLSearchParams(candidate_search).get(\"search\")) {\r\n        form[\"search\"].value = new URLSearchParams(candidate_search).get(\r\n          \"search\",\r\n        );\r\n      }\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/viewAllCanditates`,\r\n        data: {\r\n          page: \"1\",\r\n          search: `${form[\"search\"].value}`,\r\n          requirementId:\r\n            sessionStorage.getItem(\"recruitmentId\") !== null\r\n              ? sessionStorage.getItem(\"recruitmentId\")\r\n              : requirementId?.id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getRequirementName = async () => {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/getAllRequirementList`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setRequirementName(response.data.data);\r\n          }\r\n        })\r\n\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n\r\n    const getClientName = async () => {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/getAllClientList`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setClientName(response.data.data);\r\n          }\r\n        })\r\n\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n    getRequirementName();\r\n    getClientName();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    reducerValue,\r\n    token,\r\n    new URLSearchParams(candidate_search).get(\"search\"),\r\n    sessionStorage.getItem(\"use\"),\r\n  ]);\r\n\r\n  function updateData(id) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          var myCandidateStatuses = response.data.data;\r\n\r\n          axios({\r\n            method: \"post\",\r\n            url: `${process.env.REACT_APP_SERVER}admin/viewCandidate`,\r\n            data: {\r\n              id: id,\r\n            },\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n          }).then(function (result) {\r\n            if (result.data.status === true) {\r\n              const updateState = candidatesData.map((item) => {\r\n                if (item.id === id) {\r\n                  return {\r\n                    ...item,\r\n                    candidateDetail: result.data.data.candidateDetail,\r\n                    invoiceValue: result.data.data.invoiceValue,\r\n                    invoicedDate: result.data.data.invoicedDate,\r\n                    joinedDate: result.data.data.joinedDate,\r\n                    statusCode: result.data.data.statusList.statusCode,\r\n                    statusList: result.data.data.statusList,\r\n                    myCandidateStatuses: myCandidateStatuses,\r\n                    droppedReason: result.data.data.droppedReason,\r\n                    ditchReason: result.data.data.ditchReason,\r\n                    creditNoteReason: result.data.data.creditNoteReason,\r\n                  };\r\n                }\r\n                return item;\r\n              });\r\n\r\n              setCandidatesData(updateState);\r\n            }\r\n            setLoader(false);\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleAddNotes(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/addCandidateNotes`,\r\n        data: {\r\n          candidateId: candidatesEdit.id,\r\n          message: values.message,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  const [recruiterId, setRecruiterId] = useState(null);\r\n  const [requirementId, setRequirementId] = useState(null);\r\n  const [clientId, setClientId] = useState(null);\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setRecruiterId(null);\r\n    setRequirementId(null);\r\n    setClientId(null);\r\n    setSearch(\"\");\r\n    history.push(\"/app/admin_candidates?search=\");\r\n    sessionStorage.removeItem(\"recruitmentId\");\r\n    forceUpdate();\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/requirementList`,\r\n      data: {\r\n        page: \"1\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setRequirement(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      search: `${form[\"search\"].value}`,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiterId: recruiterId?.id,\r\n      requirementId:\r\n        sessionStorage.getItem(\"recruitmentId\") !== null\r\n          ? sessionStorage.getItem(\"recruitmentId\")\r\n          : requirementId?.id,\r\n      clientId: clientId?.id,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewAllCanditates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n  function getFilterData() {\r\n    sessionStorage.removeItem(\"recruitmentId\");\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    const form = filterRef.current;\r\n    if (form[\"fromDate\"].value > form[\"toDate\"].value) {\r\n      handleNotificationCall(\"error\", \"Check your Selected Dates\");\r\n      return\r\n    }\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      search: `${form[\"search\"].value}`,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiterId: recruiterId?.id,\r\n      requirementId:\r\n        sessionStorage.getItem(\"recruitmentId\") !== null\r\n          ? sessionStorage.getItem(\"recruitmentId\")\r\n          : requirementId?.id,\r\n      clientId: clientId?.id,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewAllCanditates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [stausOpen, setStatusOpen] = React.useState(false);\r\n  const [stausNewOpen, setStatusNewOpen] = React.useState(false);\r\n  const [dropOpen, setDropOpen] = React.useState(false);\r\n  const [reverseOpen, setReverseOpen] = React.useState(false);\r\n  const [messageOpen, setMessageOpen] = React.useState(false);\r\n\r\n  const [resumeOpen, setResumeOpen] = React.useState(false);\r\n  const [matchJDOpen, setMatchJDOpen] = React.useState(false);\r\n\r\n  const handleResumeClose = () => {\r\n    setResumeOpen(false);\r\n  };\r\n\r\n  const handleResumeOpen = () => {\r\n    setResumeOpen(true);\r\n  };\r\n\r\n  const handleJDClose = () => {\r\n    setMatchJDOpen(false);\r\n    setResumePercentage([])\r\n  };\r\n\r\n  const handleJDOpen = () => {\r\n    setMatchJDOpen(true);\r\n  };\r\n\r\n  const [candidate, setCandidate] = useState({\r\n    requirementId: \"\",\r\n    source: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    candidateProcessed: \"\",\r\n    native: \"\",\r\n    preferredLocation: \"\",\r\n    relevantExperience: null,\r\n    educationalQualification: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    dob: \"\",\r\n    candidateRecruiterDiscussionRecording: \"\",\r\n    candidateSkillExplanationRecording: \"\",\r\n    candidateMindsetAssessmentLink: \"\",\r\n    candidateAndTechPannelDiscussionRecording: \"\",\r\n    freeValue:\r\n      decode.isEnableFree === true\r\n        ? \"YES\"\r\n        : decode.isEnablePaid === true\r\n        ? \"NO\"\r\n        : \"YES\",\r\n  });\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleStatusOpen = () => {\r\n    setStatusOpen(true);\r\n  };\r\n\r\n  const handleStatusClose = () => {\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleStatusNewOpen = () => {\r\n    setStatusNewOpen(true);\r\n  };\r\n\r\n  const handleStatusNewClose = () => {\r\n    setStatusNewOpen(false);\r\n  };\r\n\r\n  const handleMessageOpen = () => {\r\n    setMessageOpen(true);\r\n  };\r\n\r\n  const handleMessageClose = () => {\r\n    setMessageOpen(false);\r\n  };\r\n\r\n  const handleDropOpen = () => {\r\n    setDropOpen(true);\r\n  };\r\n\r\n  const handleDropClose = () => {\r\n    setDropOpen(false);\r\n  };\r\n\r\n  const handleReverseOpen = () => {\r\n    setReverseOpen(true);\r\n  };\r\n\r\n  const handleReverseClose = () => {\r\n    setReverseOpen(false);\r\n  };\r\n\r\n  const [dropReasonOpen, setDropReasonOpen] = useState(false);\r\n\r\n  const handleDropReasonOpen = () => {\r\n    setDropReasonOpen(true);\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleDropReasonClose = () => {\r\n    setDropReasonOpen(false);\r\n  };\r\n\r\n  const reasonRef = useRef();\r\n\r\n  const [reasonOpen, setReasonOpen] = useState(false);\r\n\r\n  const handleReasonOpen = () => {\r\n    setStatusOpen(false);\r\n    setStatusNewOpen(false);\r\n    setReasonOpen(true);\r\n  };\r\n\r\n  const handleReasonClose = () => {\r\n    setReasonOpen(false);\r\n  };\r\n\r\n  const [changeMessageOpen, setChangeMessageOpen] = useState(false);\r\n\r\n  const handleChangeMessageOpen = () => {\r\n    setChangeMessageOpen(true);\r\n    handleStatusClose();\r\n  };\r\n\r\n  const handleChangeMessageClose = () => {\r\n    setChangeMessageOpen(false);\r\n  };\r\n\r\n  const [view, setView] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n\r\n  // function downloadExel() {\r\n  //   setLoader(true);\r\n  //   const form = filterRef.current;\r\n  //   var data = JSON.stringify({\r\n  //     search: `${form[\"search\"].value}`,\r\n  //     fromDate: `${form[\"fromDate\"].value}`,\r\n  //     toDate: `${form[\"toDate\"].value}`,\r\n  //     recruiterId: recruiterId?.id,\r\n  //     fileDownload: \"yes\",\r\n  //   });\r\n\r\n  //   axios({\r\n  //     method: \"post\",\r\n  //     url: `${process.env.REACT_APP_SERVER}admin/viewAllCanditates`,\r\n  //     data: data,\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Authorization: token,\r\n  //     },\r\n  //   }).then(function (response) {\r\n  //     if (response.data.status === true) {\r\n  //       setLoader(false);\r\n  //       saveAsExcel(response.data.data);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  const [recruitmentId, setRecruitmentId] = useState(\"\");\r\n\r\n  function handleAdd(values) {\r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n      } else {\r\n        setAddList(values);\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem(\"firstName\"),\r\n              rec_mobile_no: localStorage.getItem(\"mobile\"),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n\r\n            CheckAlreadyExit(values);\r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  function CheckAlreadyExit(addList) {\r\n    var dob = addList.day + \"-\" + addList.month + \"-\" + addList.year;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n      data: {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: \"\",\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob:\r\n          addList.day === undefined\r\n            ? \"\"\r\n            : dob !== \"--\"\r\n            ? addList.day + \"-\" + addList.month + \"-\" + addList.year\r\n            : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        candidateRecruiterDiscussionRecording:\r\n          addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording:\r\n          addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:\r\n          addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n        sendMessage: \"\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleClickOpen();\r\n      }\r\n      // else{\r\n      //   handleNotificationCall(\"error\", response.data.message);\r\n\r\n      // }\r\n    });\r\n  }\r\n\r\n  function handleEdit(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var dob = values.day + \"-\" + values.month + \"-\" + values.year;\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/adminEditCandidate`,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience: values.experience,\r\n          currentLocation: values.location,\r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile: values.alternateMobile,\r\n          preferredLocation: values.preferredLocation,\r\n          nativeLocation: values.native,\r\n          relevantExperience: values.relevantExperience,\r\n          currentCtc: values.currentCtc,\r\n          expectedCtc: values.expectedCtc,\r\n          dob:\r\n            values.day === undefined\r\n              ? candidatesEdit.dob\r\n              : dob !== \"--\"\r\n              ? dob\r\n              : candidatesEdit.dob,\r\n          noticePeriod: values.noticePeriod,\r\n          reasonForJobChange: values.reasonForJobChange,\r\n          candidateProcessed: values.candidateProcessed,\r\n          differentlyAbled: values.differentlyAbled,\r\n          educationalQualification: values.educationalQualification,\r\n          gender: values.gender,\r\n          reason: values.reason,\r\n          candidateRecruiterDiscussionRecording:\r\n            values.candidateRecruiterDiscussionRecording,\r\n          candidateSkillExplanationRecording:\r\n            values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink: values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:\r\n            values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName: values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            if (file !== undefined) {\r\n              if (file?.length !== 0) {\r\n                uploadResume(file, response.data.candidateDetailsId);\r\n              }\r\n            }\r\n\r\n            if (assessment !== undefined) {\r\n              if (assessment?.length !== 0) {\r\n                uploadAssessment(assessment, response.data.candidateId);\r\n              }\r\n            }\r\n\r\n            setLoader(false);\r\n            setState({ ...state, right: false });\r\n            handleNotificationCall(\"success\", response.data.message);\r\n\r\n            updateData(candidatesEdit.id);\r\n          } else {\r\n            setLoader(false);\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  function handleAddList(send) {\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day + \"-\" + addList.month + \"-\" + addList.year;\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob:\r\n          addList.day === undefined\r\n            ? \"\"\r\n            : dob !== \"--\"\r\n            ? addList.day + \"-\" + addList.month + \"-\" + addList.year\r\n            : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        candidateRecruiterDiscussionRecording:\r\n          addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording:\r\n          addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:\r\n          addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n        sendMessage: send,\r\n      };\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob:\r\n          addList.day === undefined\r\n            ? \"\"\r\n            : dob !== \"--\"\r\n            ? addList.day + \"-\" + addList.month + \"-\" + addList.year\r\n            : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        candidateRecruiterDiscussionRecording:\r\n          addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording:\r\n          addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:\r\n          addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n        sendMessage: send,\r\n      };\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleClose();\r\n        var message = \"\";\r\n\r\n        if (file !== undefined) {\r\n          if (file?.length !== 0) {\r\n            uploadResume(file, response.data.candidateDetailsId);\r\n          }\r\n        }\r\n\r\n        if (assessment !== undefined) {\r\n          if (assessment?.length !== 0) {\r\n            uploadAssessment(assessment, response.data.candidateId);\r\n          }\r\n        }\r\n\r\n        if (send === true) {\r\n          if (candidate.freeValue === \"YES\") {\r\n            message = messageRef.current.value;\r\n\r\n            window.open(\r\n              \"https://api.whatsapp.com/send?phone=+91\" +\r\n                addList.mobile +\r\n                \"&text=\" +\r\n                message +\r\n                \"\",\r\n            );\r\n          } else {\r\n            message =\r\n              \"Hi \" +\r\n              requirementList.cand1_name +\r\n              \", Can we chat today about a job opening \" +\r\n              localStorage.getItem(\"firstName\") +\r\n              \", \" +\r\n              localStorage.getItem(\"mobile\") +\r\n              \", \" +\r\n              localStorage.getItem(\"companyName\") +\r\n              \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n            handleMessage(\r\n              response.data.candidate_mobile,\r\n              message,\r\n              response.data.candidateId,\r\n            );\r\n          }\r\n        }\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        forceUpdate();\r\n        setState({ ...state, right: false });\r\n        reset();\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function getCanididateResumeInfo(candidateData,candidateDetail) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/getCanididateResumeInfo`,\r\n      data: {\r\n        id:candidateData\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setResumeParsedData({\r\n          data:response.data?.data,\r\n          candidateName: candidateDetail?.firstName + \" \"+ candidateDetail?.lastName,\r\n        })\r\n        const responsedData = JSON.stringify(response.data?.data)\r\n        const candidateFullName = candidateDetail?.firstName + \" \"+ candidateDetail?.lastName\r\n        sessionStorage.setItem('candidateResume',responsedData)\r\n        sessionStorage.setItem('candidateName',candidateFullName)\r\n        window.open(`/v1#/app/parsed_resume`,'_blank')\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function resumeExtract() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/extractInfo`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"Application/Jsom\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        console.log(response.data.data,'[][][][][')\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadResume(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"resume\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        // aiResumeUpload(data);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleMessage(mobile, message, candidateId) {\r\n    var url = \"\";\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"first_message\",\r\n        vars: [\r\n          requirementList.cand1_name,\r\n          requirementList.rec_name,\r\n          requirementList.rec_mobile_no,\r\n          localStorage.getItem(\"companyName\"),\r\n        ],\r\n        message: message,\r\n        candidate_name: requirementList.cand1_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        setLoader(false);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function changeStatus(send, message, status, candidateId) {\r\n    setLoader(true);\r\n    const template_name =\r\n      shortList.statusCode === 303\r\n        ? \"1st_interview_round\"\r\n        : shortList.statusCode === 3031\r\n        ? \"initial_interview_rounds\"\r\n        : shortList.statusCode === 304\r\n        ? status === \"Schedule Another Interview\"\r\n          ? \"initial_interview_rounds\"\r\n          : status === \"Schedule Final Interview\"\r\n          ? \"final_interview_round\"\r\n          : status === \"Send Document\"\r\n          ? \"document_collect\"\r\n          : \"\"\r\n        : shortList.statusCode === 3041\r\n        ? \"document_collect\"\r\n        : shortList.statusCode === 305\r\n        ? \"salary_breakup_shared_confirmation\"\r\n        : shortList.statusCode === 307\r\n        ? \"offer_released_confirmation\"\r\n        : shortList.statusCode === 308\r\n        ? status === \"Joining Confirmation\"\r\n          ? \"joining_confirmation\"\r\n          : \"\"\r\n        : \"\";\r\n\r\n    const vars =\r\n      shortList.statusCode === 308\r\n        ? [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem(\"companyName\"),\r\n          ]\r\n        : [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem(\"companyName\"),\r\n          ];\r\n\r\n    var url = \"\";\r\n    if (shortList.free === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        sendMessage: send,\r\n        candidateId: candidateId,\r\n        phone_number: shortList.cand_mobile,\r\n        template_name: template_name,\r\n        vars: vars,\r\n        message: message,\r\n        candidate_name: shortList.cand_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        if (shortList.free === \"YES\" && send === true) {\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=\" +\r\n              shortList.cand_mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        }\r\n\r\n        setLoader(false);\r\n        updateData(candidateId);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n        setState({ ...state, right: false });\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n    });\r\n  }\r\n\r\n  function joinedStatus() {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateJoinedStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        joinedDate: joiningRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function creditNoteStatus() {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}admin/updateCrediNoteStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        creditNoteReason: reasonRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleReasonClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function updateJoiningDitchedStatus() {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateJoiningDitchedStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        ditchReason: reasonRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleReasonClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function InvoicedStatus(values) {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateInvoicedStatus`;\r\n\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: shortList.id,\r\n          invoice: values.invoice,\r\n          invoicedDate: invoiceRef.current.value,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id);\r\n          handleStatusClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function DropStatus(values) {\r\n    setLoader(true);\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`;\r\n\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id: shortList.id,\r\n          droppedReason: values.reason,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id);\r\n          handleDropReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function changeStcStatus() {\r\n    setLoader(true);\r\n\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateStcStatus`;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        id: shortList.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        updateData(shortList.id);\r\n        handleChangeMessageClose();\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function OfferDeclineStatus(values) {\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateOfferDeclineStatus`;\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: shortList.id,\r\n          offerDeclinedReason: reasonRef.current.value,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id);\r\n          handleReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  const ExistCheck = (e) => {\r\n    if (recruitmentId !== \"\") {\r\n      CheckExitAlready(recruitmentId, e);\r\n    } else {\r\n      handleNotificationCall(\"error\", \"Select Requirement\");\r\n    }\r\n  };\r\n\r\n  function CheckExitAlready(recruitmentId, e) {\r\n    var data = {};\r\n    var url = \"\";\r\n\r\n    if (e.target.name === \"email\") {\r\n      data = {\r\n        requirementId: recruitmentId,\r\n        email: e.target.value,\r\n      };\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`;\r\n    } else {\r\n      data = {\r\n        requirementId: recruitmentId,\r\n        mobile: e.target.value,\r\n      };\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function cvMatchingPercentage(id,requirementId) {\r\n\r\n    setMatchLoading(true)\r\n    const isRequirementIdExist = resumePercentage.some(item => item.requirementId === requirementId);\r\n    if (isRequirementIdExist) {\r\n      setMatchLoading(false)\r\n      handleNotificationCall(\"error\", \"Requirement already exists in the match list.\");\r\n      return;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/jdMatcher`,\r\n      data: {\r\n        id: id,\r\n        requirementId: requirementId\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then((response) => {\r\n      if (response.data.status === true) {\r\n        \r\n        const previousPercentage = [...resumePercentage];\r\n\r\n        const newPercentageItem = {\r\n          description: response.data?.data,\r\n          requirementName: response.data?.requirementName,\r\n          requirementId: response.data?.requirementId\r\n        };\r\n\r\n        previousPercentage.push(newPercentageItem);\r\n\r\n        setResumePercentage(previousPercentage);\r\n      } else if (response.data.status === false) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n      setMatchLoading(false)\r\n    });\r\n  }\r\n\r\n  const removePercentage = (requirementIdToRemove) => {\r\n    const updatedPercentage = resumePercentage.filter(item => item.requirementId !== requirementIdToRemove);\r\n    setResumePercentage(updatedPercentage);\r\n  };\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"VIEW\") {\r\n      setDataList(\"VIEW\");\r\n    } else {\r\n      setDataList(\"NOTES\");\r\n    }\r\n\r\n    if (name !== \"NOTES\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/viewCandidate`,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc:\r\n                response.data.data.requirement?.recruiter?.firstName +\r\n                \" \" +\r\n                response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation:\r\n                response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:\r\n                response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:\r\n                response.data.data.candidateDetail?.nativeLocation,\r\n              experience: response.data.data.candidateDetail?.experience,\r\n              relevantExperience:\r\n                response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n              dob: response.data.data.candidateDetail?.dob,\r\n              noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:\r\n                response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason: response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:\r\n                response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:\r\n                response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:\r\n                response.data.data.candidateDetail?.educationalQualification,\r\n              gender: response.data.data.candidateDetail?.gender,\r\n              alternateMobile:\r\n                response.data.data.candidateDetail?.alternateMobile,\r\n              resume: response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:\r\n                response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:\r\n                response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:\r\n                response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:\r\n                response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              currentCompanyName:\r\n                response.data.data.candidateDetail?.currentCompanyName,\r\n              mainId: response.data.data.mainId,\r\n              isCandidateCpv: response.data.data.isCandidateCpv,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation:\r\n                response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:\r\n                response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:\r\n                response.data.data.candidateDetail?.nativeLocation,\r\n              experience: response.data.data.candidateDetail?.experience,\r\n              relevantExperience:\r\n                response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n              dob: response.data.data.candidateDetail?.dob,\r\n              noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:\r\n                response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason: response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:\r\n                response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:\r\n                response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:\r\n                response.data.data.candidateDetail?.educationalQualification,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile?.substring(\r\n                2,\r\n              ),\r\n              resume: response.data.data.candidateDetail?.resume,\r\n              gender: response.data.data.candidateDetail?.gender,\r\n              candidateRecruiterDiscussionRecording:\r\n                response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:\r\n                response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:\r\n                response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:\r\n                response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId,\r\n              recruiterId: response.data.data.recruiterId,\r\n              currentCompanyName:\r\n                response.data.data.candidateDetail?.currentCompanyName,\r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n            });\r\n\r\n            setState({ ...state, right: true });\r\n\r\n            setLoader(false);\r\n          } else {\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setListCanditate(response.data.data);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setCandidatesEdit({\r\n        ...candidatesEdit,\r\n        id: values,\r\n      });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/viewCandidateNotes`,\r\n        data: {\r\n          candidateId: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setCandidatesNote(response.data.data);\r\n          setState({ ...state, right: true });\r\n          setLoader(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function dropConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setDropOpen(false);\r\n        updateData(id);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function reverseConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/resetStatus`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setReverseOpen(false);\r\n        setLoader(false);\r\n        updateData(id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function sendMessage(candidateId, mobile, message, candidate_name, list) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"general_message\",\r\n        vars: [\r\n          candidate_name,\r\n          list.rec_name,\r\n          list.rec_mobile_no,\r\n          localStorage.getItem(\"companyName\"),\r\n        ],\r\n        message: message,\r\n        candidate_name: candidate_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n\r\n          setLoader(false);\r\n          handleMessageClose();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n          setDocFile={setDocFile}\r\n          setProfile={setProfile}\r\n          file={file}\r\n          docFile={docFile}\r\n          profile={profile}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation}\r\n          show={\r\n            candidatesEdit.recruiterId === decode.recruiterId ? true : false\r\n          }\r\n        />\r\n      </>\r\n    ) : dataList === \"ADD\" ? (\r\n      <>\r\n        <Add\r\n          setValue={setValue}\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          handleAddList={handleAddList}\r\n          register={register}\r\n          source={source}\r\n          recruitmentList={recruitmentList}\r\n          handleClose={handleClose}\r\n          errors={errors}\r\n          setLoader={setLoader}\r\n          toggleDrawer={toggleDrawer}\r\n          setRecruitmentList={setRecruitmentList}\r\n          requirementList={requirementList}\r\n          handleSubmit={handleSubmit}\r\n          handleAdd={handleAdd}\r\n          requirement={requirement}\r\n          isSubmitting={isSubmitting}\r\n          open={open}\r\n          messageRef={messageRef}\r\n          reset={reset}\r\n          setCandidate={setCandidate}\r\n          candidate={candidate}\r\n          setFile={setFile}\r\n          setDocFile={setDocFile}\r\n          setProfile={setProfile}\r\n          file={file}\r\n          docFile={docFile}\r\n          profile={profile}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n          setRecruitmentId={setRecruitmentId}\r\n          recruitmentId={recruitmentId}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          setPhoneValidation={setPhoneValidation}\r\n          setHideContactDetails={setHideContactDetails}\r\n          hideContactDetails={hideContactDetails}\r\n          ExistCheck={ExistCheck}\r\n          requirementId={\"true\"}\r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Note\r\n          toggleDrawer={toggleDrawer}\r\n          candidatesNote={candidatesNote}\r\n          noteCandidates={noteCandidates}\r\n          noteErrors={noteErrors}\r\n          handleAddNotes={handleAddNotes}\r\n          noteSubmit={noteSubmit}\r\n        />\r\n      </>\r\n    );\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n        {/* <Tooltip title=\"Dowmload\" placement=\"bottom\" aria-label=\"download\">\r\n          {count !== 0 ? (\r\n            <CloudDownloadIcon\r\n              className={classNames(classes.toolIcon)}\r\n              onClick={(e) => {\r\n                downloadExel();\r\n              }}\r\n            />\r\n          ) : (\r\n            <CloudDownloadIcon className={classes.downloadIcon} />\r\n          )}\r\n        </Tooltip> */}\r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: \"Oops! Matching record could not be found\",\r\n      },\r\n    },\r\n    search: false,\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery === true ? \"vertical\" : \"standard\",\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n              <Bar title=\"Candidates\" list={list} />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n  const components = {\r\n    ExpandButton: function (props) {\r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  // function getSheetData(data, header) {\r\n  //   var fields = Object.keys(data[0]);\r\n  //   var sheetData = data.map(function (row) {\r\n  //     return fields.map(function (fieldName) {\r\n  //       return row[fieldName] ? row[fieldName] : \"\";\r\n  //     });\r\n  //   });\r\n  //   sheetData.unshift(header);\r\n  //   return sheetData;\r\n  // }\r\n\r\n  // async function saveAsExcel(data) {\r\n  //   let header = [\r\n  //   \"S.No\",\r\n  //   \"Requirement Name\",\r\n  //   \"Client Coordinator\",\r\n  //   \"Recruiter\",\r\n  //   \"Candidate Name\",\r\n  //   \"Email\",\r\n  //   \"Mobile\",\r\n  //   \"Gender\",\r\n  //   \"Current Location\",\r\n  //   \"Preferred Location\",\r\n  //   \"Native Location\",\r\n  //   \"Total Years of Experience\",\r\n  //   \"Relevant Experience\",\r\n  //   \"Current CTC\",\r\n  //   \"Expected CTC\",\r\n  //   \"DOB\",\r\n  //   \"Notice Period\",\r\n  //   \"Reason for Job Change\",\r\n  //   \"Candidate Attended\",\r\n  //   \"Differently Abled\",\r\n  //   \"Educational Qualification\",\r\n  //   \"Posted Date\",\r\n  //   ];\r\n\r\n  //   XlsxPopulate.fromBlankAsync().then(async (workbook) => {\r\n  //     const sheet1 = workbook.sheet(0);\r\n  //     const sheetData = getSheetData(data, header);\r\n  //     const totalColumns = sheetData[0].length;\r\n\r\n  //     sheet1.cell(\"A1\").value(sheetData);\r\n  //     const range = sheet1.usedRange();\r\n  //     const endColumn = String.fromCharCode(64 + totalColumns);\r\n  //     sheet1.row(1).style(\"bold\", true);\r\n  //     sheet1.range(\"A1:\" + endColumn + \"1\").style(\"fill\", \"BFBFBF\");\r\n  //     range.style(\"border\", true);\r\n  //     return workbook.outputAsync().then((res) => {\r\n  //       saveAs(\r\n  //         res,\r\n  //         `Candidates_${moment(new Date()).format(\"DD_MM_YYYY_HH_mm\")}.xlsx`,\r\n  //       );\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          <PageTitle title=\"Candidates\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n          <div className={classes.lgButton}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              startIcon={<AddCircleIcon />}\r\n              className={classes.margin}\r\n              color=\"primary\"\r\n              onClick={(e) => {\r\n                setDataList(\"ADD\");\r\n                reset();\r\n                setCandidate({\r\n                  ...candidate,\r\n                  requirementId: \"\",\r\n                  source: \"\",\r\n                  email: \"\",\r\n                  firstName: \"\",\r\n                  lastName: \"\",\r\n                  skills: \"\",\r\n                  location: \"\",\r\n                  experience: null,\r\n                  gender: \"\",\r\n                  differentlyAbled: \"\",\r\n                  candidateProcessed: \"\",\r\n                  native: \"\",\r\n                  preferredLocation: \"\",\r\n                  relevantExperience: null,\r\n                  educationalQualification: \"\",\r\n                  currentCtc: null,\r\n                  expectedCtc: null,\r\n                  noticePeriod: \"\",\r\n                  reasonForJobChange: \"\",\r\n                  reason: \"\",\r\n                  dob: \"\",\r\n                  candidateRecruiterDiscussionRecording: \"\",\r\n                  candidateSkillExplanationRecording: \"\",\r\n                  candidateMindsetAssessmentLink: \"\",\r\n                  candidateAndTechPannelDiscussionRecording: \"\",\r\n                  freeValue:\r\n                    decode.isEnableFree === true\r\n                      ? \"YES\"\r\n                      : decode.isEnablePaid === true\r\n                      ? \"NO\"\r\n                      : \"YES\",\r\n                });\r\n                setPhoneValidation(false);\r\n                setRecruitmentId(\"\");\r\n                setState({ ...state, right: true });\r\n                setValidation(false);\r\n                setFile([]);\r\n                setDocFile([]);\r\n                setProfile([]);\r\n                setAssessment([]);\r\n              }}\r\n            >\r\n              Add New Candidate\r\n            </Button>\r\n          </div>\r\n\r\n          <div className={classes.smButton}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              startIcon={<AddCircleIcon />}\r\n              className={classes.margin}\r\n              color=\"primary\"\r\n              onClick={(e) => {\r\n                setDataList(\"ADD\");\r\n                reset();\r\n                setState({ ...state, right: true });\r\n                setValidation(false);\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{\r\n              paper:\r\n                dataList === \"VIEW\" || dataList === \"NOTES\"\r\n                  ? classes.drawer\r\n                  : classes.clientDrawer,\r\n            }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n          <TextField\r\n            label=\"Search\"\r\n            type=\"text\"\r\n            name=\"search\"\r\n            placeholder=\"Enter Candidate Unique ID/Name/Email/Mobile (eg: 91XXXXXXXXXX)\"\r\n            InputLabelProps={{ shrink: true }}\r\n            value={search !== null ? search : \"\"}\r\n            onChange={(e) => {\r\n              setSearch(e.target.value);\r\n            }}\r\n            className={classes.searchWidth}\r\n          />\r\n\r\n          <Autocomplete\r\n            className={classes.filterFullWidth}\r\n            options={requirementName}\r\n            getOptionLabel={(option) =>\r\n              option.requirementName + \" (\" + option.uniqueId + \")\"\r\n            }\r\n            // size=\"small\"\r\n            value={requirementId}\r\n            onChange={(event, value) => {\r\n              setRequirementId(value);\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"requirementId\"\r\n                label=\"Requirement\"\r\n                size=\"small\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n{ decode.companyType !== \"COMPANY\" &&\r\n          <Autocomplete\r\n            className={classes.filterFullWidth}\r\n            options={clientName}\r\n            getOptionLabel={(option) =>\r\n              option.clientName + \" (\" + option.uniqueId + \")\"\r\n            }\r\n            value={clientId}\r\n            onChange={(event, value) => setClientId(value)}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"clientId\"\r\n                label=\"Project\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n}\r\n\r\n          <Autocomplete\r\n            options={userName}\r\n            className={classes.filterFullWidth}\r\n            getOptionLabel={(option) => {\r\n              const roleName = option.user?.role?.roleName;\r\n              const firstName = option.firstName;\r\n              const lastName = option.lastName;\r\n              let label = `${firstName} ${lastName}`;\r\n              if (roleName) {\r\n                label += ` (${roleName})`;\r\n\r\n                if (roleName === 'SUBVENDOR') {\r\n                  label = label.replace('(SUBVENDOR)', `(${option?.companyName})`);\r\n                } else if (roleName === 'CLIENTCOORDINATOR') {\r\n                  label = label.replace('(CLIENTCOORDINATOR)', '(Hiring Manager)');\r\n                }\r\n              }\r\n\r\n              return label;\r\n            }}\r\n            value={recruiterId}\r\n            onChange={(event, value) => setRecruiterId(value)}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"recruiterId\"\r\n                label=\"Recruiter\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n\r\n          <TextField\r\n            name=\"fromDate\"\r\n            label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n          />\r\n\r\n          <TextField\r\n            name=\"toDate\"\r\n            label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n            className={classes.filterWidth}\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            options={table_options}\r\n            components={components}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n\r\n              {\r\n                name: \"Resume\",\r\n              },\r\n              {\r\n                name: \"View Candidate\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <Actions\r\n                  index={index}\r\n                  item={item}\r\n                  reset={reset}\r\n                  editreset={editreset}\r\n                  noteReset={noteReset}\r\n                  setCandidateList={setCandidateList}\r\n                  handleMessageOpen={handleMessageOpen}\r\n                  candidateList={candidateList}\r\n                  handleDropOpen={handleDropOpen}\r\n                  handleReverseOpen={handleReverseOpen}\r\n                  handleShow={handleShow}\r\n                  setFile={setFile}\r\n                  setAssessment={setAssessment}\r\n                  setPhoneValidation={setPhoneValidation}\r\n                  handleUse={handleUse}\r\n                />,\r\n                item.statusCode ? (\r\n                  <Grid>\r\n                    <Status\r\n                      list={item}\r\n                      handleStatusOpen={handleStatusOpen}\r\n                      handleStatusNewOpen={handleStatusNewOpen}\r\n                      setValidation={setValidation}\r\n                      setShortList={setShortList}\r\n                      shortList={shortList}\r\n                      setView={setView}\r\n                      view={view}\r\n                      invoicereset={invoicereset}\r\n                    />\r\n                  </Grid>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n\r\n                <Grid container row spacing={2}>\r\n                  {item.candidateDetail?.isExternal === \"YES\" ? (\r\n                    <Tooltip\r\n                      title=\"VENDOR\"\r\n                      placement=\"bottom\"\r\n                      aria-label=\"title\"\r\n                    >\r\n                      <Avatar\r\n                        alt=\"Profile\"\r\n                        src={external}\r\n                        className={classes.externalIcon}\r\n                      />\r\n                    </Tooltip>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {item.candidateDetail?.firstName +\r\n                    \" \" +\r\n                    item.candidateDetail?.lastName}\r\n                  <br /> {\" (\" + item.uniqueId + \")\"}\r\n                </Grid>,\r\n                item.mainId === decode.mainId ? (\r\n                  <>\r\n                    \r\n                    {item.candidateDetail?.email + \" /\"} <br />\r\n                    {\"91 \" + item.candidateDetail?.mobile.slice(2)}\r\n                  </>\r\n                ) : item.hideContactDetails !== true ? (\r\n                  <>\r\n                    \r\n                    {item.candidateDetail?.email + \" /\"} <br />\r\n                    {\"91 \" + item.candidateDetail?.mobile.slice(2)}\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n                <>\r\n                  {item.requirement?.requirementName} <br />\r\n                  {\" (\" + item.requirement?.uniqueId + \")\"}\r\n                </>,\r\n                item.requirement?.client?.handler?.firstName +\" \" +item.requirement?.client?.handler?.lastName,\r\n                item.requirement?.recruiter?.firstName + \" \" + item?.requirement?.recruiter?.lastName,\r\n                <>\r\n                  {item.candidateDetail?.resume !==\r\n                  \"https://liverefo.s3.amazonaws.com/\" ? (\r\n                    <>\r\n                      \r\n                      <Grid container className={classes.space}>\r\n                        \r\n                        <Grid item xs className={classes.toolAlign}>\r\n                          <Tooltip\r\n                            title=\"View Resume\"\r\n                            placement=\"bottom\"\r\n                            aria-label=\"view\"\r\n                          >\r\n                            <DescriptionIcon\r\n                              className={classes.toolIcon}\r\n                              onClick={() => {\r\n                                handleResumeOpen();\r\n                                setFile([\r\n                                  {\r\n                                    url: item.candidateDetail?.resume,\r\n                                  },\r\n                                ]);\r\n                              }}\r\n                            />\r\n                          </Tooltip>\r\n                          {/* <Tooltip         title=\"Downlaod Resume\"         placement=\"bottom\"         aria-label=\"downlaod\"       > \r\n  <a href={item.candidateDetail?.resume} download>  <GetAppIcon className={classes.toolIcon} />    </a>      \r\n</Tooltip>      */}\r\n                        </Grid>\r\n                      </Grid>\r\n                    </>\r\n                  ) : (\r\n                    \"No Resume Found\"\r\n                  )}\r\n                </>,\r\n                <Tooltip\r\n                  title=\"View Candidate\"\r\n                  placement=\"bottom\"\r\n                  aria-label=\"view\"\r\n                >\r\n                  <ViewIcon\r\n                    onClick={(e) => {\r\n                      handleShow(item.id, \"VIEW\");\r\n                    }}\r\n                    className={classes.toolIcon}\r\n                  />\r\n                </Tooltip>,\r\n                // <Tooltip\r\n                //   title=\"Match JD\"\r\n                //   placement=\"bottom\"\r\n                //   aria-label=\"view\"\r\n                // >\r\n                //   <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n                //     onClick={(e) => {\r\n                //       handleJDOpen();\r\n                //       cvMatchingPercentage(item.id);\r\n                //       setCandidMatchId(item.id);\r\n                //     }}>\r\n                //     %\r\n                //   </div>\r\n                // </Tooltip>,\r\n                // <Tooltip\r\n                //   title=\"Get Resume Info\"\r\n                //   placement=\"bottom\"\r\n                //   aria-label=\"view\"\r\n                // >\r\n                //   <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n                //     onClick={(e) => {\r\n                //       getCanididateResumeInfo(item.candidateDetailId,item.candidateDetail);\r\n                //     }}>\r\n                //     i\r\n                //   </div>\r\n                // </Tooltip>,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Message\r\n        setState={setState}\r\n        state={state}\r\n        candidateList={candidateList}\r\n        decode={decode}\r\n        sendMessage={sendMessage}\r\n        handleMessageOpen={handleMessageOpen}\r\n        messageOpen={messageOpen}\r\n        handleMessageClose={handleMessageClose}\r\n      />\r\n\r\n      <Dialogs\r\n        handleStatusClose={handleStatusClose}\r\n        handleStatusNewClose={handleStatusNewClose}\r\n        validation={validation}\r\n        stausOpen={stausOpen}\r\n        stausNewOpen={stausNewOpen}\r\n        changeStatus={changeStatus}\r\n        shortList={shortList}\r\n        view={view}\r\n        setView={setView}\r\n        invoiceCandidates={invoiceCandidates}\r\n        invoiceErrors={invoiceErrors}\r\n        invoiceSubmit={invoiceSubmit}\r\n        InvoicedStatus={InvoicedStatus}\r\n        joinedStatus={joinedStatus}\r\n        creditNoteStatus={creditNoteStatus}\r\n        updateJoiningDitchedStatus={updateJoiningDitchedStatus}\r\n        OfferDeclineStatus={OfferDeclineStatus}\r\n        joiningRef={joiningRef}\r\n        invoiceRef={invoiceRef}\r\n        saveOnly={saveOnly}\r\n        setSaveOnly={setSaveOnly}\r\n        dropCandidates={dropCandidates}\r\n        dropErrors={dropErrors}\r\n        dropSubmit={dropSubmit}\r\n        dropReset={dropReset}\r\n        DropStatus={DropStatus}\r\n        handleDropReasonClose={handleDropReasonClose}\r\n        dropReasonOpen={dropReasonOpen}\r\n        handleDropReasonOpen={handleDropReasonOpen}\r\n        changeMessageOpen={changeMessageOpen}\r\n        handleChangeMessageClose={handleChangeMessageClose}\r\n        changeStcStatus={changeStcStatus}\r\n        handleChangeMessageOpen={handleChangeMessageOpen}\r\n        reasonRef={reasonRef}\r\n        handleReasonOpen={handleReasonOpen}\r\n        reasonOpen={reasonOpen}\r\n        handleReasonClose={handleReasonClose}\r\n      />\r\n\r\n      <ResumeDialog\r\n        resume={file}\r\n        resumeOpen={resumeOpen}\r\n        handleResumeClose={handleResumeClose}\r\n      />\r\n\r\n      {/* <MatchJDDialog\r\n        resumePercentage={resumePercentage}\r\n        requirementName={requirementName}\r\n        matchLoading={matchLoading}\r\n        jDOpen={matchJDOpen}\r\n        handleJDClose={handleJDClose}\r\n        candidMatchId={candidMatchId}\r\n        cvMatchingPercentage={cvMatchingPercentage}\r\n        removePercentage={removePercentage}\r\n      /> */}\r\n\r\n      <Drop\r\n        handleDropClose={handleDropClose}\r\n        dropOpen={dropOpen}\r\n        dropConfirmation={dropConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n      <Reverse\r\n        handleReverseClose={handleReverseClose}\r\n        reverseOpen={reverseOpen}\r\n        reverseConfirmation={reverseConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n      <Document file=\"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\" onLoadSuccess={onDocumentLoadSuccess}>\r\n        {Array.apply(null, Array(numPages))\r\n          .map((x, i) => i + 1)\r\n          .map((page) => {\r\n            return (\r\n              <Page\r\n                pageNumber={page}\r\n                renderTextLayer={false}\r\n                renderAnnotationLayer={false}\r\n              />\r\n            );\r\n          })}\r\n      </Document>\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\cc\\Candidates.js",["751","752","753","754","755","756","757","758","759","760","761"],"import {\r\n  Backdrop,\r\n  Button,\r\n  CircularProgress,\r\n  Grid,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\n\r\nimport { toast,  } from \"react-toastify\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport moment from \"moment\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport axios from \"axios\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\"; \r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\"; \r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\n//import GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\"; \r\nimport Notification from \"../../components/Notification/Notification\";\r\nimport Add from \"../../components/Candidates/Add\";\r\nimport Edit from \"../../components/Candidates/Edit\";\r\nimport View from \"../../components/Candidates/View\";\r\nimport Note from \"../../components/Candidates/Note\";\r\nimport Bar from \"../../components/Candidates/Bar\";\r\nimport Message from \"../../components/Candidates/Message\"; \r\nimport Dialogs from \"../../components/Recruiter/Dialogs\";\r\nimport Status from \"../../components/Recruiter/Status\";\r\nimport Drop from \"../../components/Candidates/Drop\";\r\nimport Actions from \"../../components/Candidates/Actions\"; \r\nimport ExpandButton from \"../../components/Candidates/ExpandButton\"; \r\nimport Reverse from \"../../components/Recruiter/Reverse\";\r\nimport ResumeDialog from \"../../components/Candidates/Dialogs\"; \r\n\r\nimport useStyles from \"../../themes/style.js\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport MatchJDDialog from \"../../components/Candidates/MatchJDDialog.js\";\r\nimport { useResumeDataContext } from \"../../context/CandidateDataContext.js\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables(props) {\r\n  const classes = useStyles();\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const messageRef=useRef()\r\n  const mobileQuery = useMediaQuery('(max-width:600px)');  \r\n\r\n  const history = useHistory();\r\n\r\n  const candidate_search = props.location.search;  \r\n\r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n  const [candidatesNote, setCandidatesNote] = useState([]);\r\n \r\n\r\n  const filterRef = useRef(null);\r\n  const joiningRef = useRef();\r\n\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n  const [candidateList, setCandidateList] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    mobile: \"\",\r\n    message: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n  });\r\n   const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    requirementName: \"\",\r\n    source: \"\", \r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",       \r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\", \r\n    \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false\r\n  });\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id:\"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    cc: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    invoiceValue: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n    location:\"\",\r\n    experience:null, \r\n    resume: \"\",\r\n\r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [rowsPerPage] = useState(50);\r\n  const [setCandidatesChange] = useState([]);\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const [file, setFile] = useState([]);\r\n  const [assessment,setAssessment] = useState([]);\r\n  const [hideContactDetails,setHideContactDetails] = useState(false);\r\n\r\n  const [search, setSearch] = useState(new URLSearchParams(candidate_search).get('search'));\r\n  const [requirementName, setRequirementName] = useState([]);\r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n\r\n  const { setResumeParsedData } = useResumeDataContext();\r\n\r\n\r\n  const [resumeOpen, setResumeOpen] = React.useState(false); \r\n  const [matchJDOpen, setMatchJDOpen] = React.useState(false);\r\n\r\n  const handleResumeClose = () => {\r\n    setResumeOpen(false);\r\n  };\r\n\r\n  const handleResumeOpen = () => {\r\n    setResumeOpen(true);\r\n  };\r\n\r\n  const handleJDClose = () => {\r\n    setMatchJDOpen(false);\r\n    setResumePercentage([])\r\n  };\r\n\r\n  const handleJDOpen = () => {\r\n    setMatchJDOpen(true);\r\n  };\r\n\r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  const [requirement, setRequirement] = useState([]);\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n  const [shortList, setShortList] = useState({\r\n    id: \"\",\r\n    cand_name: \"\",\r\n    job_id: \"\",\r\n    job_name: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    cand_mobile: \"\",\r\n    statusCode: \"\",\r\n    free: \"\",\r\n  });\r\n\r\n \r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n\r\n  const [validation, setValidation] = useState(false);\r\n  const [saveOnly,setSaveOnly]=useState(\"YES\");\r\n  const [addList, setAddList] = useState([]);\r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n  const [ resumePercentage , setResumePercentage]= useState([])\r\n  const [ matchLoading, setMatchLoading] = useState(false)\r\n  const [candidMatchId, setCandidMatchId] = useState(\"\");\r\n\r\n  function handleUse(mobile){ \r\n\r\n    history.push(\"/app/cc_candidates\"); \r\n    sessionStorage.setItem('use', mobile);\r\n\r\n    setState({ ...state, right: true }); \r\n    setDataList(\"ADD\");\r\n    \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n      data: {\r\n        mobile:mobile.substring(2)\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) { \r\n        if (response.data.status === true) {\r\n \r\n          // reset({\r\n          //   requirementId:recruitmentId, \r\n          //   mobile: mobile.substring(2),\r\n          //   email: response.data.data?.email,\r\n          //   firstName: response.data.data?.firstName,\r\n          //   lastName: response.data.data?.lastName,\r\n          //   skills: response.data.data?.skills,  \r\n          //   experience: response.data.data?.experience, \r\n          //   location: response.data.data?.currentLocation,\r\n                   \r\n          //    gender: response.data.data?.gender,\r\n          //   differentlyAbled:  response.data.data?.differentlyAbled, \r\n          //   candidateProcessed:  response.data.data?.candidateProcessed,\r\n          //   native:  response.data.data?.nativeLocation,\r\n          //   preferredLocation:  response.data.data?.preferredLocation,\r\n          //   relevantExperience: response.data.data?.relevantExperience,\r\n          //   educationalQualification:  response.data.data?.educationalQualification,\r\n           \r\n          //   currentCtc: response.data.data?.currentCtc,\r\n          //   expectedCtc:  response.data.data?.expectedCtc,\r\n          //   noticePeriod: response.data.data?.noticePeriod,\r\n          //   reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          //   currentCompanyName: response.data.data?.currentCompanyName,\r\n          //   reason: response.data.data?.reason,\r\n          //   })\r\n\r\n          setCandidate({\r\n            ...candidate,\r\n            mobile:mobile.substring(2),\r\n          email: response.data.data?.email,\r\n          firstName: response.data.data?.firstName,\r\n          lastName: response.data.data?.lastName,\r\n          skills: response.data.data?.skills,  \r\n          experience: response.data.data?.experience, \r\n          location: response.data.data?.currentLocation,\r\n          dob: response.data.data?.dob,\r\n           gender: response.data.data?.gender,\r\n          differentlyAbled:  response.data.data?.differentlyAbled, \r\n          candidateProcessed:  response.data.data?.candidateProcessed,\r\n          native:  response.data.data?.nativeLocation,\r\n          preferredLocation:  response.data.data?.preferredLocation,\r\n          relevantExperience: response.data.data?.relevantExperience,\r\n          educationalQualification:  response.data.data?.educationalQualification,\r\n           currentCtc: response.data.data?.currentCtc,\r\n          expectedCtc:  response.data.data?.expectedCtc,\r\n          noticePeriod: response.data.data?.noticePeriod,\r\n          reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          reason: response.data.data?.reason,\r\n          candidateRecruiterDiscussionRecording:response.data.data?.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:response.data.data?.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:response.data.data?.candidateMindsetAssessmentLink,\r\n         candidateAndTechPannelDiscussionRecording:response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n         currentCompanyName: response.data.data?.currentCompanyName,\r\n          freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n         });\r\n      }\r\n    });\r\n  } \r\n\r\n  const handleDropOpen = () => {\r\n    setDropOpen(true);\r\n  };\r\n\r\n  const handleDropClose = () => {\r\n    setDropOpen(false);\r\n  };\r\n\r\n  const [reverseOpen, setReverseOpen] = React.useState(false);\r\n\r\n  const handleReverseOpen = () => {\r\n    setReverseOpen(true);\r\n  };\r\n\r\n  const handleReverseClose = () => {\r\n    setReverseOpen(false);\r\n  };\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required'),\r\n    firstName: Yup.string().required('First Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string().max(255).required('Last Name is required')\r\n    .max(255)\r\n    .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n      message: \"Last Name be Alphanumeric\",\r\n    }),\r\n    mobile: Yup.string().required('Mobile is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required('Skill is required'),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n    location: Yup.string().nullable().notRequired(),  \r\n    alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required('Gender is required').notRequired(),\r\n    educationalQualification: Yup.string().nullable().notRequired(), \r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(), \r\n    native: Yup.string().nullable().notRequired(),\r\n    candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n    candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n    candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n      skills: Yup.string().required(\"Skill is required\"),\r\n      source: Yup.string().required(\"Source is required\"),\r\n      experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n       location: Yup.string().nullable().notRequired(),\r\n       alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n       native: Yup.string().nullable().notRequired(),\r\n       preferredLocation: Yup.string().nullable().notRequired(),\r\n       relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n       educationalQualification: Yup.string().nullable().notRequired(),\r\n       day: Yup.string().nullable().notRequired(),\r\n       month: Yup.string().nullable().notRequired(),\r\n       year: Yup.string().nullable().notRequired(),\r\n      gender: Yup.string().required('Gender is required').notRequired(),\r\n       differentlyAbled: Yup.string().nullable().notRequired(),\r\n       currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n       expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n       noticePeriod: Yup.string().nullable().notRequired(),\r\n       reasonForJobChange: Yup.string().nullable().notRequired(),\r\n       candidateProcessed: Yup.string().nullable().notRequired(),\r\n       reason: Yup.string().nullable().notRequired(), \r\n       candidateRecruiterDiscussionRecording: Yup.string().nullable().notRequired(),\r\n       candidateSkillExplanationRecording: Yup.string().nullable().notRequired(),\r\n       candidateMindsetAssessmentLink: Yup.string().nullable().notRequired(),\r\n       candidateAndTechPannelDiscussionRecording: Yup.string().nullable().notRequired(),\r\n      invoiceDate: Yup.string(),\r\n      invoicedValue: Yup.string(),\r\n      joinedDate: Yup.string(),\r\n      currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const noteSchema = Yup.object().shape({\r\n    message: Yup.string().required(\"Message is required\"),\r\n  });\r\n\r\n  const dropSchema = Yup.object().shape({\r\n    reason: Yup.string().required(\"Reason is required\"),\r\n  });\r\n\r\n  const {\r\n    register: dropCandidates,\r\n    formState: { errors: dropErrors },\r\n    handleSubmit: dropSubmit,\r\n    reset: dropReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(dropSchema),\r\n  });\r\n\r\n  const {\r\n    register: noteCandidates,\r\n    formState: { errors: noteErrors },\r\n    handleSubmit: noteSubmit,\r\n    reset: noteReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(noteSchema),\r\n  });\r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isSubmitting },\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n\r\n    \r\n    setLoader(true);\r\n    setSearch(new URLSearchParams(candidate_search).get('search'));\r\n\r\n    var mobile = sessionStorage.getItem(\"use\");\r\n\r\n    if(mobile !== \"\" && mobile !== null){\r\n\r\n      setState({ ...state, right: true }); \r\n      setDataList(\"ADD\");\r\n      \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n        data: {\r\n          mobile:mobile.substring(2)\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) { \r\n          if (response.data.status === true) {\r\n            sessionStorage.removeItem('use');\r\n            reset({\r\n              requirementId:recruitmentId, \r\n              mobile: mobile.substring(2),\r\n              email: response.data.data?.email,\r\n              firstName: response.data.data?.firstName,\r\n              lastName: response.data.data?.lastName,\r\n              skills: response.data.data?.skills,  \r\n              experience: response.data.data?.experience, \r\n              location: response.data.data?.currentLocation,\r\n                     \r\n               gender: response.data.data?.gender,\r\n              differentlyAbled:  response.data.data?.differentlyAbled, \r\n              candidateProcessed:  response.data.data?.candidateProcessed,\r\n              native:  response.data.data?.nativeLocation,\r\n              preferredLocation:  response.data.data?.preferredLocation,\r\n              relevantExperience: response.data.data?.relevantExperience,\r\n              educationalQualification:  response.data.data?.educationalQualification,\r\n             \r\n              currentCtc: response.data.data?.currentCtc,\r\n              expectedCtc:  response.data.data?.expectedCtc,\r\n              noticePeriod: response.data.data?.noticePeriod,\r\n              reasonForJobChange: response.data.data?.reasonForJobChange,\r\n              reason: response.data.data?.reason,\r\n              currentCompanyName: response.data.data?.currentCompanyName\r\n              })\r\n  \r\n            setCandidate({\r\n              ...candidate,\r\n              mobile:mobile.substring(2),\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,  \r\n            experience: response.data.data?.experience, \r\n            location: response.data.data?.currentLocation,\r\n            dob: response.data.data?.dob,\r\n             gender: response.data.data?.gender,\r\n            differentlyAbled:  response.data.data?.differentlyAbled, \r\n            candidateProcessed:  response.data.data?.candidateProcessed,\r\n            native:  response.data.data?.nativeLocation,\r\n            preferredLocation:  response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:  response.data.data?.educationalQualification, \r\n             currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc:  response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            reason: response.data.data?.reason,\r\n            candidateRecruiterDiscussionRecording:response.data.data?.candidateRecruiterDiscussionRecording, \r\n            candidateSkillExplanationRecording:response.data.data?.candidateSkillExplanationRecording,\r\n            candidateMindsetAssessmentLink:response.data.data?.candidateMindsetAssessmentLink,\r\n           candidateAndTechPannelDiscussionRecording:response.data.data?.candidateAndTechPannelDiscussionRecording,\r\n           currentCompanyName: response.data.data?.currentCompanyName,\r\n            freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n           });\r\n        }\r\n      });\r\n\r\n    }\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n     \r\n      const form = filterRef.current; \r\n      if(new URLSearchParams(candidate_search).get('search')){\r\n        form[\"search\"].value= new URLSearchParams(candidate_search).get('search');\r\n      }\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n        data: {\r\n          page: \"1\",\r\n          search: `${form[\"search\"].value}`,\r\n          requirementId: sessionStorage.getItem(\"recruitmentId\")!==null? sessionStorage.getItem(\"recruitmentId\") : requirementId?.id\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getRequirementName = async () => {\r\n     \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}CC/myRequirements`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setRequirementName(response.data.data);\r\n          }\r\n        })\r\n\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n    getRequirementName();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [reducerValue, token, new URLSearchParams(candidate_search).get('search'), sessionStorage.getItem(\"use\")]);\r\n\r\n\r\n\r\n\r\n    function updateData(id){\r\n \r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n        data: {\r\n          id: id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n    \r\n          if (response.data.status === true) { \r\n    \r\n            var myCandidateStatuses= response.data.data;\r\n    \r\n            axios({\r\n              method: \"post\",\r\n              url: `${process.env.REACT_APP_SERVER}recruiter/candidate`,\r\n              data: {\r\n                id: id,\r\n              },\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: token,\r\n              },\r\n            })\r\n              .then(function (result) {\r\n              \r\n                 if (result.data.status === true) {  \r\n           \r\n            const updateState = candidatesData.map(item => {\r\n        \r\n              if (item.id === id) { \r\n                return { ...item,  \r\n                    candidateDetail: result.data.data.candidateDetail,  \r\n                    invoiceValue: result.data.data.invoiceValue,  \r\n                    invoicedDate: result.data.data.invoicedDate,  \r\n                    joinedDate: result.data.data.joinedDate, \r\n                    statusCode: result.data.data.statusList.statusCode,\r\n                    statusList: result.data.data.statusList,  \r\n                    myCandidateStatuses: myCandidateStatuses,\r\n                    \r\n                \r\n                    \r\n                };\r\n                \r\n              }\r\n              return item;\r\n            }); \r\n         \r\n            setCandidatesData(updateState);\r\n           \r\n          }\r\n          setLoader(false);\r\n          });   \r\n      \r\n          \r\n    \r\n    }\r\n    })\r\n    .catch(function (error) {\r\n    console.log(error);\r\n    }); \r\n    \r\n    }\r\n\r\n\r\n  function handleAddNotes(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/addCandidateNotes`,\r\n        data: {\r\n          candidateId: candidatesEdit.id,\r\n          message: values.message,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  const [requirementId, setRequirementId] = useState(null);\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setSearch(\"\");\r\n    setRequirementId(null);\r\n    setSearch(\"\");\r\n    history.push(\"/app/cc_candidates?search=\");\r\n     sessionStorage.removeItem('recruitmentId');\r\n    forceUpdate();\r\n  };\r\n\r\n  const [dropReasonOpen, setDropReasonOpen] = useState(false);\r\n\r\n  const handleDropReasonOpen = () => {\r\n    \r\n    setDropReasonOpen(true);\r\n    setStatusOpen(false); \r\n  };\r\n\r\n  const handleDropReasonClose = () => {\r\n    setDropReasonOpen(false);\r\n  };\r\n\r\n  const reasonRef =useRef()\r\n\r\n  const [reasonOpen, setReasonOpen] = useState(false);\r\n\r\n  const handleReasonOpen = () => {  \r\n    setStatusOpen(false);\r\n    setStatusNewOpen(false);\r\n    setReasonOpen(true); \r\n  };\r\n\r\n  const handleReasonClose = () => {\r\n    setReasonOpen(false);\r\n  };\r\n\r\n  const [ changeMessageOpen, setChangeMessageOpen] = useState(false);\r\n \r\n  const handleChangeMessageOpen = () => {\r\n    setChangeMessageOpen(true);\r\n    handleStatusClose();\r\n  };\r\n\r\n  const handleChangeMessageClose = () => {\r\n    setChangeMessageOpen(false);\r\n  };\r\n\r\n  function getFilterData() {\r\n    sessionStorage.removeItem('recruitmentId');\r\n    const form = filterRef.current;\r\n    if (form[\"fromDate\"].value > form[\"toDate\"].value) {\r\n      handleNotificationCall(\"error\", \"Check your selected dates\");\r\n      return\r\n    }\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      search: `${form[\"search\"].value}`,\r\n      requirementId: sessionStorage.getItem(\"recruitmentId\")!==null? sessionStorage.getItem(\"recruitmentId\") : requirementId?.id\r\n\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          \r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/requirementList`,\r\n      data: {\r\n        page: \"1\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setRequirement(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      search: `${form[\"search\"].value}`,\r\n      requirementId: sessionStorage.getItem(\"recruitmentId\")!==null? sessionStorage.getItem(\"recruitmentId\") : `${form[\"recruitmentId\"].value}`\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myCandidates`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n  function DropStatus(values) {\r\n     \r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`;\r\n    setLoader(true);\r\n\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id,\r\n          droppedReason: values.reason\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id); \r\n          handleDropReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  function changeStcStatus() {\r\n     \r\n    setLoader(true);\r\n\r\n    var url = `${process.env.REACT_APP_SERVER}recruiter/updateStcStatus`;\r\n \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id, \r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id); \r\n          handleChangeMessageClose(); \r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    \r\n  }\r\n\r\n  function OfferDeclineStatus(values) {\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/updateOfferDeclineStatus`,\r\n        data: {\r\n          candidateId: shortList.id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id); \r\n          handleStatusNewClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  \r\n  const [recruitmentId, setRecruitmentId]  = useState(\"\");\r\n\r\n\r\n  function handleAdd(values) {  \r\n \r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n      } else {\r\n        setAddList(values);\r\n\r\n \r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n          \r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem('firstName'),\r\n              rec_mobile_no: localStorage.getItem('mobile'),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n\r\n            CheckAlreadyExit(values);\r\n\r\n          \r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\nfunction CheckAlreadyExit(addList){\r\n \r\n  var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n    data: {\r\n      email: addList.email,\r\n      firstName: addList.firstName,\r\n      lastName: addList.lastName,\r\n      mobile: addList.mobile,\r\n      requirementId: recruitmentId,\r\n      skills: addList.skills,\r\n      sourceId: addList.source,\r\n      isAnswered: candidate.freeValue,\r\n      message: \"\",\r\n      experience:addList.experience,\r\n      currentLocation: addList.location,\r\n      alternateMobile:addList.alternateMobile,\r\n      preferredLocation:addList.preferredLocation,\r\n      nativeLocation:addList.native,\r\n       relevantExperience:addList.relevantExperience,\r\n      currentCtc:addList.currentCtc,\r\n      expectedCtc:addList.expectedCtc,\r\n      dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n      noticePeriod:addList.noticePeriod,\r\n      reasonForJobChange:addList.reasonForJobChange,\r\n      candidateProcessed:addList.candidateProcessed,\r\n      differentlyAbled:addList.differentlyAbled,\r\n      educationalQualification:addList.educationalQualification,\r\n      gender:addList.gender,\r\n      reason: addList.reason, \r\n      candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n      candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n      candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n      candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n      sendMessage: \"\"  \r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n    \r\n    if (response.data.status === true) { \r\n  \r\n      handleClickOpen();\r\n\r\n} \r\n// else{\r\n//   handleNotificationCall(\"error\", response.data.message);\r\n\r\n// }\r\n});\r\n}\r\n\r\n  function handleEdit(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      var dob = values.day+\"-\"+values.month+\"-\"+values.year;\r\n      \r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/editCandidate`,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience:values.experience, \r\n          currentLocation: values.location, \r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile:values.alternateMobile,\r\n          preferredLocation:values.preferredLocation,\r\n          nativeLocation:values.native,\r\n           relevantExperience:values.relevantExperience,\r\n          currentCtc:values.currentCtc,\r\n          expectedCtc:values.expectedCtc,\r\n          dob: values.day===undefined? candidatesEdit.dob : dob!== \"--\"?  dob: candidatesEdit.dob,\r\n          noticePeriod:values.noticePeriod,\r\n          reasonForJobChange:values.reasonForJobChange,\r\n          candidateProcessed:values.candidateProcessed,\r\n          differentlyAbled:values.differentlyAbled,\r\n          educationalQualification:values.educationalQualification,\r\n          gender:values.gender,\r\n          reason: values.reason, \r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }) \r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n \r\n \r\n            if(file !== undefined ){\r\n              if(file?.length !== 0){\r\n              uploadResume(file, response.data.candidateDetailsId); \r\n            }}\r\n\r\n            if(assessment !== undefined ){\r\n              if(assessment?.length !== 0){\r\n                uploadAssessment(assessment, response.data.candidateId);\r\n              }\r\n             } \r\n\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            updateData(candidatesEdit.id); \r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n            setLoader(false);\r\n          } \r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n \r\n  function handleAddList(send) {\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year; \r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience:addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile:addList.alternateMobile,\r\n        preferredLocation:addList.preferredLocation,\r\n        nativeLocation:addList.native,\r\n         relevantExperience:addList.relevantExperience,\r\n        currentCtc:addList.currentCtc,\r\n        expectedCtc:addList.expectedCtc,\r\n        dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n        noticePeriod:addList.noticePeriod,\r\n        reasonForJobChange:addList.reasonForJobChange,\r\n        candidateProcessed:addList.candidateProcessed,\r\n        differentlyAbled:addList.differentlyAbled,\r\n        educationalQualification:addList.educationalQualification,\r\n        gender:addList.gender,\r\n        reason: addList.reason, \r\n        candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName:addList.currentCompanyName,\r\n        sendMessage: send  \r\n        \r\n      }\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience:addList.experience,\r\n         currentLocation: addList.location,\r\n         alternateMobile:addList.alternateMobile,\r\n         preferredLocation:addList.preferredLocation,\r\n         nativeLocation:addList.native,\r\n          relevantExperience:addList.relevantExperience,\r\n         currentCtc:addList.currentCtc,\r\n         expectedCtc:addList.expectedCtc,\r\n         dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n         noticePeriod:addList.noticePeriod,\r\n         reasonForJobChange:addList.reasonForJobChange,\r\n         candidateProcessed:addList.candidateProcessed,\r\n         differentlyAbled:addList.differentlyAbled,\r\n         educationalQualification:addList.educationalQualification,\r\n         gender:addList.gender,\r\n         reason: addList.reason, \r\n         candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n         candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n         candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n         candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,\r\n         currentCompanyName:addList.currentCompanyName,\r\n        sendMessage: send\r\n       }\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n    \r\n      if (response.data.status === true) {\r\n        handleClose();\r\n\r\n         var message =\"\";\r\n\r\n        if(file !== undefined ){\r\n          if(file?.length !== 0){\r\n          uploadResume(file, response.data.candidateDetailsId); \r\n        }\r\n      }\r\n\r\n      if(assessment !== undefined ){\r\n        if(assessment?.length !== 0){\r\n          uploadAssessment(assessment, response.data.candidateId);\r\n      }}\r\n\r\n        if (send === true) {  \r\n        if (candidate.freeValue === \"YES\") {\r\n          message = messageRef.current.value;\r\n\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=+91\" +\r\n              addList.mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        } else {\r\n          message =  \"Hi \" +   requirementList.cand1_name + \", Can we chat today about a job opening \" +  localStorage.getItem('firstName') +\r\n          \", \" +   localStorage.getItem('mobile') +  \", \" +  localStorage.getItem('companyName') +   \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n          handleMessage(\r\n            response.data.candidate_mobile,\r\n            message,\r\n            response.data.candidateId,\r\n          );\r\n        }\r\n      }\r\n\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        forceUpdate();\r\n        setState({ ...state, right: false });\r\n        reset();\r\n      } else {\r\n       \r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function getCanididateResumeInfo(candidateData,candidateDetail) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/getCanididateResumeInfo`,\r\n      data: {\r\n        id:candidateData\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setResumeParsedData({\r\n          data:response.data?.data,\r\n          candidateName: candidateDetail?.firstName + \" \"+ candidateDetail?.lastName,\r\n        })\r\n        const responsedData = JSON.stringify(response.data?.data)\r\nconst candidateFullName = candidateDetail?.firstName + \" \"+ candidateDetail?.lastName\r\n        sessionStorage.setItem('candidateResume',responsedData)\r\nsessionStorage.setItem('candidateName',candidateFullName)\r\n        window.open(`/v1#/app/parsed_resume`,'_blank')\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\nfunction uploadResume(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"resume\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n      // aiResumeUpload(data)\r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n  function handleMessage(mobile, message, candidateId) {\r\n    var url = \"\";\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"first_message\",\r\n        vars: [\r\n          requirementList.cand1_name,\r\n          requirementList.rec_name,\r\n          requirementList.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: requirementList.cand1_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        setLoader(false);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n      \r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id); \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n   \r\n      if (response.data.status === true) {\r\n         \r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function changeStatus(send, message, status, candidateId) {\r\n    setLoader(true);\r\n    const template_name =\r\n    shortList.statusCode === 303\r\n       ? \"1st_interview_round\"\r\n       : shortList.statusCode === 3031\r\n       ? \"initial_interview_rounds\"\r\n       : shortList.statusCode === 304\r\n       ? status === \"Schedule Another Interview\"\r\n         ? \"initial_interview_rounds\"\r\n         : status === \"Schedule Final Interview\"\r\n         ? \"final_interview_round\"\r\n         : status === \"Send Document\"\r\n         ? \"document_collect\"\r\n         : \"\"\r\n       : shortList.statusCode === 3041\r\n       ? \"document_collect\"\r\n       : shortList.statusCode === 305\r\n       ? \"salary_breakup_shared_confirmation\"\r\n       : shortList.statusCode === 307\r\n       ? \"offer_released_confirmation\"\r\n       : shortList.statusCode === 308\r\n       ? status === \"Joining Confirmation\"\r\n         ? \"joining_confirmation\"\r\n         : \"\"\r\n       : \"\";\r\n\r\n    const vars =\r\n      shortList.statusCode === 308\r\n        ? [\r\n            shortList.cand_name,\r\n            shortList.job_id, \r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ]\r\n        : [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ];\r\n\r\n    var url = \"\";\r\n    if (shortList.free === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        sendMessage: send,\r\n        candidateId: candidateId,\r\n        phone_number: shortList.cand_mobile,\r\n        template_name: template_name,\r\n        vars: vars,\r\n        message: message,\r\n        candidate_name: shortList.cand_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        if (shortList.free === \"YES\" && send === true) {\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=\" +\r\n              shortList.cand_mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        }\r\n\r\n        updateData(candidateId); \r\n        setState({ ...state, right: false });\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n    \r\n      \r\n    });\r\n\r\n   \r\n  }\r\n\r\n  function joinedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateJoinedStatus`,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        joinedDate: joiningRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function updateJoiningDitchedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateJoiningDitchedStatus`,\r\n      data: {\r\n        candidateId: shortList.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  const ExistCheck=(e)=>{\r\n\r\n    if(recruitmentId!==\"\"){\r\n\r\n      CheckExitAlready(recruitmentId, e);\r\n\r\n    } else{\r\n      handleNotificationCall(\"error\", \"Select Requirement\");\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n  function CheckExitAlready(recruitmentId, e) {\r\n  var data = {}; \r\n  var url=\"\";\r\n\r\n  if(e.target.name === \"email\"){\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      email: e.target.value\r\n    } \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`\r\n  } else {\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      mobile: e.target.value\r\n    }  \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`\r\n  }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n       if (response.data.status === true) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n  \r\n    })\r\n  }\r\n\r\n  function cvMatchingPercentage(id,requirementId) {\r\n\r\n    setMatchLoading(true)\r\n    const isRequirementIdExist = resumePercentage.some(item => item.requirementId === requirementId);\r\n    if (isRequirementIdExist) {\r\n      setMatchLoading(false)\r\n      handleNotificationCall(\"error\", \"Requirement already exists in the match list.\");\r\n      return;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/jdMatcher`,\r\n      data: {\r\n        id: id,\r\n        requirementId: requirementId\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then((response) => {\r\n      if (response.data.status === true) {\r\n        \r\n        const previousPercentage = [...resumePercentage];\r\n\r\n        const newPercentageItem = {\r\n          description: response.data?.data,\r\n          requirementName: response.data?.requirementName,\r\n          requirementId: response.data?.requirementId\r\n        };\r\n\r\n        previousPercentage.push(newPercentageItem);\r\n\r\n        setResumePercentage(previousPercentage);\r\n      } else if (response.data.status === false) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n      setMatchLoading(false)\r\n    });\r\n  }\r\n\r\n  const removePercentage = (requirementIdToRemove) => {\r\n    const updatedPercentage = resumePercentage.filter(item => item.requirementId !== requirementIdToRemove);\r\n    setResumePercentage(updatedPercentage);\r\n  };\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"VIEW\") {\r\n      setDataList(\"VIEW\");\r\n    } else {\r\n      setDataList(\"NOTES\");\r\n    }\r\n    if (name !== \"NOTES\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/candidate`,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n \r\n            setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc: response.data.data.requirement?.recruiter?.firstName + \" \" +  response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              resume:response.data.data.candidateDetail?.resume, \r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              isCandidateCpv: response.data.data.isCandidateCpv,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile?.substring(2),\r\n              resume:response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n             });\r\n\r\n            setState({ ...state, right: true });\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/getAllCandidateStatus`,\r\n          data: {\r\n            id: values,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n \r\n            if (response.data.status === true) {\r\n\r\n        setListCanditate(response.data.data);\r\n\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n    \r\n    } else {\r\n      setCandidatesEdit({\r\n        ...candidatesEdit,\r\n        id: values,\r\n      });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/viewCandidateNotes`,\r\n        data: {\r\n          candidateId: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setCandidatesNote(response.data.data);\r\n          setState({ ...state, right: true });\r\n          setLoader(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n \r\n  \r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n      \r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Oops! Matching record could not be found',\r\n      }\r\n    },\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    search: false,\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    rowsPerPage: 50,\r\n\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery===true? 'vertical' : 'standard',\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n              <Bar\r\n                title=\"Candidates\"\r\n                list={list}\r\n              />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n  const components = {\r\n    ExpandButton: function(props) { \r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [stausOpen, setStatusOpen] = React.useState(false);\r\n  const [stausNewOpen, setStatusNewOpen] = React.useState(false);\r\n  const [dropOpen, setDropOpen] = React.useState(false);\r\n  const [messageOpen, setMessageOpen] = React.useState(false);\r\n\r\n   \r\n  const [candidate, setCandidate] = useState({\r\n    requirementId:\"\",\r\n    source:\"\",\r\n    email:\"\", \r\n    firstName:\"\",\r\n    lastName:\"\",\r\n    skills:\"\",  \r\n    location:\"\", \r\n    experience:null,    \r\n     candidateProcessed:\"\",\r\n    native:\"\",\r\n    preferredLocation:\"\",\r\n    relevantExperience:null,\r\n    educationalQualification:\"\",\r\n    gender:\"\",\r\n    differentlyAbled:\"\",\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    dob:\"\", \r\n    freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n\r\n}); \r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleStatusOpen = () => {\r\n    setStatusOpen(true);\r\n  };\r\n\r\n  const handleStatusClose = () => {\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleStatusNewOpen = () => {\r\n    setStatusNewOpen(true);\r\n  };\r\n\r\n  const handleStatusNewClose = () => {\r\n    setStatusNewOpen(false);\r\n  };\r\n\r\n  const handleMessageOpen = () => {\r\n    setMessageOpen(true);\r\n  };\r\n\r\n  const handleMessageClose = () => {\r\n    setMessageOpen(false);\r\n  };\r\n\r\n  const [view, setView] = useState(\"\");\r\n\r\n  function sendMessage(candidateId, mobile, message, candidate_name, list) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"general_message\",\r\n        vars: [\r\n          candidate_name,\r\n          list.rec_name,\r\n          list.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: candidate_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n\r\n          setLoader(false);\r\n          handleMessageClose();\r\n          handleNotificationCall(\"success\", response.data.message); \r\n\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  function dropConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/DropCandidate`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setDropOpen(false);\r\n        updateData(id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function reverseConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}CC/resetStatus`, \r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setReverseOpen(false);\r\n        setLoader(false);\r\n        updateData(id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n          file={file}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation }\r\n          show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) : dataList === \"ADD\" ? (\r\n      <>\r\n        <Add\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          handleAddList={handleAddList}\r\n          register={register}\r\n         \r\n          source={source}\r\n         \r\n          recruitmentList={recruitmentList}\r\n          handleClose={handleClose}\r\n          errors={errors}\r\n          setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          setLoader={setLoader}\r\n          toggleDrawer={toggleDrawer}\r\n          setRecruitmentList={setRecruitmentList}\r\n          requirementList={requirementList}\r\n          handleSubmit={handleSubmit}\r\n          handleAdd={handleAdd}\r\n          requirement={requirement}\r\n          setValue={setValue}\r\n          isSubmitting={isSubmitting}\r\n          open={open}\r\n          messageRef={messageRef}\r\n          reset={reset}           \r\n          setCandidate={setCandidate}\r\n          candidate={candidate}\r\n          setFile={setFile}\r\n           file={file}\r\n          setRecruitmentId={setRecruitmentId}\r\n          recruitmentId={recruitmentId}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          setPhoneValidation={setPhoneValidation }\r\n          setHideContactDetails={setHideContactDetails}\r\n          hideContactDetails={hideContactDetails}\r\n          ExistCheck={ExistCheck} \r\n          requirementId={\"true\"}\r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Note\r\n          toggleDrawer={toggleDrawer}\r\n          candidatesNote={candidatesNote}\r\n          noteCandidates={noteCandidates}\r\n          noteErrors={noteErrors}\r\n          handleAddNotes={handleAddNotes}\r\n          noteSubmit={noteSubmit}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          <PageTitle title=\"Candidates\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n          <div className={classes.lgButton}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddCircleIcon />}\r\n              size=\"small\"\r\n              className={classes.margin}\r\n              color=\"primary\"\r\n              onClick={(e) => {\r\n                setDataList(\"ADD\");\r\n                setCandidate({\r\n                  ...candidate,\r\n                  requirementId:\"\",\r\n                  source:\"\",\r\n                  email:\"\", \r\n                  firstName:\"\",\r\n                  lastName:\"\",\r\n                  skills:\"\",  \r\n                  location:\"\", \r\n                  experience:null,   \r\n                  gender:\"\",\r\n                  differentlyAbled:\"\", \r\n                  candidateProcessed:\"\",\r\n                  native:\"\",\r\n                  preferredLocation:\"\",\r\n                  relevantExperience:null,\r\n                  educationalQualification:\"\", \r\n                  currentCtc:null,\r\n                  expectedCtc:null,\r\n                  noticePeriod:\"\",\r\n                  reasonForJobChange:\"\",\r\n                  reason:\"\",\r\n                  dob:\"\", \r\n                  candidateRecruiterDiscussionRecording:\"\", \r\n                  candidateSkillExplanationRecording:\"\",\r\n                  candidateMindsetAssessmentLink:\"\",\r\n                  candidateAndTechPannelDiscussionRecording:\"\",\r\n                  freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n  \r\n                 });\r\n                 setPhoneValidation(false);\r\n                setValidation(false);\r\n                setRecruitmentId(\"\");\r\n                setFile([]);\r\n                setState({ ...state, right: true });\r\n              }}\r\n            >\r\n              Add New Candidate\r\n            </Button>\r\n          </div>\r\n          <div className={classes.smButton}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddCircleIcon />}\r\n              size=\"small\"\r\n              className={classes.margin}\r\n              color=\"primary\"\r\n              onClick={(e) => {\r\n                setDataList(\"ADD\");\r\n                reset();\r\n                setValidation(false);\r\n                setState({ ...state, right: true });\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{ paper: dataList===\"VIEW\" || dataList===\"NOTES\"? classes.drawer: classes.clientDrawer }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n          <TextField \r\n          label=\"Search\"\r\n            type=\"text\"\r\n            name=\"search\" \r\n            placeholder=\"Enter Candidate Unique ID/Name/Email/Mobile (eg: 91XXXXXXXXXX)\"\r\n            InputLabelProps={{ shrink: true }}\r\n             value={search}\r\n            defaultValue={search}\r\n            onChange={(e) => {\r\n              setSearch(e.target.value);\r\n            }}\r\n            \r\n           \r\n            className={classes.searchWidth} \r\n          />\r\n\r\n          <Autocomplete\r\n            className={classes.filterFullWidth}\r\n            options={requirementName}\r\n            getOptionLabel={(option) =>\r\n              option.requirementName + \" (\" + option.uniqueId + \")\"\r\n            }\r\n            // size=\"small\"\r\n            value={requirementId}\r\n            onChange={(event, value) => \r\n              {\r\n                setRequirementId(value);\r\n                \r\n\r\n              }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"requirementId\"\r\n                label=\"Requirement\"\r\n                size=\"small\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n\r\n          <TextField\r\n             \r\n            name=\"fromDate\"\r\n           label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n            \r\n          />\r\n\r\n          <TextField\r\n            \r\n            name=\"toDate\"\r\n           label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n            \r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n           components={components}\r\n            options={table_options}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n\r\n              {\r\n                name: \"Resume\",\r\n              },\r\n              {\r\n                name: \"View Candidate\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <Actions\r\n                  index={index}\r\n                  item={item}\r\n                  reset={reset}\r\n                  editreset={editreset}\r\n                  noteReset={noteReset}\r\n                  setCandidateList={setCandidateList}\r\n                  handleMessageOpen={handleMessageOpen}\r\n                  candidateList={candidateList}\r\n                  handleDropOpen={handleDropOpen}\r\n                  handleReverseOpen={handleReverseOpen}\r\n                  handleShow={handleShow}\r\n                  setFile={setFile}\r\n                  setAssessment={setAssessment}\r\n                  setCandidatesChange={setCandidatesChange} \r\n                  setPhoneValidation={setPhoneValidation }\r\n                  handleUse={handleUse}\r\n                />,\r\n                item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item}\r\n                      handleStatusOpen={handleStatusOpen}\r\n                      handleStatusNewOpen={handleStatusNewOpen}\r\n                      setValidation={setValidation}\r\n                      setShortList={setShortList}\r\n                      shortList={shortList}\r\n                      setView={setView}\r\n                      view={view}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n                <> {item.candidateDetail?.firstName + \" \" +  item.candidateDetail?.lastName}   <br/>  {\" (\" +  item.uniqueId +   \")\"}</>,\r\n              \r\n                item.mainId === decode.mainId ? \r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n                : item.hideContactDetails !== true?\r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n                :\"\",\r\n              <> {item.requirement?.requirementName}  <br/> { \"(\" +   item.requirement?.uniqueId +  \")\"} </> ,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName,\r\n                item.requirement?.recruiter?.firstName +  \" \" +  item.requirement?.recruiter?.lastName,\r\n              \r\n              <>{item.candidateDetail?.resume !== \"https://liverefo.s3.amazonaws.com/\" ? ( <>   <Grid container className={classes.space}>     <Grid item xs className={classes.toolAlign}>      \r\n<Tooltip         title=\"View Resume\"         placement=\"bottom\"         aria-label=\"view\"       >         \r\n  <DescriptionIcon           className={classes.toolIcon}           onClick={()=>{ handleResumeOpen(); setFile([\r\n    {\r\n      url: item.candidateDetail?.resume\r\n    }\r\n  ])}}         />      \r\n</Tooltip>\r\n{/* <Tooltip         title=\"Downlaod Resume\"         placement=\"bottom\"         aria-label=\"downlaod\"       > \r\n  <a href={item.candidateDetail?.resume} download>  <GetAppIcon className={classes.toolIcon} />    </a>      \r\n</Tooltip>      */}\r\n</Grid>   </Grid> </> ) : ( \"No Resume Found\" )}</>,\r\n              \r\n                <Tooltip         title=\"View Candidate\"         placement=\"bottom\"         aria-label=\"view\"       > \r\n                  <ViewIcon\r\n                  onClick={(e) => {\r\n                        handleShow(item.id, \"VIEW\");\r\n                      }}\r\n                      className={classes.toolIcon}\r\n                    \r\n                    />\r\n                </Tooltip>,\r\n                // <Tooltip\r\n                //   title=\"Match JD\"\r\n                //   placement=\"bottom\"\r\n                //   aria-label=\"view\"\r\n                // >\r\n                //   <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n                //     onClick={(e) => {\r\n                //       handleJDOpen();\r\n                //       cvMatchingPercentage(item.id);\r\n                //       setCandidMatchId(item.id);\r\n                //     }}>\r\n                //     %\r\n                //   </div>\r\n                // </Tooltip>,\r\n                // <Tooltip\r\n                //   title=\"Get Resume Info\"\r\n                //   placement=\"bottom\"\r\n                //   aria-label=\"view\"\r\n                // >\r\n                //   <div className={classes.toolIcon+\" \"+classes.resumeUploadParent} \r\n                //     onClick={(e) => {\r\n                //       getCanididateResumeInfo(item.candidateDetailId,item.candidateDetail);\r\n                //     }}>\r\n                //     i\r\n                //   </div>\r\n                // </Tooltip>,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Message\r\n        setState={setState}\r\n        state={state}\r\n        candidateList={candidateList}\r\n        decode={decode}\r\n        sendMessage={sendMessage}\r\n        handleMessageOpen={handleMessageOpen}\r\n        messageOpen={messageOpen}\r\n        handleMessageClose={handleMessageClose}\r\n      />\r\n\r\n      <Dialogs\r\n        handleStatusClose={handleStatusClose}\r\n        handleStatusNewClose={handleStatusNewClose}\r\n        validation={validation}\r\n        stausOpen={stausOpen}\r\n        stausNewOpen={stausNewOpen}\r\n        changeStatus={changeStatus}\r\n        shortList={shortList}\r\n        view={view}\r\n        setView={setView}\r\n        joinedStatus={joinedStatus}\r\n        updateJoiningDitchedStatus={updateJoiningDitchedStatus}\r\n        OfferDeclineStatus={OfferDeclineStatus}\r\n        joiningRef={joiningRef}\r\n        saveOnly={saveOnly}\r\n        setSaveOnly={setSaveOnly}\r\n        \r\n        dropCandidates ={ dropCandidates}\r\n        dropErrors={dropErrors}\r\n        dropSubmit={dropSubmit}\r\n        dropReset={dropReset}\r\n        DropStatus={DropStatus}\r\n        handleDropReasonClose={handleDropReasonClose}\r\n        dropReasonOpen={dropReasonOpen}\r\n        handleDropReasonOpen={handleDropReasonOpen}\r\n        changeMessageOpen={changeMessageOpen}\r\n        handleChangeMessageClose={handleChangeMessageClose}\r\n        changeStcStatus={changeStcStatus}\r\n        handleChangeMessageOpen={handleChangeMessageOpen}\r\n\r\n        reasonRef={reasonRef} \r\n        handleReasonOpen={handleReasonOpen}\r\n        reasonOpen={reasonOpen}\r\n        handleReasonClose={handleReasonClose}\r\n      />\r\n\r\n      <Drop\r\n        handleDropClose={handleDropClose}\r\n        dropOpen={dropOpen}\r\n        dropConfirmation={dropConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n<Reverse\r\n        handleReverseClose={handleReverseClose}\r\n        reverseOpen={reverseOpen}\r\n        reverseConfirmation={reverseConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n<ResumeDialog\r\n       resume={file}\r\n       resumeOpen={resumeOpen}\r\n       handleResumeClose={handleResumeClose}\r\n      />\r\n\r\n      {/* <MatchJDDialog\r\n        resumePercentage={resumePercentage}\r\n        requirementName={requirementName}\r\n        matchLoading={matchLoading}\r\n        jDOpen={matchJDOpen}\r\n        handleJDClose={handleJDClose}\r\n        candidMatchId={candidMatchId}\r\n        cvMatchingPercentage={cvMatchingPercentage}\r\n        removePercentage={removePercentage}\r\n      /> */}\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Layout\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\activity\\Activity.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\resumeSearch\\ResumeSearch.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\activity\\CandidateActivity.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\requirements\\Requirements.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\activity\\FreeMsgActivity.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\forget\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\ParsedResume.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\requirements\\AssignRequirements.js",["762"],"import React, { useEffect, useReducer, useRef, useState } from \"react\";\r\nimport {\r\n  Backdrop,\r\n  Box,\r\n  Button,\r\n  CircularProgress, \r\n  Grid, \r\n  List,\r\n  SwipeableDrawer, \r\n  TablePagination,\r\n  TextField,\r\n  Typography, \r\n  Dialog,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n// components\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardMedia\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport RemoveRedEyeIcon from \"@material-ui/icons/RemoveRedEye\";\r\nimport { useHistory } from \"react-router-dom\"; \r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport { toast } from \"react-toastify\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\n// data\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n import axios from \"axios\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport { useForm } from \"react-hook-form\";\r\n \r\nimport * as Yup from \"yup\";\r\nimport Notification from \"../../components/Notification\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport useStyles from \"../../themes/style.js\";\r\n import PublishIcon from '@material-ui/icons/Publish';\r\nimport Add from \"../../components/Candidates/Add\";\r\n\r\n import useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"jodit/build/jodit.min.css\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const mobileQuery = useMediaQuery('(max-width:600px)'); \r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n\r\n  const [count, setCount] = useState(0); \r\n  const [file, setFile] = useState([]); \r\n  const [assessment,setAssessment] = useState([]);\r\n  const [hideContactDetails,setHideContactDetails] = useState(false);\r\n\r\n  const [loader, setLoader] = useState(false);\r\n \r\n  const [requirementsData, setRequirementsData] = useState([]);\r\n \r\n\r\n  const [requirementsView, setRequirementsView] = useState({\r\n    id: \"\",\r\n    requirementName: \"\",\r\n    clientId: \"\",\r\n    skills: \"\",\r\n    orgRecruiterId: \"\",\r\n    orgRecruiterName: \"\",\r\n    jobLocation: \"\",\r\n    experience: \"\",\r\n    uniqueId: \"\",\r\n    clientUniqueId: \"\",\r\n    clientName: \"\",\r\n    gist:\"\",\r\n    jd:\"\",\r\n    hideFromInternal:\"\",\r\n    modeOfWork:\"\",\r\n    specialHiring:\"\",\r\n    status: \"\",\r\n    candidateCount:\"\",\r\n    createdAt: \"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n\r\n  const [dataList, setDataList] = useState(\"View\"); \r\n  var [errorToastId, setErrorToastId] = useState(null); \r\n  \r\n  const [modalOpen, setModalOpen] = React.useState(false); \r\n\r\n  const handleModalClose = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const handleModalOpen = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n \r\n \r\n  useEffect(() => {\r\n\r\n    if(decode.role !== \"SUPERADMIN\"){\r\n \r\n   \r\n    const getRequirementName = async () => {\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url:  `${process.env.REACT_APP_SERVER}recruiter/getAssignedRequierments`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setRequirementName(response.data.data);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n   \r\n    getRequirementName();\r\n   }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps  \r\n}, [token]);\r\n\r\n\r\n \r\n\r\n \r\n  useEffect(() => {\r\n \r\n    const fetchData = async () => {\r\n      setLoader(true);\r\n\r\n  \r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/myAssignedRequirements`,\r\n        data: {\r\n          page: 1,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setRequirementsData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    const getRequirementName = async () => {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/getAllRequirementList`,\r\n        data: {\r\n          page:1,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setRequirementName(response.data.data);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n    getRequirementName();\r\n  }, [reducerValue, token]);\r\n\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n  const [requirementName, setRequirementName] = useState([]);\r\n   const [requirementId, setRequirementId] = useState(null);\r\n  const [recruiterId, setRecruiterId] = useState(null);\r\n\r\n  const filterRef = useRef(null);\r\n\r\n \r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setRecruiterId(null);\r\n    setRequirementId(null);\r\n    forceUpdate();\r\n  };\r\n\r\n  function getFilterData() {\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    const form = filterRef.current;\r\n \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myAssignedRequirements`,\r\n      data: JSON.stringify({\r\n        page: 1,\r\n        fromDate: `${form[\"fromDate\"].value}`,\r\n        toDate: `${form[\"toDate\"].value}`,\r\n        recruiterId: recruiterId?.id,\r\n        requirementId: requirementId?.id,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setRequirementsData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n  \r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/myAssignedRequirements`,\r\n      data: JSON.stringify({\r\n        page: newPage + 1,\r\n        fromDate: `${form[\"fromDate\"].value}`,\r\n        toDate: `${form[\"toDate\"].value}`,\r\n        recruiterId: recruiterId?.id,\r\n        requirementId: requirementId?.id,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setRequirementsData(response.data.data);\r\n        setCount(response.data.count);\r\n       \r\n      }\r\n      setLoader(false);\r\n    });\r\n  };\r\n \r\n  function handleShow(values, name) {\r\n \r\n    setLoader(true);\r\n    setDataList(name);\r\n   \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n      data: {\r\n        id: values,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        \r\n         if (response.data.status === true) {  \r\n        \r\n         \r\n          setRequirementsView({\r\n            ...requirementsView,\r\n            id: response.data.data.id,\r\n            requirementName: response.data.data.requirementName,\r\n            clientId: response.data.data.clientId,\r\n            skills: response.data.data.skills,\r\n            orgRecruiterId: response.data.data.orgRecruiter.id,\r\n            orgRecruiterName: response.data.data.orgRecruiter.name,\r\n            jobLocation: response.data.data.jobLocation,\r\n            experience: response.data.data.experience,\r\n            uniqueId: response.data.data.uniqueId,\r\n            clientUniqueId: response.data.data.client.uniqueId,\r\n            clientName: response.data.data.client.clientName,\r\n            status: response.data.data.statusList,\r\n            gist:  response.data.data.gist,\r\n            jd: response.data.data.requirementJd,\r\n            modeOfWork:response.data.data.modeOfWork,\r\n            specialHiring: response.data.data.specialHiring,\r\n            hideFromInternal: response.data.data.hideFromInternal,\r\n            candidateCount: response.data.candidateCount,\r\n            createdAt: response.data.data.createdAt,\r\n          });\r\n          setState({ ...state, right: true });  \r\n          \r\n          setLoader(false);\r\n        }  else{\r\n          setLoader(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n   const [state, setState] = useState({\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n \r\n\r\n  \r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n\r\n      \r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n \r\n \r\n\r\n   /** Start Candidate*/\r\n   const [source, setSource] = useState([]); \r\n   const messageRef=useRef(); \r\n  const [recruitmentId, setRecruitmentId]  = useState(\"\"); \r\n  const [addList, setAddList] = useState([]); \r\n  const [phoneValidation, setPhoneValidation] = useState(false); \r\n  const [recruitmentList, setRecruitmentList] = useState([]); \r\n  const [validation, setValidation] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n\r\n  const [ setDay] = useState(\"\");\r\n  const [ setMonth] = useState(\"\");\r\n  const [ setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n   \r\n      \r\n  const candidateSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required'),\r\n    firstName: Yup.string().required('First Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string().max(255).required('Last Name is required')\r\n    .max(255)\r\n    .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n      message: \"Last Name be Alphanumeric\",\r\n    }),\r\n    mobile: Yup.string().required('Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string(),\r\n    skills: Yup.string().required('Skill is required'),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    location: Yup.string().nullable().notRequired(),  \r\n    alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n     month: Yup.string().nullable().notRequired(),\r\n     year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().nullable().required('Gender is required'),\r\n    educationalQualification: Yup.string().nullable().notRequired(), \r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(), \r\n    native: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const {\r\n    register:  candidateRegister,\r\n    formState: { errors:   candidateErrors, isSubmitting:  candidateIsSubmitting },\r\n    handleSubmit:  candidateSubmit,\r\n    reset:  candidateReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(candidateSchema),\r\n  });\r\n\r\n  const ExistCheck=(e)=>{\r\n\r\n\r\n  //   if ( decode.role === \"SUBVENDOR\" || decode.role ===  \"FREELANCER\") {\r\n  //     CheckExitAlready(recruitmentId, e);\r\n\r\n  //   } else{ \r\n   \r\n  //     if(recruitmentId!==\"\"){\r\n\r\n    \r\n  //       CheckExitAlready(recruitmentId, e);\r\n  //   } else{\r\n  //     handleNotificationCall(\"error\", \"Select Requirement\");\r\n  //   }\r\n\r\n  // }\r\n\r\n  CheckExitAlready(recruitmentId, e);\r\n\r\n  };\r\n\r\n\r\n  function CheckExitAlready(recruitmentId, e) {\r\n  var data = {}; \r\n  var url=\"\";\r\n\r\n  if(e.target.name === \"email\"){\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      email: e.target.value\r\n    } \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`\r\n  } else {\r\n    data =  { \r\n      requirementId: recruitmentId,\r\n      mobile: e.target.value\r\n    }  \r\n    url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`\r\n  }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n       if (response.data.status === true) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }  \r\n  \r\n    })\r\n  }\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  \r\n  \r\n  const [candidate, setCandidate] = useState({\r\n    requirementId:\"\",\r\n    source:\"\",\r\n    email:\"\", \r\n    firstName:\"\",\r\n    lastName:\"\",\r\n    skills:\"\",  \r\n    location:\"\", \r\n    experience:null,    \r\n     candidateProcessed:\"\",\r\n    native:\"\",\r\n    preferredLocation:\"\",\r\n    relevantExperience:null,\r\n    educationalQualification:\"\",\r\n    gender:\"\",\r\n    differentlyAbled:\"\",\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    dob:\"\", \r\n    freeValue:  decode.isEnableFree === true? \"YES\" : decode.isEnablePaid === true? \"NO\": \"YES\",\r\n\r\n}); \r\n\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n\r\n \r\n\r\n  function handleAddCandidate(values) { \r\n \r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n\r\n\r\n      } else {\r\n        setAddList(values);\r\n\r\n \r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n          \r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem('firstName'),\r\n              rec_mobile_no: localStorage.getItem('mobile'),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n \r\n            CheckAlreadyExit(values); \r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\nfunction CheckAlreadyExit(addList){\r\n \r\n  var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n    data: {\r\n      email: addList.email,\r\n      firstName: addList.firstName,\r\n      lastName: addList.lastName,\r\n      mobile: addList.mobile,\r\n      requirementId: recruitmentId,\r\n      skills: addList.skills,\r\n      sourceId: addList.source,\r\n      isAnswered: candidate.freeValue,\r\n      message: \"\",\r\n      experience:addList.experience,\r\n      currentLocation: addList.location,\r\n      alternateMobile:addList.alternateMobile,\r\n      preferredLocation:addList.preferredLocation,\r\n      nativeLocation:addList.native,\r\n       relevantExperience:addList.relevantExperience,\r\n      currentCtc:addList.currentCtc,\r\n      expectedCtc:addList.expectedCtc,\r\n      dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n      noticePeriod:addList.noticePeriod,\r\n      reasonForJobChange:addList.reasonForJobChange,\r\n      candidateProcessed:addList.candidateProcessed,\r\n      differentlyAbled:addList.differentlyAbled,\r\n      educationalQualification:addList.educationalQualification,\r\n      gender:addList.gender,\r\n      reason: addList.reason, \r\n      sendMessage: \"\"  \r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n    \r\n    if (response.data.status === true) { \r\n  \r\n      handleClickOpen();\r\n\r\n} else{\r\n  handleNotificationCall(\"error\", response.data.message);\r\n\r\n}\r\n});\r\n}\r\n\r\n  function handleAddList(send) {\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience:addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile:addList.alternateMobile,\r\n        preferredLocation:addList.preferredLocation,\r\n        nativeLocation:addList.native,\r\n         relevantExperience:addList.relevantExperience,\r\n        currentCtc:addList.currentCtc,\r\n        expectedCtc:addList.expectedCtc,\r\n        dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n        noticePeriod:addList.noticePeriod,\r\n        reasonForJobChange:addList.reasonForJobChange,\r\n        candidateProcessed:addList.candidateProcessed,\r\n        differentlyAbled:addList.differentlyAbled,\r\n        educationalQualification:addList.educationalQualification,\r\n        gender:addList.gender,\r\n        reason: addList.reason, \r\n        candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n        candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,  \r\n        sendMessage: send,\r\n        currentCompanyName:addList.currentCompanyName,  \r\n        \r\n      }\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience:addList.experience,\r\n         currentLocation: addList.location,\r\n         alternateMobile:addList.alternateMobile,\r\n         preferredLocation:addList.preferredLocation,\r\n         nativeLocation:addList.native,\r\n          relevantExperience:addList.relevantExperience,\r\n         currentCtc:addList.currentCtc,\r\n         expectedCtc:addList.expectedCtc,\r\n          dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n         noticePeriod:addList.noticePeriod,\r\n         reasonForJobChange:addList.reasonForJobChange,\r\n         candidateProcessed:addList.candidateProcessed,\r\n         differentlyAbled:addList.differentlyAbled,\r\n         educationalQualification:addList.educationalQualification,\r\n         gender:addList.gender,\r\n         reason: addList.reason, \r\n         candidateRecruiterDiscussionRecording:addList.candidateRecruiterDiscussionRecording, \r\n         candidateSkillExplanationRecording:addList.candidateSkillExplanationRecording,\r\n         candidateMindsetAssessmentLink:addList.candidateMindsetAssessmentLink,\r\n         candidateAndTechPannelDiscussionRecording:addList.candidateAndTechPannelDiscussionRecording,  \r\n        sendMessage: send,\r\n        currentCompanyName:addList.currentCompanyName,\r\n       }\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n    \r\n      if (response.data.status === true) {\r\n        handleClose();\r\n         var message =\"\";\r\n\r\n        if(file !== undefined ){\r\n          if(file?.length !== 0){\r\n          uploadResume(file, response.data.candidateDetailsId); \r\n        }}\r\n\r\n        if(assessment !== undefined ){\r\n          if(assessment?.length !== 0){\r\n            uploadAssessment(assessment, response.data.candidateId);\r\n          }\r\n         }\r\n       \r\n        if (send === true) {  \r\n        if (candidate.freeValue === \"YES\") {\r\n          message = messageRef.current.value;\r\n\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=+91\" +\r\n              addList.mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        } else {\r\n          message =  \"Hi \" +   requirementList.cand1_name + \", Can we chat today about a job opening \" +  localStorage.getItem('firstName') +\r\n          \", \" +   localStorage.getItem('mobile') +  \", \" +  localStorage.getItem('companyName') +   \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n          handleMessage(\r\n            response.data.candidate_mobile,\r\n            message,\r\n            response.data.candidateId,\r\n          );\r\n        }\r\n      }\r\n\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        history.push(\"/app/assign_requirements\") \r\n        setState({ ...state, right: false });\r\n        candidateReset();\r\n\r\n      \r\n      } else {\r\n       \r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  function uploadResume(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"resume\", File);\r\n    data.append(\"id\", Id); \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n   \r\n      if (response.data.status === true) {\r\n        // aiResumeUpload(data)\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id); \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n   \r\n      if (response.data.status === true) {\r\n         \r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n    function handleMessage(mobile, message, candidateId) {\r\n      var url = \"\";\r\n  \r\n      if (candidate.freeValue === \"YES\") {\r\n        url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n      } else {\r\n        url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n      }\r\n  \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: candidateId,\r\n          phone_number: mobile,\r\n          template_name: \"first_message\",\r\n          vars: [\r\n            requirementList.cand1_name,\r\n            requirementList.rec_name,\r\n            requirementList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ],\r\n          message: message,\r\n          candidate_name: requirementList.cand1_name,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n  \r\n          setLoader(false);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n  \r\n        // handleStatusClose();\r\n        // handleStatusNewClose(); \r\n        setLoader(false);\r\n      });\r\n    }\r\n  \r\n    function getmessageIni() {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          localStorage.setItem(\r\n            \"WalletValue\",\r\n            response.data.data.remainingMessages,\r\n            { sameSite: \"strict\", secure: true },\r\n          );\r\n          window.dispatchEvent(new Event(\"storage\"));\r\n        }\r\n      });\r\n    }\r\n  \r\n\r\n  \r\n      useEffect(() => {\r\n        if(decode.role !== \"SUPERADMIN\"){\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n          data: {},\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n            setSource(response.data.data);\r\n          }\r\n        });\r\n      }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps  \r\n      }, [token]);\r\n \r\n   \r\n  /** End Candidate */\r\n\r\n\r\n  const list = (anchor) =>\r\n  ( \r\n          <>\r\n        <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n          <List>\r\n            <Card className={classes.root}>\r\n              <CardHeader>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={1}\r\n                  className={classes.drawerViewHeader}\r\n                >\r\n                  <Grid item xs={10} md={6}>\r\n                    <Typography variant=\"subtitle1\">\r\n                       View Requirement - {requirementsView.requirementName}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={2} lg={6} className={classes.drawerViewClose}>\r\n                    <CloseIcon\r\n                      className={classes.closeBtn}\r\n                      size=\"14px\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardHeader>\r\n\r\n              <CardContent className={classes.drawerViewContent}>\r\n                <Grid container direction=\"row\" spacing={2}>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Requirement Name:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {requirementsView.requirementName +\r\n                      \" (\" +\r\n                      requirementsView.uniqueId +\r\n                      \") \"}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                    {decode.companyType === \"COMPANY\" ? \"Project Name:\" :\"Client Name:\"}\r\n\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {requirementsView.clientName +\r\n                      \" (\" +\r\n                      requirementsView.clientUniqueId +\r\n                      \") \"}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Organization Recruiter Name:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {requirementsView.orgRecruiterName}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Experience:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {requirementsView.experience}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Skills:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {requirementsView.skills}\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Location:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>   {requirementsView.jobLocation}\r\n                  </Grid>\r\n\r\n\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                    Mode of work:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>   {requirementsView.modeOfWork}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                    Special hiring:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>   {requirementsView.specialHiring}\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                    Hide to Internal:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {requirementsView.hideFromInternal=== true? \"YES\" :\"NO\"}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                    JD :\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}> \r\n\r\n                    <div className={classes.space +\" \"+ classes.alignItemsEnd}  > \r\n\r\n  \r\n{ requirementsView?.jd !== \"https://liverefo.s3.amazonaws.com/\"? <>\r\n<Tooltip\r\n      title=\"View JD\"\r\n      placement=\"bottom\"\r\n      aria-label=\"view\"\r\n    >\r\n      <RemoveRedEyeIcon\r\n        className={classes.toolIcon}\r\n        onClick={handleModalOpen}\r\n      />\r\n    </Tooltip>\r\n\r\n    <Tooltip\r\n      title=\"Downlaod JD\"\r\n      placement=\"bottom\"\r\n      aria-label=\"downlaod\"\r\n    >\r\n      <a  className={classes.messageContent} href={requirementsView?.jd} download>\r\n        \r\n        <GetAppIcon className={classes.toolIcon} />\r\n      </a>\r\n    </Tooltip>\r\n    </> :\"\"}\r\n    </div>\r\n\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Requirement Gist:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                   \r\n                    <div dangerouslySetInnerHTML={{ __html: requirementsView.gist }}></div>\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Posted Candidate:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                   \r\n                 \r\n\r\n                  <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.blue}\r\n                            onClick={(e)=>{\r\n                              \r\n                                sessionStorage.setItem('recruitmentId', requirementsView.id);\r\n\r\n                                history.push(\"/app/admin_candidates\");\r\n\r\n                            }}\r\n                          >\r\n                             {requirementsView.candidateCount}\r\n                          </Button>\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Status:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    {requirementsView.status ? (\r\n                      requirementsView.status.statusName === \"ACTIVE\" ? (\r\n                        <>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.green+\" \"+ classes.noPointer}\r\n                          >\r\n                            ACTIVE\r\n                          </Button>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.red+\" \"+ classes.noPointer}\r\n                          >\r\n                            INACTIVE\r\n                          </Button>\r\n                        </>\r\n                      )\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    <Typography className={classes.boldtext}>\r\n                      \r\n                      Posted Date:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                    \r\n                    {moment(requirementsView.createdAt).format(\r\n                      \"DD-MM-YYYY\",\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={2}\r\n                  className={classes.drawerFooter}\r\n                >\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    color=\"secondary\"\r\n                    onClick={toggleDrawer(anchor, false)}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                </Grid>\r\n              </CardActions>\r\n            </Card>\r\n          </List>\r\n        </Box>\r\n      </>\r\n    );\r\n \r\n    \r\n    const Candidate = (anchor) =>\r\n  ( \r\n    <> \r\n    <Add\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          handleAddList={handleAddList}\r\n          register={candidateRegister}\r\n           source={source} \r\n          recruitmentList={recruitmentList}\r\n          handleClose={handleClose}\r\n          errors={candidateErrors} \r\n          setLoader={setLoader}\r\n          toggleDrawer={toggleDrawer}\r\n          setRecruitmentList={setRecruitmentList}\r\n          requirementList={requirementList}\r\n          handleSubmit={candidateSubmit}\r\n          handleAdd={handleAddCandidate}\r\n          requirement={requirementName}\r\n          isSubmitting={candidateIsSubmitting}\r\n          open={open}\r\n          messageRef={messageRef}\r\n          reset={candidateReset}\r\n          setCandidate={setCandidate}\r\n          candidate={candidate}\r\n          setFile={setFile}\r\n          file={file}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n          setRecruitmentId={setRecruitmentId}\r\n          recruitmentId={recruitmentId}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          setPhoneValidation={setPhoneValidation} \r\n          setHideContactDetails={setHideContactDetails}\r\n          hideContactDetails={hideContactDetails}\r\n          ExistCheck={ExistCheck} \r\n          requirementId={\"false\"}\r\n        />\r\n  </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          <PageTitle title=\"Assigned Requirements\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n         \r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)} \r\n            classes={{ paper: dataList === \"Candidate\"?  classes.clientDrawer : classes.drawer  }} \r\n\r\n          >\r\n          {dataList === \"View\"? \r\n          list(\"right\")\r\n           : dataList === \"Candidate\"?\r\n          Candidate(\"right\")\r\n          :\"\"}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n         \r\n          <Autocomplete\r\n            className={classes.filterFullWidth}\r\n            options={requirementName}\r\n            getOptionLabel={(option) =>\r\n              option?.requirementName + \" (\" + option?.uniqueId + \")\"\r\n            }\r\n            // size=\"small\"\r\n            value={requirementId}\r\n            onChange={(event, value) => setRequirementId(value)}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"requirementId\"\r\n                label=\"Requirement\"\r\n                size=\"small\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n\r\n          <TextField\r\n            name=\"fromDate\"\r\n            label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            size=\"small\"\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n            className={classes.filterWidth}\r\n            \r\n          />\r\n\r\n          <TextField\r\n            name=\"toDate\"\r\n            label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            size=\"small\"\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n            className={classes.filterWidth}\r\n            \r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\" \r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            title=\"\"\r\n            options={{\r\n              pagination: false,\r\n              sort: false,\r\n              selectableRows: \"none\",\r\n              search: false,\r\n              filter: false,\r\n              download: false,\r\n              print: false,\r\n              customToolbar: () => <HeaderElements />,\r\n              responsive: mobileQuery===true? 'vertical' : 'standard',\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: 'Oops! Matching record could not be found',\r\n                }\r\n              },\r\n            }}\r\n            columns={[\r\n                {\r\n                  name: \"S.No\",\r\n                },\r\n                {\r\n                  name: \"Actions\",\r\n                },\r\n                {\r\n                  name: \"Requirement Name\",\r\n                }, \r\n                {\r\n                  name: decode.companyType === \"COMPANY\" ? \"Assigned Recruiter\" : \"Assigned Company\",\r\n                },\r\n                {\r\n                  name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n                },\r\n                {\r\n                  name: decode.companyType === \"COMPANY\" ? \"Project Name\" : \"Client Name\",\r\n                },\r\n                {\r\n                  name: \"Organization Recruiter Name\",\r\n                },\r\n          \r\n                {\r\n                  name: \"Experience\",\r\n                },\r\n                {\r\n                  name: \"Skills \",\r\n                },\r\n                {\r\n                  name: \"Location \",\r\n                },\r\n                \r\n                {\r\n                  name: \"Posted Date\",\r\n                },\r\n              ]}\r\n            data={requirementsData.map((item, index) => {\r\n            \r\n                return [\r\n                  <>\r\n                    {currerntPage !== 0 ? 10 * currerntPage - 10 + index + 1 : index + 1}\r\n                  </>,\r\n                  <>\r\n                    <Grid container className={classes.space}>\r\n                      <Grid item xs className={classes.toolAlign}>\r\n                       \r\n                        <Tooltip\r\n                          title=\"View Requirement\"\r\n                          placement=\"bottom\"\r\n                          aria-label=\"view\"\r\n                        >\r\n                          <ViewIcon\r\n                            className={classes.toolIcon}\r\n                            onClick={(e) => {\r\n                              handleShow(item.requirement?.id, \"View\");\r\n                              setFile([]);\r\n                              setAssessment([]);\r\n                            }}\r\n                          />\r\n                        </Tooltip>\r\n          \r\n                        <Tooltip\r\n                                  title=\"Add New Candidate\"\r\n                                  placement=\"bottom\"\r\n                                  aria-label=\"view\"\r\n                                >\r\n                                  <PublishIcon\r\n                                    className={classes.toolIcon}\r\n                                    onClick={(e) => {\r\n                                      setDataList(\"Candidate\"); \r\n                                       setState({ ...state, right: true });  \r\n                                       setRecruitmentId(item.requirementId);\r\n                                       candidateReset();\r\n                                       setRecruitmentList({\r\n                                        ...requirementList,\r\n                                        id: item.requirement.id,\r\n                                        requirementName: item.requirement.requirementName,\r\n                                        clientId: item.requirement.clientId,\r\n                                        skills: item.requirement.skills,\r\n                                        orgRecruiterId: item.requirement.orgRecruiter.id,\r\n                                        orgRecruiterName: item.requirement.orgRecruiter.name,\r\n                                        jobLocation: item.requirement.jobLocation,\r\n                                        experience: item.requirement.experience,\r\n                                        clientUniqueId: item.requirement.client?.uniqueId,\r\n                                        clientName: item.requirement.client?.clientName,\r\n                                        status: item.requirement.statusList?.statusName,\r\n                                        uniqueId: item.requirement.uniqueId,\r\n                                      });\r\n                                    }}\r\n                                  />\r\n                                </Tooltip>\r\n\r\n\r\n                                \r\n                        <Tooltip\r\n                          title=\"View Candidate\"\r\n                          placement=\"bottom\"\r\n                          aria-label=\"view\"\r\n                        >\r\n                          <PeopleIcon\r\n                            className={classes.toolIcon}\r\n                            onClick={(e) => {\r\n                              sessionStorage.setItem(\"recruitmentId\", item.requirement.id);\r\n                              history.push(\"/app/assigned_candidates\");\r\n                            }}\r\n                          />\r\n                        </Tooltip>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </>,\r\n                  <>\r\n                    {item.requirement?.requirementName} {\"(\" + item.requirement?.uniqueId + \")\"}\r\n                  </>,\r\n                   <>\r\n                   {item.requirement?.recruiter?.companyName}\r\n                 </>,\r\n                  <>{item.recruiter?.firstName + \" \" + item.recruiter?.lastName} </>,\r\n                  <>{item.requirement?.client.clientName + \" (\" + item.requirement?.client?.uniqueId + \")\"} </>,\r\n                  item.requirement?.orgRecruiter.name,\r\n                  item.requirement?.experience,\r\n                  item.requirement?.skills,\r\n                  item.requirement?.jobLocation,\r\n                  \r\n                  moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n                ];\r\n              })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={50}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Dialog\r\n        aria-labelledby=\"dialog-title\"\r\n        onClose={handleModalClose}\r\n        open={modalOpen}\r\n        width=\"lg\"\r\n        maxWidth=\"lg\"\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogContent className={classes.center}>\r\n          <Grid container direction=\"row\" spacing={2}>\r\n            <div className={classes.heading + \" \" + classes.inputRoot}>\r\n              <Typography variant=\"subtitle2\" className={classes.inputRoot}>\r\n                \r\n                JD\r\n              </Typography>\r\n              <div className={classes.drawerClose}>\r\n                <CloseIcon className={classes.closeBtn} onClick={handleModalClose} />\r\n              </div>\r\n            </div>\r\n            <div className={classes.iframediv}>\r\n            <iframe\r\n              src={\r\n                \"https://docs.google.com/a/umd.edu/viewer?url=\" +\r\n                requirementsView?.jd +\r\n                \"&embedded=true\"\r\n              }\r\n              title=\"File\"\r\n              width=\"100%\"\r\n              height=\"500\"\r\n            >\r\n              \r\n            </iframe>\r\n\r\n            <div className={classes.iframeLogo} > \r\n</div>\r\n      </div>\r\n\r\n            <div className={classes.sendWhatsapp + \" \" + classes.inputRoot}>\r\n              <Button variant=\"contained\" size=\"small\"  color=\"secondary\" onClick={handleModalClose}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\chat\\Singlechat.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\transaction\\components\\Pdf.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Others\\Layout.js",["763"],"import React, { useState, useEffect, useRef, useReducer } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../PageTitle\";\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from \"../../themes/style\";\r\nimport moment from \"moment\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n import { useForm } from \"react-hook-form\";\r\n \r\nimport Notification from \"../Notification\";\r\n import Edit from \"../Candidates/Edit\";\r\nimport View from \"../Candidates/View\";\r\n import Bar from \"../Candidates/Bar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport Status from \"../Recruiter/SearchStatus\";\r\n import ExpandButton from \"../Candidates/ExpandButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport {jwtDecode} from \"jwt-decode\"; \r\n\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables(props) {\r\n  const mobileQuery = useMediaQuery(\"(max-width:600px)\");\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0); \r\n  var classes = useStyles();\r\n   const token = localStorage.getItem(\"token\");\r\n   const decode = jwtDecode(token);\r\n\r\n   const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false); \r\n  const [source, setSource] = useState([]);\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n   const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    requirementName: \"\",\r\n    source: \"\",\r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    candidateProcessed: \"\",\r\n\r\n    currentLocation: \"\",\r\n    preferredLocation: \"\",\r\n    nativeLocation: \"\",\r\n    relevantExperience: null,\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    dob: \"\",\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    educationalQualification: \"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false\r\n  });\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n \r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id:\"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n\r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [rowsPerPage] = useState(50);\r\n   const [file, setFile] = useState([]);\r\n   const [assessment,setAssessment] = useState([]);\r\n \r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from(\r\n    { length: 60 },\r\n    (_, i) => moment(new Date()).format(\"YYYY\") - i,\r\n  );\r\n\r\n  \r\n  const [dataList, setDataList] = useState(\"ADD\"); \r\n\r\n  const [validation, setValidation] = useState(false);\r\n \r\n  const filterRef = useRef(null);\r\n \r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n \r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n   firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    experience: Yup.number().nullable(true).transform((_, val) => (val ? Number(val) : null)),\r\n    location: Yup.string().nullable().notRequired(),\r\n    alternateMobile:\r\n      phoneValidation === true\r\n        ? Yup.string()\r\n            .required(\"Alternate Contact Number is required\")\r\n            .min(10, \"Must be exactly 10 digits\")\r\n            .max(10, \"Must be exactly 10 digits\")\r\n        : Yup.string(),\r\n    native: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    educationalQualification: Yup.string().nullable().notRequired(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required(\"Gender is required\").notRequired(),\r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => (val ? Number(val) : null)),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => (val ? Number(val) : null)),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(),\r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n \r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    setLoader(true);\r\n \r\n\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.CandidatesDataUrl,\r\n        data: {\r\n          page: \"1\",\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [ reducerValue, token, sessionStorage.getItem(\"use\")]);\r\n\r\n  function updateData(id) {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.UpdateDataUrl,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          var myCandidateStatuses = response.data.data;\r\n\r\n          axios({\r\n            method: \"post\",\r\n            url: props.UpdateCandidates,\r\n            data: {\r\n              id: id,\r\n            },\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n          }).then(function (result) {\r\n            if (result.data.status === true) {\r\n              const updateState = candidatesData.map((item) => {\r\n                if (item.id === id) {\r\n                  return {\r\n                    ...item,\r\n                    candidateDetail: result.data.data.candidateDetail,\r\n                    invoiceValue: result.data.data.invoiceValue,\r\n                    invoicedDate: result.data.data.invoicedDate,\r\n                    joinedDate: result.data.data.joinedDate,\r\n                    statusCode: result.data.data.statusList.statusCode,\r\n                    statusList: result.data.data.statusList,\r\n                    myCandidateStatuses: myCandidateStatuses,\r\n                    droppedReason: result.data.data.droppedReason,\r\n                    ditchReason: result.data.data.ditchReason,\r\n                    creditNoteReason: result.data.data.creditNoteReason,\r\n                  };\r\n                }\r\n                return item;\r\n              });\r\n\r\n              setCandidatesData(updateState);\r\n              setLoader(false);\r\n            }\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n \r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    forceUpdate();\r\n  };\r\n\r\n  \r\n  function getFilterData() {\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiter: \"YES\",\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidatesDataUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  } \r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.SourceUrl,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiter: \"YES\",\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidatesDataUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  }; \r\n\r\n  function handleEdit(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var dob = values.day + \"-\" + values.month + \"-\" + values.year;\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.EditUrl,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience: values.experience,\r\n          currentLocation: values.location,\r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile: values.alternateMobile,\r\n          preferredLocation: values.preferredLocation,\r\n          nativeLocation: values.native,\r\n          relevantExperience: values.relevantExperience,\r\n          currentCtc: values.currentCtc,\r\n          expectedCtc: values.expectedCtc,\r\n          dob:\r\n            values.day === undefined\r\n              ? \"\"\r\n              : dob !== \"--\"\r\n              ? values.day + \"-\" + values.month + \"-\" + values.year\r\n              : \"\",\r\n          noticePeriod: values.noticePeriod,\r\n          reasonForJobChange: values.reasonForJobChange,\r\n          candidateProcessed: values.candidateProcessed,\r\n          differentlyAbled: values.differentlyAbled,\r\n          educationalQualification: values.educationalQualification,\r\n          gender: values.gender,\r\n          reason: values.reason,\r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            if (file !== undefined) {\r\n              if (file?.length !== 0) {\r\n                uploadResume(file, response.data.candidateDetailsId);\r\n              }\r\n            }\r\n\r\n            if(assessment !== undefined ){\r\n              if(assessment?.length !== 0){\r\n                uploadAssessment(assessment, response.data.candidateId);\r\n              }\r\n             }\r\n\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            updateData(candidatesEdit.id);\r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadResume(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"resume\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.UpdateResumeUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        // aiResumeUpload(data)\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n \r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id); \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n   \r\n      if (response.data.status === true) {\r\n         \r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else {\r\n      setDataList(\"VIEW\");\r\n    }  \r\n    \r\n    editreset();\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.UpdateCandidates,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) { \r\n          if (response.data.status === true) {\r\n            setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc:  response.data.data.requirement?.recruiter?.firstName +  \" \" +  response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation:\r\n                response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:\r\n                response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:\r\n                response.data.data.candidateDetail?.nativeLocation,\r\n              experience: response.data.data.candidateDetail?.experience,\r\n              relevantExperience:\r\n                response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n              dob: response.data.data.candidateDetail?.dob,\r\n              noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:\r\n                response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason: response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:\r\n                response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:\r\n                response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:\r\n                response.data.data.candidateDetail?.educationalQualification,\r\n              gender: response.data.data.candidateDetail?.gender,\r\n              resume: response.data.data.candidateDetail?.resume,\r\n              alternateMobile:\r\n                response.data.data.candidateDetail?.alternateMobile,\r\n                candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n                candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n                candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n                candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n                mainId: response.data.data.mainId, \r\n                isCandidateCpv: response.data.data.isCandidateCpv,\r\n                currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation:\r\n                response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:\r\n                response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:\r\n                response.data.data.candidateDetail?.nativeLocation,\r\n              experience: response.data.data.candidateDetail?.experience,\r\n              relevantExperience:\r\n                response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n              dob: response.data.data.candidateDetail?.dob,\r\n              noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:\r\n                response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason: response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:\r\n                response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:\r\n                response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:\r\n                response.data.data.candidateDetail?.educationalQualification,\r\n              gender: response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile.substring(2),\r\n              resume: response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setState({ ...state, right: true });\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.UpdateDataUrl,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setListCanditate(response.data.data);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n \r\n  }\r\n\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>Total : {count}</Grid>\r\n    </>\r\n  ); \r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: \"Oops! Matching record could not be found\",\r\n      },\r\n    },\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    search: false,\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery === true ? \"vertical\" : \"standard\",\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n              <Bar title=\"Candidates\" list={list} />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n  const components = {\r\n    ExpandButton: function (props) {\r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n \r\n  \r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n           file={file}\r\n           setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation}\r\n          show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) :  (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          <PageTitle title={props.title} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n          <TextField\r\n            required\r\n            name=\"fromDate\"\r\n            label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n          />\r\n\r\n          <TextField\r\n            required\r\n            name=\"toDate\"\r\n            label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            components={components}\r\n            options={table_options}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                   <Grid container className={classes.space}>\r\n                     <Tooltip title=\"Edit Candidate\" placement=\"bottom\" aria-label=\"edit\">\r\n                     <EditIcon\r\n                       className={classes.toolIcon}\r\n                       onClick={(e) => {\r\n                      \r\n                         handleShow(item.id, \"EDIT\");\r\n                       }}\r\n                     />\r\n                   </Tooltip>\r\n                   <Tooltip title=\"View Candidate\" placement=\"bottom\" aria-label=\"view\">\r\n                     <ViewIcon\r\n                       className={classes.toolIcon}\r\n                       onClick={(e) => {\r\n                         handleShow(item.id,  \"VIEW\");\r\n                       }}\r\n                     />\r\n                   </Tooltip>\r\n                 </Grid>,\r\n\r\n                item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item}  \r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n                 <>\r\n                  {item.candidateDetail?.firstName +\r\n                    \" \" +\r\n                    item.candidateDetail?.lastName}\r\n                  <br /> {\" (\" + item.uniqueId + \")\"}\r\n                </>,\r\n              item.mainId === decode.mainId ? \r\n              <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n              : item.hideContactDetails !== true?\r\n              <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n              :\"\",\r\n\r\n                <>\r\n                  \r\n                  {item.requirement?.requirementName} <br />\r\n                  {\"(\" + item.requirement?.uniqueId + \")\"}\r\n                </>,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName,\r\n                item.requirement?.recruiter?.firstName +\r\n                  \" \" +\r\n                  item.requirement?.recruiter?.lastName,\r\n\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n     \r\n   \r\n      <SwipeableDrawer\r\n        anchor=\"right\"\r\n        open={state[\"right\"]}\r\n        onClose={toggleDrawer(\"right\", false)}\r\n        onOpen={toggleDrawer(\"right\", true)}\r\n        classes={{\r\n          paper:\r\n            dataList === \"VIEW\" || dataList === \"NOTES\"\r\n              ? classes.drawer\r\n              : classes.clientDrawer,\r\n        }}\r\n      >\r\n        {list(\"right\")}\r\n      </SwipeableDrawer>\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\ReportLayout.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Layout.js",["764"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../PageTitle\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { toast } from \"react-toastify\";\r\n// import CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport Drop from \"../Candidates/Drop\";\r\nimport Reverse from \"../Admin/Reverse\";\r\nimport Edit from \"../Candidates/Edit\";\r\nimport View from \"../Candidates/View\";\r\nimport Note from \"../Candidates/Note\";\r\nimport Bar from \"../Candidates/Bar\";\r\nimport Message from \"../Candidates/Message\";\r\nimport Notification from \"../Notification\";\r\n// import XlsxPopulate from \"xlsx-populate\";\r\n// import { saveAs } from \"file-saver\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport Status from \"../Admin/Status\";\r\nimport Dialogs from \"../Admin/Dialogs\";\r\nimport Actions from \"../Candidates/Actions\";\r\n import ExpandButton from \"../Candidates/ExpandButton\"; \r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport external from \"../../images/external.png\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Candidates(props) {\r\n  var classes = useStyles();\r\n   const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const mobileQuery = useMediaQuery('(max-width:600px)');  \r\n\r\n  const filterRef = useRef(null);\r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n\r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n  const [user, setUserName] = useState([]); \r\n  \r\n  const [candidateList, setCandidateList] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    mobile: \"\",\r\n    message: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n  });\r\n\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n  const [candidatesNote, setCandidatesNote] = useState([]);\r\n   const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    requirementName: \"\",\r\n    source: \"\", \r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location:\"\",\r\n    experience:null,\r\n    resume:\"\",       \r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\", \r\n    \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    currentCompanyName: \"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    hideContactDetails: false,\r\n    \r\n  });\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id: \"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    cc: \"\",\r\n    mobile: \"\",\r\n    skills: \"\", \r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    invoiceValue: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n    location:\"\",\r\n    experience:null, \r\n    resume: \"\",\r\n    \r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [rowsPerPage] = useState(50);\r\n\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const joiningRef = useRef();\r\n  const invoiceRef = useRef();\r\n  const [file, setFile] = useState([]);\r\n  const [assessment,setAssessment] = useState([]);\r\n \r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  \r\n\r\n  const [shortList, setShortList] = useState({\r\n    id: \"\",\r\n    cand_name: \"\",\r\n    job_id: \"\",\r\n    job_name: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    cand_mobile: \"\",\r\n    statusCode: \"\",\r\n    free: \"\",\r\n  });\r\n\r\n   const [validation, setValidation] = useState(false);\r\n\r\n   const [source, setSource] = useState([]);\r\n   const [saveOnly,setSaveOnly]=useState(\"YES\");\r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n      skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n     location: Yup.string().nullable().notRequired(),\r\n     alternateMobile: phoneValidation === true? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"): Yup.string(),\r\n     native: Yup.string().nullable().notRequired(),\r\n     preferredLocation: Yup.string().nullable() ,\r\n     relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null), \r\n     educationalQualification: Yup.string().nullable().notRequired(),\r\n     day: Yup.string().nullable().notRequired(),\r\n     month: Yup.string().nullable().notRequired(),\r\n     year: Yup.string().nullable().notRequired(),\r\n     gender: Yup.string().nullable().required('Gender is required'),     \r\n     differentlyAbled: Yup.string().nullable().notRequired(),\r\n     currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n     noticePeriod: Yup.string().nullable().notRequired(),\r\n     reasonForJobChange: Yup.string().nullable().notRequired(),\r\n     candidateProcessed: Yup.string().nullable().notRequired(),\r\n     reason: Yup.string().nullable().notRequired(), \r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const invoiceSchema = Yup.object().shape({\r\n    invoice: Yup.number().test('len', 'Must be exactly 15 digits', val => Math.ceil(Math.log10(val + 1)) <= 15).required(\"Invoice Value is required\").nullable(true).transform((_, val) => val ? Number(val) : null),\r\n  });\r\n\r\n  const noteSchema = Yup.object().shape({\r\n    message: Yup.string().required(\"Message is required\"),\r\n  });\r\n\r\n  const dropSchema = Yup.object().shape({\r\n    reason: Yup.string().required(\"Reason is required\"),\r\n  }); \r\n  \r\n  const {\r\n    register: dropCandidates,\r\n    formState: { errors: dropErrors },\r\n    handleSubmit: dropSubmit,\r\n    reset: dropReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(dropSchema),\r\n  });\r\n\r\n  const {\r\n    register: noteCandidates,\r\n    formState: { errors: noteErrors },\r\n    handleSubmit: noteSubmit,\r\n    reset: noteReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(noteSchema),\r\n  });\r\n\r\n  const {\r\n    register: invoiceCandidates,\r\n    formState: { errors: invoiceErrors },\r\n    handleSubmit: invoiceSubmit,\r\n    reset: invoicereset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(invoiceSchema),\r\n  });\r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    setLoader(true);\r\n\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.candidateData,\r\n        data: {\r\n          page: \"1\",\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      }); \r\n\r\n    };\r\n    const getUserName = async () => {\r\n      axios({\r\n        method: \"post\",\r\n        url: props.userList,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setUserName(response.data.data);\r\n          }\r\n        })\r\n\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n    fetchData();\r\n    getUserName();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token]);\r\n\r\n\r\n\r\n  function updateData(id){ \r\n    axios({\r\n      method: \"post\",\r\n      url: props.updateData,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n  \r\n        if (response.data.status === true) { \r\n  \r\n          var myCandidateStatuses= response.data.data;\r\n  \r\n          axios({\r\n            method: \"post\",\r\n            url: props.viewCandidate,\r\n            data: {\r\n              id: id,\r\n            },\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n          })\r\n            .then(function (result) {\r\n            \r\n               if (result.data.status === true) {  \r\n         \r\n          const updateState = candidatesData.map(item => {\r\n      \r\n            if (item.id === id) { \r\n              return { ...item,  \r\n                  candidateDetail: result.data.data.candidateDetail,  \r\n                  invoiceValue: result.data.data.invoiceValue,  \r\n                  invoicedDate: result.data.data.invoicedDate,  \r\n                  joinedDate: result.data.data.joinedDate, \r\n                  statusCode: result.data.data.statusList.statusCode,\r\n                  statusList: result.data.data.statusList,  \r\n                  myCandidateStatuses: myCandidateStatuses,\r\n                  droppedReason: result.data.data.droppedReason,\r\n                    ditchReason: result.data.data.ditchReason,\r\n                    creditNoteReason: result.data.data.creditNoteReason,\r\n              };\r\n              \r\n            }\r\n            return item;\r\n          }); \r\n       \r\n          setCandidatesData(updateState);\r\n        }\r\n        setLoader(false);\r\n        });   \r\n    \r\n        \r\n  \r\n  }\r\n  })\r\n  .catch(function (error) {\r\n  console.log(error);\r\n  }); \r\n  \r\n    }\r\n \r\n    \r\n  function handleAddNotes(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.addCandidateNotes,\r\n        data: {\r\n          candidateId: candidatesEdit.id,\r\n          message: values.message,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message); \r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n  const [recruiterId, setRecruiterId] = useState(null);\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setRecruiterId(null);\r\n    forceUpdate();\r\n  };\r\n  \r\n\r\n  function getFilterData() {\r\n    const form = filterRef.current;\r\n\r\n    if (form[\"fromDate\"].value > form[\"toDate\"].value) {\r\n      handleNotificationCall(\"error\",\"Check your selected dates\")\r\n      return\r\n    }\r\n\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiterId: recruiterId?.id,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.candidateData,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.viewSourcesList,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiterId: recruiterId?.id,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.candidateData,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n  function InvoicedStatus(values) {\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: props.updateInvoicedStatus,\r\n        data: {\r\n          candidateId: shortList.id,\r\n          invoice: values.invoice,\r\n          invoicedDate: invoiceRef.current.value,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id); \r\n          handleStatusClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        }  else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function changeStcStatus() { \r\n    setLoader(true);\r\n    var url = props.updateStcStatus;\r\n \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id, \r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) { \r\n          updateData(shortList.id); \r\n          handleChangeMessageClose(); \r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    \r\n  }\r\n\r\n  function DropStatus(values) {\r\n     \r\n    var url = props.DropCandidate;\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id:  shortList.id,\r\n          droppedReason: values.reason\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n         \r\n          updateData(shortList.id); \r\n          handleDropReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  function OfferDeclineStatus(values) {\r\n    setLoader(true);\r\n    return new Promise((resolve) => {\r\n      axios({\r\n        method: \"post\",\r\n        url: props.updateOfferDeclineStatus,\r\n        data: {\r\n          candidateId: shortList.id,\r\n          offerDeclinedReason: reasonRef.current.value\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id); \r\n          handleStatusNewClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else{\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  function handleEdit(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var dob = values.day+\"-\"+values.month+\"-\"+values.year;\r\n     \r\n      axios({\r\n        method: \"post\",\r\n        url: props.adminEditCandidate,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience:values.experience, \r\n          currentLocation: values.location, \r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile:values.alternateMobile,\r\n          preferredLocation:values.preferredLocation,\r\n          nativeLocation:values.native,\r\n           relevantExperience:values.relevantExperience,\r\n          currentCtc:values.currentCtc,\r\n          expectedCtc:values.expectedCtc,\r\n          dob: values.day===undefined? candidatesEdit.dob : dob!== \"--\"?  dob: candidatesEdit.dob,\r\n          noticePeriod:values.noticePeriod,\r\n          reasonForJobChange:values.reasonForJobChange,\r\n          candidateProcessed:values.candidateProcessed,\r\n          differentlyAbled:values.differentlyAbled,\r\n          educationalQualification:values.educationalQualification,\r\n          gender:values.gender,\r\n          reason: values.reason, \r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            \r\n            \r\n            if(file !== undefined ){\r\n              if(file?.length !== 0){\r\n              uploadResume(file, response.data.candidateDetailsId); \r\n            }}\r\n\r\n            if(assessment !== undefined ){\r\n              if(assessment?.length !== 0){\r\n                uploadAssessment(assessment, response.data.candidateId);\r\n              }\r\n            }\r\n\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            updateData(candidatesEdit.id); \r\n            setState({ ...state, right: false });\r\n          } else{\r\n            handleNotificationCall(\"error\", response.data.message);\r\n            setLoader(false);\r\n          }\r\n\r\n          \r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\nfunction aiResumeUpload(resumeData) {\r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n    data: resumeData,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n  \r\n    if (response.data.status === true) {\r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\nfunction uploadResume(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"resume\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: props.updateCandidateResume,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n      // aiResumeUpload(data)\r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\nfunction uploadAssessment(File, Id) {\r\n  var FormData = require(\"form-data\");\r\n  var data = new FormData();\r\n  data.append(\"file\", File);\r\n  data.append(\"id\", Id); \r\n  axios({\r\n    method: \"post\",\r\n    url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n    data: data,\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n      Authorization: token,\r\n    },\r\n  }).then(function (response) {\r\n \r\n    if (response.data.status === true) {\r\n       \r\n    } else {\r\n      handleNotificationCall(\"error\", response.data.message);\r\n    }\r\n  });\r\n}\r\n\r\n  function changeStatus(send, message, status, candidateId) {\r\n    setLoader(true);\r\n    const template_name =\r\n    shortList.statusCode === 303\r\n       ? \"1st_interview_round\"\r\n       : shortList.statusCode === 3031\r\n       ? \"initial_interview_rounds\"\r\n       : shortList.statusCode === 304\r\n       ? status === \"Schedule Another Interview\"\r\n         ? \"initial_interview_rounds\"\r\n         : status === \"Schedule Final Interview\"\r\n         ? \"final_interview_round\"\r\n         : status === \"Send Document\"\r\n         ? \"document_collect\"\r\n         : \"\"\r\n       : shortList.statusCode === 3041\r\n       ? \"document_collect\"\r\n       : shortList.statusCode === 305\r\n       ? \"salary_breakup_shared_confirmation\"\r\n       : shortList.statusCode === 307\r\n       ? \"offer_released_confirmation\"\r\n       : shortList.statusCode === 308\r\n       ? status === \"Joining Confirmation\"\r\n         ? \"joining_confirmation\"\r\n         : \"\"\r\n       : \"\";\r\n\r\n    const vars =\r\n      shortList.statusCode === 308\r\n        ? [\r\n            shortList.cand_name,\r\n            shortList.job_id, \r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ]\r\n        : [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem('companyName'),\r\n          ];\r\n\r\n    var url = \"\";\r\n    if (shortList.free === \"NO\") {\r\n      url = props.sendTemplateMessage;\r\n    } else {\r\n      url = props.changeYesCadidateStatus;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: shortList.cand_mobile,\r\n        template_name: template_name,\r\n        vars: vars,\r\n        message: message,\r\n        candidate_name: shortList.cand_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        if (shortList.free === \"YES\" && send === true) { \r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=\" +\r\n              shortList.cand_mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        }\r\n\r\n        updateData(candidateId);  \r\n        setState({ ...state, right: false });\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n    \r\n    });\r\n\r\n  \r\n  }\r\n\r\n  function joinedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.updateJoinedStatus,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        joinedDate: joiningRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }  else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function creditNoteStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.updateCrediNoteStatus,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        creditNoteReason: reasonRef.current.value\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleReasonClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  function updateJoiningDitchedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.updateJoiningDitchedStatus,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        ditchReason: reasonRef.current.value\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleReasonClose();\r\n        updateData(shortList.id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"VIEW\") {\r\n      setDataList(\"VIEW\");\r\n    } else {\r\n      setDataList(\"NOTES\");\r\n    }\r\n\r\n    if (name !== \"NOTES\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: props.viewCandidate,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n          \r\n            setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc:   response.data.data.requirement?.recruiter?.firstName +  \" \" + response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile,\r\n              resume:response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              isCandidateCpv: response.data.data.isCandidateCpv,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:response.data.data.candidateDetail?.nativeLocation,\r\n              experience:response.data.data.candidateDetail?.experience,\r\n              relevantExperience:response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc:response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc:response.data.data.candidateDetail?.expectedCtc,\r\n              dob:response.data.data.candidateDetail?.dob,\r\n              noticePeriod:response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason:response.data.data.candidateDetail?.reason,\r\n              candidateProcessed:response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:response.data.data.candidateDetail?.educationalQualification,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile?.substring(2),\r\n              gender:response.data.data.candidateDetail?.gender,\r\n              resume:response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording, \r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n             });\r\n             \r\n            setState({ ...state, right: true });\r\n\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: props.updateData,\r\n          data: {\r\n            id: values,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n \r\n            if (response.data.status === true) {\r\n\r\n        setListCanditate(response.data.data);\r\n\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n    \r\n    } else {\r\n      setCandidatesEdit({\r\n        ...candidatesEdit,\r\n        id: values,\r\n      });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.viewCandidateNotes,\r\n        data: {\r\n          candidateId: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setCandidatesNote(response.data.data);\r\n          setState({ ...state, right: true });\r\n          setLoader(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function dropConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.DropCandidate,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setDropOpen(false);\r\n        updateData(id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }  else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function reverseConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.resetStatus,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setReverseOpen(false);\r\n        setLoader(false);\r\n        updateData(id); \r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }  else{\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const components = {\r\n    ExpandButton: function(props) { \r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  // function getSheetData(data, header) {\r\n  //   var fields = Object.keys(data[0]);\r\n  //   var sheetData = data.map(function (row) {\r\n  //     return fields.map(function (fieldName) {\r\n  //       return row[fieldName] ? row[fieldName] : \"\";\r\n  //     });\r\n  //   });\r\n  //   sheetData.unshift(header);\r\n  //   return sheetData;\r\n  // }\r\n\r\n  // async function saveAsExcel(data) {\r\n  //   let header = [\r\n  //     \"S.No\",\r\n  //     \"Requirement Name\",\r\n  //     \"Client Coordinator\",\r\n  //     \"Recruiter\",\r\n  //     \"Candidate Name\",\r\n  //     \"Email\",\r\n  //     \"Mobile\",\r\n  //     \"Status\",\r\n  //     \"Posted Date\",\r\n  //   ];\r\n\r\n  //   XlsxPopulate.fromBlankAsync().then(async (workbook) => {\r\n  //     const sheet1 = workbook.sheet(0);\r\n  //     const sheetData = getSheetData(data, header);\r\n  //     const totalColumns = sheetData[0].length;\r\n\r\n  //     sheet1.cell(\"A1\").value(sheetData);\r\n  //     const range = sheet1.usedRange();\r\n  //     const endColumn = String.fromCharCode(64 + totalColumns);\r\n  //     sheet1.row(1).style(\"bold\", true);\r\n  //     sheet1.range(\"A1:\" + endColumn + \"1\").style(\"fill\", \"BFBFBF\");\r\n  //     range.style(\"border\", true);\r\n  //     return workbook.outputAsync().then((res) => {\r\n  //       saveAs(\r\n  //         res,\r\n  //         `Candidates_${moment(new Date()).format(\"DD_MM_YYYY_HH_mm\")}.xlsx`,\r\n  //       );\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  // function downloadExel() {\r\n  //   setLoader(true);\r\n  //   const form = filterRef.current;\r\n  //   var data = JSON.stringify({\r\n  //     fromDate: `${form[\"fromDate\"].value}`,\r\n  //     toDate: `${form[\"toDate\"].value}`,\r\n  //     recruiterId: recruiterId?.id,\r\n  //     fileDownload: \"yes\",\r\n  //   });\r\n\r\n  //   axios({\r\n  //     method: \"post\",\r\n  //     url: props.candidateData,\r\n  //     data: data,\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Authorization: token,\r\n  //     },\r\n  //   }).then(function (response) {\r\n  //     if (response.data.status === true) {\r\n  //       setLoader(false);\r\n  //       saveAsExcel(response.data.data);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n        {/* <Tooltip title=\"Dowmload\" placement=\"bottom\" aria-label=\"download\">\r\n          {count !== 0 ? (\r\n            <CloudDownloadIcon\r\n              className={classes.toolIcon}\r\n              onClick={(e) => {\r\n                downloadExel();\r\n              }}\r\n            />\r\n          ) : (\r\n            <CloudDownloadIcon className={classes.downloadIcon} />\r\n          )}\r\n        </Tooltip> */}\r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Oops! Matching record could not be found',\r\n      }\r\n    },\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    search: false,\r\n    rowsPerPage: 50,\r\n\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery===true? 'vertical' : 'standard',\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n     return (\r\n       <React.Fragment>\r\n         <tr>\r\n           <td colSpan={16}>\r\n             <Bar\r\n               title=\"Candidates\"\r\n               list={list}\r\n              \r\n             />\r\n           </td>\r\n         </tr>\r\n       </React.Fragment>\r\n     );\r\n   },\r\n    page: page,\r\n  };\r\n\r\n\r\n  const [stausOpen, setStatusOpen] = React.useState(false);\r\n\r\n  const [stausNewOpen, setStatusNewOpen] = React.useState(false);\r\n  const [dropOpen, setDropOpen] = React.useState(false);\r\n  const [reverseOpen, setReverseOpen] = React.useState(false);\r\n  const [messageOpen, setMessageOpen] = React.useState(false);\r\n\r\n\r\n  const handleStatusOpen = () => {\r\n    setStatusOpen(true);\r\n  };\r\n\r\n  const handleStatusClose = () => {\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleStatusNewOpen = () => {\r\n    setStatusNewOpen(true);\r\n  };\r\n\r\n  const handleStatusNewClose = () => {\r\n    setStatusNewOpen(false);\r\n  };\r\n\r\n  const handleMessageOpen = () => {\r\n    setMessageOpen(true);\r\n  };\r\n\r\n  const handleMessageClose = () => {\r\n    setMessageOpen(false);\r\n  };\r\n\r\n  const handleDropOpen = () => {\r\n    setDropOpen(true);\r\n  };\r\n\r\n  const handleDropClose = () => {\r\n    setDropOpen(false);\r\n  };\r\n\r\n  const handleReverseOpen = () => {\r\n    setReverseOpen(true);\r\n  };\r\n\r\n  const handleReverseClose = () => {\r\n    setReverseOpen(false);\r\n  };\r\n\r\n  const [dropReasonOpen, setDropReasonOpen] = useState(false);\r\n\r\n  const handleDropReasonOpen = () => {\r\n    \r\n    setDropReasonOpen(true);\r\n    setStatusOpen(false); \r\n  };\r\n\r\n  const handleDropReasonClose = () => {\r\n    setDropReasonOpen(false);\r\n  };\r\n\r\n\r\n const reasonRef =useRef()\r\n\r\n  const [reasonOpen, setReasonOpen] = useState(false);\r\n\r\n  const handleReasonOpen = () => {  \r\n    setStatusOpen(false);\r\n    setStatusNewOpen(false);\r\n    setReasonOpen(true); \r\n  };\r\n\r\n  const handleReasonClose = () => {\r\n    setReasonOpen(false);\r\n  };\r\n\r\n  const [ changeMessageOpen, setChangeMessageOpen] = useState(false);\r\n\r\n \r\n  const handleChangeMessageOpen = () => {\r\n    setChangeMessageOpen(true);\r\n    handleStatusClose();\r\n  };\r\n\r\n  const handleChangeMessageClose = () => {\r\n    setChangeMessageOpen(false);\r\n  };\r\n\r\n  const [view, setView] = useState(\"\");\r\n\r\n  function sendMessage(candidateId, mobile, message, candidate_name, list) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url:  props.sendTemplateMessage,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"general_message\",\r\n        vars: [\r\n          candidate_name,\r\n          list.rec_name,\r\n          list.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: candidate_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n\r\n          setLoader(false);\r\n          handleMessageClose();\r\n          handleNotificationCall(\"success\", response.data.message); \r\n\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.getMyWallet,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n           file={file}\r\n           setAssessment={setAssessment}\r\n           assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation }\r\n          show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Note\r\n          toggleDrawer={toggleDrawer}\r\n          candidatesNote={candidatesNote}\r\n          noteCandidates={noteCandidates}\r\n          noteErrors={noteErrors}\r\n          handleAddNotes={handleAddNotes}\r\n          noteSubmit={noteSubmit}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          \r\n          <PageTitle title={props.title} />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{ paper: dataList===\"VIEW\" || dataList===\"NOTES\"? classes.drawer: classes.clientDrawer }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n          <Autocomplete\r\n            className={classes.filterFullWidth}\r\n            options={user}\r\n            getOptionLabel={(option) => {\r\n              console.log(option)\r\n              const roleName = option.user?.role?.roleName;\r\n              const firstName = option.firstName;\r\n              const lastName = option.lastName;\r\n              let label = `${firstName} ${lastName}`;\r\n              if (roleName) {\r\n                label += ` (${roleName})`;\r\n\r\n                if (roleName === 'SUBVENDOR') {\r\n                  label = label.replace('(SUBVENDOR)', `(${option?.companyName})`);\r\n                } else if (roleName === 'CLIENTCOORDINATOR') {\r\n                  label = label.replace('(CLIENTCOORDINATOR)', '(Hiring Manager)');\r\n                }\r\n              }\r\n\r\n              return label;\r\n            }}\r\n            value={recruiterId}\r\n            onChange={(event, value) => setRecruiterId(value)}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"recruiterId\"\r\n                label=\"Recruiter\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n\r\n          <TextField\r\n            className={classes.filterWidth}\r\n            name=\"fromDate\"\r\n           label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            \r\n            onChange={handleFromDateChange}\r\n          />\r\n\r\n          <TextField\r\n            className={classes.filterWidth}\r\n            name=\"toDate\"\r\n           label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            \r\n            onChange={handleToDateChange}\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            options={table_options}\r\n            components={components}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"View Candidate\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <Actions\r\n                  index={index}\r\n                  item={item}\r\n                  reset={editreset}\r\n                  editreset={editreset} \r\n                  noteReset={noteReset}\r\n                  setCandidateList={setCandidateList}\r\n                  handleMessageOpen={handleMessageOpen}\r\n                  candidateList={candidateList}\r\n                  handleDropOpen={handleDropOpen}\r\n                  handleReverseOpen={handleReverseOpen}\r\n                  handleShow={handleShow}\r\n                  setFile={setFile}\r\n                  setAssessment={setAssessment}\r\n                  setPhoneValidation={setPhoneValidation }\r\n                />,\r\n                item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item}\r\n                      handleStatusOpen={handleStatusOpen}\r\n                      handleStatusNewOpen={handleStatusNewOpen}\r\n                      setValidation={setValidation}\r\n                      setShortList={setShortList}\r\n                      shortList={shortList}\r\n                      setView={setView}\r\n                      view={view}\r\n                      invoicereset={invoicereset}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n\r\n                <Grid container row spacing={2} >  \r\n              {item.candidateDetail?.isExternal === \"YES\"?\r\n             <Tooltip title=\"SUBVENDOR/FREELANCER\"  placement=\"bottom\" aria-label=\"title\"> \r\n                <Avatar  alt=\"Profile\"   src={external}   className={classes.externalIcon}  /> \r\n             </Tooltip>   : \"\" }  \r\n            {item.candidateDetail?.firstName + \" \" +  item.candidateDetail?.lastName } <br /> {\" (\" +  item.uniqueId +   \")\"} \r\n             \r\n             </Grid>,\r\n\r\n              item.mainId === decode.mainId ? \r\n              <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n              : item.hideContactDetails !== true?\r\n              <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n              :\"\",\r\n\r\n                <> {item.requirement?.requirementName} <br/> {\"(\" +   item.requirement?.uniqueId +  \")\"}</>,\r\n                item.requirement?.recruiter?.firstName +   \" \" +  item.requirement?.recruiter?.lastName,\r\n                item.requirement?.client?.handler?.firstName +\" \" +item.requirement?.client?.handler?.lastName,\r\n                <Tooltip title=\"View Candidate\" placement=\"bottom\" aria-label=\"view\">\r\n                 <ViewIcon\r\n                   className={classes.toolIcon}\r\n                   onClick={(e) => {\r\n                     handleShow(item.id,  \"VIEW\");\r\n                   }}\r\n                 />\r\n               </Tooltip>,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n                \r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Message\r\n        setState={setState}\r\n        state={state}\r\n        candidateList={candidateList}\r\n        decode={decode}\r\n        sendMessage={sendMessage}\r\n        handleMessageOpen={handleMessageOpen}\r\n        messageOpen={messageOpen}\r\n        handleMessageClose={handleMessageClose}\r\n      />\r\n\r\n      <Dialogs\r\n        handleStatusClose={handleStatusClose}\r\n        handleStatusNewClose={handleStatusNewClose}\r\n        validation={validation}\r\n        stausOpen={stausOpen}\r\n        stausNewOpen={stausNewOpen}\r\n        changeStatus={changeStatus}\r\n        shortList={shortList}\r\n        view={view}\r\n        setView={setView}\r\n        invoiceCandidates={invoiceCandidates}\r\n        invoiceErrors={invoiceErrors}\r\n        invoiceSubmit={invoiceSubmit}\r\n        InvoicedStatus={InvoicedStatus}\r\n        joinedStatus={joinedStatus}\r\n        creditNoteStatus={creditNoteStatus}\r\n        updateJoiningDitchedStatus={updateJoiningDitchedStatus}\r\n        OfferDeclineStatus={OfferDeclineStatus}\r\n        joiningRef={joiningRef}\r\n        invoiceRef={invoiceRef}  \r\n        saveOnly={saveOnly}\r\n        setSaveOnly={setSaveOnly}\r\n        \r\n        dropCandidates ={ dropCandidates}\r\n        dropErrors={dropErrors}\r\n        dropSubmit={dropSubmit}\r\n        dropReset={dropReset}\r\n        DropStatus={DropStatus}\r\n        handleDropReasonClose={handleDropReasonClose}\r\n        dropReasonOpen={dropReasonOpen}\r\n        handleDropReasonOpen={handleDropReasonOpen}\r\n        changeMessageOpen={changeMessageOpen}\r\n        handleChangeMessageClose={handleChangeMessageClose}\r\n        changeStcStatus={changeStcStatus}\r\n        handleChangeMessageOpen={handleChangeMessageOpen} \r\n        reasonRef={reasonRef} \r\n        handleReasonOpen={handleReasonOpen}\r\n        reasonOpen={reasonOpen}\r\n        handleReasonClose={handleReasonClose}\r\n      />\r\n\r\n      <Drop\r\n        handleDropClose={handleDropClose}\r\n        dropOpen={dropOpen}\r\n        dropConfirmation={dropConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n      <Reverse\r\n        handleReverseClose={handleReverseClose}\r\n        reverseOpen={reverseOpen}\r\n        reverseConfirmation={reverseConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n      \r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Layout.js",["765"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  SwipeableDrawer,\r\n  TablePagination,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport PageTitle from \"../PageTitle\";\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from \"../../themes/style\";\r\nimport moment from \"moment\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Notification from \"../Notification\";\r\nimport Actions from \"../Candidates/Actions\";\r\nimport Edit from \"../Candidates/Edit\";\r\nimport View from \"../Candidates/View\";\r\nimport Note from \"../Candidates/Note\";\r\nimport Bar from \"../Candidates/Bar\";\r\nimport Drop from \"../Candidates/Drop\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport Status from \"./Status\";\r\nimport Message from \"../Candidates/Message\";\r\nimport Reverse from \"./Reverse\";\r\nimport ExpandButton from \"../Candidates/ExpandButton\";\r\n\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables(props) {\r\n  const mobileQuery = useMediaQuery(\"(max-width:600px)\");\r\n\r\n  var classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [source, setSource] = useState([]);\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n  const [candidatesNote, setCandidatesNote] = useState([]);\r\n  const [candidatesEdit, setCandidatesEdit] = useState({\r\n    id: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    requirementName: \"\",\r\n    source: \"\",\r\n    invoicedDate: \"\",\r\n    joinedDate: \"\",\r\n    invoiceValue: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    candidateProcessed: \"\",\r\n\r\n    currentLocation: \"\",\r\n    preferredLocation: \"\",\r\n    nativeLocation: \"\",\r\n    relevantExperience: null,\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    dob: \"\",\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    educationalQualification: \"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    recruiterId:\"\",\r\n    currentCompanyName: \"\",\r\n    hideContactDetails: false\r\n  });\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n  const [candidateList, setCandidateList] = useState({\r\n    id: \"\",\r\n    name: \"\",\r\n    mobile: \"\",\r\n    message: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n  });\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id:\"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n\r\n    gender:\"\",\r\n    differentlyAbled:\"\", \r\n    candidateProcessed:\"\",  \r\n    currentLocation: \"\",\r\n    preferredLocation:\"\",\r\n    nativeLocation:\"\",\r\n    relevantExperience:null,\r\n    currentCtc:null,\r\n    expectedCtc:null,\r\n    dob:\"\",\r\n    noticePeriod:\"\",\r\n    reasonForJobChange:\"\",\r\n    reason:\"\",\r\n    educationalQualification:\"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording:\"\",\r\n    candidateSkillExplanationRecording:\"\",\r\n    candidateMindsetAssessmentLink:\"\",\r\n    candidateAndTechPannelDiscussionRecording:\"\",\r\n    mainId:\"\",\r\n    isCandidateCpv:\"\",\r\n    currentCompanyName:\"\",\r\n  });\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n\r\n  const [rowsPerPage] = useState(50);\r\n  const [setCandidatesChange] = useState([]);\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const [file, setFile] = useState([]);\r\n  const [assessment,setAssessment] = useState([]);\r\n \r\n  const [date, setDay] = useState(\"\");\r\n  const [month, setMonth] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from(\r\n    { length: 60 },\r\n    (_, i) => moment(new Date()).format(\"YYYY\") - i,\r\n  );\r\n\r\n  function handleUse(mobile) {\r\n    if (decode.role === \"RECRUITER\") {\r\n      history.push(\"/app/recruiter_candidates\");\r\n    } else {\r\n      history.push(\"/app/cc_candidates\");\r\n    }\r\n    sessionStorage.setItem(\"use\", mobile);\r\n\r\n    setState({ ...state, right: true });\r\n    setDataList(\"ADD\");\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidatesUseUrl,\r\n      data: {\r\n        mobile: mobile.substring(2),\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        // reset({\r\n        //   requirementId:recruitmentId,\r\n        //   mobile: mobile.substring(2),\r\n        //   email: response.data.data?.email,\r\n        //   firstName: response.data.data?.firstName,\r\n        //   lastName: response.data.data?.lastName,\r\n        //   skills: response.data.data?.skills,\r\n        //   experience: response.data.data?.experience,\r\n        //   location: response.data.data?.currentLocation,\r\n\r\n        //    gender: response.data.data?.gender,\r\n        //   differentlyAbled:  response.data.data?.differentlyAbled,\r\n        //   candidateProcessed:  response.data.data?.candidateProcessed,\r\n        //   native:  response.data.data?.nativeLocation,\r\n        //   preferredLocation:  response.data.data?.preferredLocation,\r\n        //   relevantExperience: response.data.data?.relevantExperience,\r\n        //   educationalQualification:  response.data.data?.educationalQualification,\r\n\r\n        //   currentCtc: response.data.data?.currentCtc,\r\n        //   expectedCtc:  response.data.data?.expectedCtc,\r\n        //   noticePeriod: response.data.data?.noticePeriod,\r\n        //   reasonForJobChange: response.data.data?.reasonForJobChange,\r\n        //   reason: response.data.data?.reason,\r\n        //   })\r\n\r\n        setCandidate({\r\n          ...candidate,\r\n          mobile: mobile.substring(2),\r\n          email: response.data.data?.email,\r\n          firstName: response.data.data?.firstName,\r\n          lastName: response.data.data?.lastName,\r\n          skills: response.data.data?.skills,\r\n          experience: response.data.data?.experience,\r\n          location: response.data.data?.currentLocation,\r\n          dob: response.data.data?.dob,\r\n          gender: response.data.data?.gender,\r\n          differentlyAbled: response.data.data?.differentlyAbled,\r\n          candidateProcessed: response.data.data?.candidateProcessed,\r\n          native: response.data.data?.nativeLocation,\r\n          preferredLocation: response.data.data?.preferredLocation,\r\n          relevantExperience: response.data.data?.relevantExperience,\r\n          educationalQualification:\r\n            response.data.data?.educationalQualification,\r\n          currentCtc: response.data.data?.currentCtc,\r\n          expectedCtc: response.data.data?.expectedCtc,\r\n          noticePeriod: response.data.data?.noticePeriod,\r\n          reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          reason: response.data.data?.reason,\r\n          currentCompanyName: response.data.data?.currentCompanyName,\r\n          freeValue:\r\n            decode.isEnableFree === true\r\n              ? \"YES\"\r\n              : decode.isEnablePaid === true\r\n              ? \"NO\"\r\n              : \"YES\",\r\n        });\r\n      }\r\n    });\r\n  }\r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n\r\n  const [shortList, setShortList] = useState({\r\n    id: \"\",\r\n    cand_name: \"\",\r\n    job_id: \"\",\r\n    job_name: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    cand_mobile: \"\",\r\n    statusCode: \"\",\r\n    free: \"\",\r\n  });\r\n\r\n  const [validation, setValidation] = useState(false);\r\n  const [saveOnly, setSaveOnly] = useState(\"YES\");\r\n\r\n  const filterRef = useRef(null);\r\n  const joiningRef = useRef();\r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  const [reverseOpen, setReverseOpen] = React.useState(false);\r\n\r\n  const handleReverseOpen = () => {\r\n    setReverseOpen(true);\r\n  };\r\n\r\n  const handleReverseClose = () => {\r\n    setReverseOpen(false);\r\n  };\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n  const editSchema = Yup.object().shape({\r\n    email: candidatesEdit.recruiterId === decode.recruiterId? Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required') : Yup.string().email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    experience: Yup.number().nullable(true).transform((_, val) => (val ? Number(val) : null)),\r\n    location: Yup.string().nullable().notRequired(),\r\n    alternateMobile:\r\n      phoneValidation === true\r\n        ? Yup.string()\r\n            .required(\"Alternate Contact Number is required\")\r\n            .min(10, \"Must be exactly 10 digits\")\r\n            .max(10, \"Must be exactly 10 digits\")\r\n        : Yup.string(),\r\n    native: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    educationalQualification: Yup.string().nullable().notRequired(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().required(\"Gender is required\").notRequired(),\r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => (val ? Number(val) : null)),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => (val ? Number(val) : null)),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(),\r\n    invoiceDate: Yup.string(),\r\n    invoicedValue: Yup.string(),\r\n    joinedDate: Yup.string(),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const noteSchema = Yup.object().shape({\r\n    message: Yup.string().required(\"Message is required\"),\r\n  });\r\n\r\n  const dropSchema = Yup.object().shape({\r\n    reason: Yup.string().required(\"Reason is required\"),\r\n  });\r\n\r\n  const {\r\n    register: dropCandidates,\r\n    formState: { errors: dropErrors },\r\n    handleSubmit: dropSubmit,\r\n    reset: dropReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(dropSchema),\r\n  });\r\n\r\n  const {\r\n    register: noteCandidates,\r\n    formState: { errors: noteErrors },\r\n    handleSubmit: noteSubmit,\r\n    reset: noteReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(noteSchema),\r\n  });\r\n\r\n  const {\r\n    register: editCandidates,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(editSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    setLoader(true);\r\n\r\n    var mobile = sessionStorage.getItem(\"use\");\r\n\r\n    if (mobile !== \"\" && mobile !== null) {\r\n      setState({ ...state, right: true });\r\n      setDataList(\"ADD\");\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.CandidatesUseUrl,\r\n        data: {\r\n          mobile: mobile.substring(2),\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          sessionStorage.setItem(\"use\", \"\");\r\n          // reset({\r\n          //   requirementId:recruitmentId,\r\n          //   mobile: mobile.substring(2),\r\n          //   email: response.data.data?.email,\r\n          //   firstName: response.data.data?.firstName,\r\n          //   lastName: response.data.data?.lastName,\r\n          //   skills: response.data.data?.skills,\r\n          //   experience: response.data.data?.experience,\r\n          //   location: response.data.data?.currentLocation,\r\n\r\n          //    gender: response.data.data?.gender,\r\n          //   differentlyAbled:  response.data.data?.differentlyAbled,\r\n          //   candidateProcessed:  response.data.data?.candidateProcessed,\r\n          //   native:  response.data.data?.nativeLocation,\r\n          //   preferredLocation:  response.data.data?.preferredLocation,\r\n          //   relevantExperience: response.data.data?.relevantExperience,\r\n          //   educationalQualification:  response.data.data?.educationalQualification,\r\n\r\n          //   currentCtc: response.data.data?.currentCtc,\r\n          //   expectedCtc:  response.data.data?.expectedCtc,\r\n          //   noticePeriod: response.data.data?.noticePeriod,\r\n          //   reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          //   reason: response.data.data?.reason,\r\n          //   })\r\n\r\n          setCandidate({\r\n            ...candidate,\r\n            mobile: mobile.substring(2),\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,\r\n            experience: response.data.data?.experience,\r\n            location: response.data.data?.currentLocation,\r\n            dob: response.data.data?.dob,\r\n            gender: response.data.data?.gender,\r\n            differentlyAbled: response.data.data?.differentlyAbled,\r\n            candidateProcessed: response.data.data?.candidateProcessed,\r\n            native: response.data.data?.nativeLocation,\r\n            preferredLocation: response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:\r\n              response.data.data?.educationalQualification,\r\n            currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc: response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            reason: response.data.data?.reason,\r\n            currentCompanyName: response.data.data?.currentCompanyName,\r\n            freeValue:\r\n              decode.isEnableFree === true\r\n                ? \"YES\"\r\n                : decode.isEnablePaid === true\r\n                ? \"NO\"\r\n                : \"YES\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      setCurrerntPage(1);\r\n      setPage(0);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.CandidatesDataUrl,\r\n        data: {\r\n          \"page\": \"1\",\r\n          \"recruiter\": \"YES\"\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token, sessionStorage.getItem(\"use\")]);\r\n\r\n  function updateData(id) {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.UpdateDataUrl,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          var myCandidateStatuses = response.data.data;\r\n\r\n          axios({\r\n            method: \"post\",\r\n            url: props.UpdateCandidates,\r\n            data: {\r\n              id: id,\r\n            },\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n          }).then(function (result) {\r\n            if (result.data.status === true) {\r\n              const updateState = candidatesData.map((item) => {\r\n                if (item.id === id) {\r\n                  return {\r\n                    ...item,\r\n                    candidateDetail: result.data.data.candidateDetail,\r\n                    invoiceValue: result.data.data.invoiceValue,\r\n                    invoicedDate: result.data.data.invoicedDate,\r\n                    joinedDate: result.data.data.joinedDate,\r\n                    statusCode: result.data.data.statusList.statusCode,\r\n                    statusList: result.data.data.statusList,\r\n                    myCandidateStatuses: myCandidateStatuses,\r\n                    droppedReason: result.data.data.droppedReason,\r\n                    ditchReason: result.data.data.ditchReason,\r\n                    creditNoteReason: result.data.data.creditNoteReason,\r\n                  };\r\n                }\r\n                return item;\r\n              });\r\n\r\n              setCandidatesData(updateState);\r\n             \r\n            }\r\n            setLoader(false);\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleAddNotes(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.AddNotesUrl,\r\n        data: {\r\n          candidateId: candidatesEdit.id,\r\n          message: values.message,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleDropOpen = () => {\r\n    setDropOpen(true);\r\n  };\r\n\r\n  const handleDropClose = () => {\r\n    setDropOpen(false);\r\n  };\r\n\r\n  const [dropReasonOpen, setDropReasonOpen] = useState(false);\r\n\r\n  const handleDropReasonOpen = () => {\r\n    setDropReasonOpen(true);\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleDropReasonClose = () => {\r\n    setDropReasonOpen(false);\r\n  };\r\n\r\n  const reasonRef = useRef();\r\n\r\n  const [reasonOpen, setReasonOpen] = useState(false);\r\n\r\n  const handleReasonOpen = () => {\r\n    setStatusOpen(false);\r\n    setStatusNewOpen(false);\r\n    setReasonOpen(true);\r\n  };\r\n\r\n  const handleReasonClose = () => {\r\n    setReasonOpen(false);\r\n  };\r\n\r\n  const [changeMessageOpen, setChangeMessageOpen] = useState(false);\r\n\r\n  const handleChangeMessageOpen = () => {\r\n    setChangeMessageOpen(true);\r\n    handleStatusClose();\r\n  };\r\n\r\n  const handleChangeMessageClose = () => {\r\n    setChangeMessageOpen(false);\r\n  };\r\n\r\n  function getFilterData() {\r\n    const form = filterRef.current;\r\n    if (form[\"fromDate\"].value > form[\"toDate\"].value) {\r\n      handleNotificationCall(\"error\", \"Check your selected dates\");\r\n      return\r\n    }\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiter: \"YES\",\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidatesDataUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   axios({\r\n  //     method: \"post\",\r\n  //     url: props.requirementListUrl,\r\n  //     data: {\r\n  //       page: \"1\",\r\n  //     },\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Authorization: token,\r\n  //     },\r\n  //   }).then(function (response) {\r\n  //     if (response.data.status === true) {\r\n  //       setRequirement(response.data.data);\r\n  //     }\r\n  //   });\r\n  // }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.SourceUrl,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [token]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n\r\n    const form = filterRef.current;\r\n\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      recruiter: \"YES\"\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidatesDataUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n  // function CheckAlreadyExit(addList){\r\n\r\n  //   var dob = addList.day+\"-\"+addList.month+\"-\"+addList.year;\r\n\r\n  //   axios({\r\n  //     method: \"post\",\r\n  //     url: props.CheckAlreadyExitUrl,\r\n  //     data: {\r\n  //       email: addList.email,\r\n  //       firstName: addList.firstName,\r\n  //       lastName: addList.lastName,\r\n  //       mobile: addList.mobile,\r\n  //       requirementId: recruitmentId,\r\n  //       skills: addList.skills,\r\n  //       sourceId: addList.source,\r\n  //       isAnswered: candidate.freeValue,\r\n  //       message: \"\",\r\n  //       experience:addList.experience,\r\n  //       currentLocation: addList.location,\r\n  //       alternateMobile:addList.alternateMobile,\r\n  //       preferredLocation:addList.preferredLocation,\r\n  //       nativeLocation:addList.native,\r\n  //        relevantExperience:addList.relevantExperience,\r\n  //       currentCtc:addList.currentCtc,\r\n  //       expectedCtc:addList.expectedCtc,\r\n  //       dob: addList.day===undefined? \"\" : dob!== \"--\"?  addList.day+\"-\"+addList.month+\"-\"+addList.year:\"\",\r\n  //       noticePeriod:addList.noticePeriod,\r\n  //       reasonForJobChange:addList.reasonForJobChange,\r\n  //       candidateProcessed:addList.candidateProcessed,\r\n  //       differentlyAbled:addList.differentlyAbled,\r\n  //       educationalQualification:addList.educationalQualification,\r\n  //       gender:addList.gender,\r\n  //       reason: addList.reason,\r\n  //       sendMessage: \"\"\r\n  //     },\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Authorization: token,\r\n  //     },\r\n  //   }).then(function (response) {\r\n\r\n  //     if (response.data.status === true) {\r\n\r\n  //       handleClickOpen();\r\n\r\n  // } else{\r\n  //   handleNotificationCall(\"error\", response.data.message);\r\n\r\n  // }\r\n  // });\r\n  // }\r\n\r\n  function handleEdit(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var dob = values.day + \"-\" + values.month + \"-\" + values.year;\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.EditUrl,\r\n        data: {\r\n          id: candidatesEdit.id,\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          skills: values.skills,\r\n          experience: values.experience,\r\n          currentLocation: values.location,\r\n          sourceId: values.source,\r\n          invoiceValue: values.invoicedValue,\r\n          invoicedDate: values.invoicedDate,\r\n          joinedDate: values.joinedDate,\r\n          alternateMobile: values.alternateMobile,\r\n          preferredLocation: values.preferredLocation,\r\n          nativeLocation: values.native,\r\n          relevantExperience: values.relevantExperience,\r\n          currentCtc: values.currentCtc,\r\n          expectedCtc: values.expectedCtc,\r\n          dob:\r\n            values.day === undefined\r\n              ? \"\"\r\n              : dob !== \"--\"\r\n              ? values.day + \"-\" + values.month + \"-\" + values.year\r\n              : \"\",\r\n          noticePeriod: values.noticePeriod,\r\n          reasonForJobChange: values.reasonForJobChange,\r\n          candidateProcessed: values.candidateProcessed,\r\n          differentlyAbled: values.differentlyAbled,\r\n          educationalQualification: values.educationalQualification,\r\n          gender: values.gender,\r\n          reason: values.reason,\r\n          candidateRecruiterDiscussionRecording:values.candidateRecruiterDiscussionRecording, \r\n          candidateSkillExplanationRecording:values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink:values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording:values.candidateAndTechPannelDiscussionRecording,\r\n          hideContactDetails: candidatesEdit.hideContactDetails,\r\n          currentCompanyName:values.currentCompanyName,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            if (file !== undefined) {\r\n              if (file?.length !== 0) {\r\n                uploadResume(file, response.data.candidateDetailsId);\r\n              }\r\n            }\r\n\r\n            if(assessment !== undefined ){\r\n              if(assessment?.length !== 0){\r\n                uploadAssessment(assessment, response.data.candidateId);\r\n              }\r\n            }\r\n\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            updateData(candidatesEdit.id);\r\n            setState({ ...state, right: false });\r\n            handleNotificationCall(\"success\", response.data.message);\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n    \r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadResume(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"resume\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.UpdateResumeUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        // aiResumeUpload(data)\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id); \r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n   \r\n      if (response.data.status === true) {\r\n         \r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function changeStatus(send, message, status, candidateId) {\r\n    setLoader(true);\r\n    const template_name =\r\n      shortList.statusCode === 303\r\n        ? \"1st_interview_round\"\r\n        : shortList.statusCode === 3031\r\n        ? \"initial_interview_rounds\"\r\n        : shortList.statusCode === 304\r\n        ? status === \"Schedule Another Interview\"\r\n          ? \"initial_interview_rounds\"\r\n          : status === \"Schedule Final Interview\"\r\n          ? \"final_interview_round\"\r\n          : status === \"Send Document\"\r\n          ? \"document_collect\"\r\n          : \"\"\r\n        : shortList.statusCode === 3041\r\n        ? \"document_collect\"\r\n        : shortList.statusCode === 305\r\n        ? \"salary_breakup_shared_confirmation\"\r\n        : shortList.statusCode === 307\r\n        ? \"offer_released_confirmation\"\r\n        : shortList.statusCode === 308\r\n        ? status === \"Joining Confirmation\"\r\n          ? \"joining_confirmation\"\r\n          : \"\"\r\n        : \"\";\r\n\r\n    const vars =\r\n      shortList.statusCode === 308\r\n        ? [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem(\"companyName\"),\r\n          ]\r\n        : [\r\n            shortList.cand_name,\r\n            shortList.job_id,\r\n            shortList.rec_name,\r\n            shortList.rec_mobile_no,\r\n            localStorage.getItem(\"companyName\"),\r\n          ];\r\n\r\n    var url = \"\";\r\n    if (shortList.free === \"YES\") {\r\n      url = props.YesCadidateStatusUrl;\r\n    } else {\r\n      url = props.SendMessageUrl;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        sendMessage: send,\r\n        candidateId: candidateId,\r\n        phone_number: shortList.cand_mobile,\r\n        template_name: template_name,\r\n        vars: vars,\r\n        message: message,\r\n        candidate_name: shortList.cand_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        if (shortList.free === \"YES\" && send === true) {\r\n          window.open(\r\n            \"https://api.whatsapp.com/send?phone=\" +\r\n              shortList.cand_mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n          );\r\n        } \r\n      \r\n        setState({ ...state, right: false });\r\n        updateData(candidateId);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n\r\n      handleStatusClose();\r\n      handleStatusNewClose();\r\n    });\r\n  }\r\n\r\n  function joinedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.JoinedStatusUrl,\r\n      data: {\r\n        candidateId: shortList.id,\r\n        joinedDate: joiningRef.current.value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function updateJoiningDitchedStatus() {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.JoiningDitchedStatusUrl,\r\n      data: {\r\n        candidateId: shortList.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleStatusClose();\r\n        handleStatusNewClose();\r\n        updateData(shortList.id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function DropStatus(values) {\r\n    setLoader(true);\r\n    var url = props.DropStatusUrl;\r\n    return new Promise((resolve) => {\r\n      \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          id: shortList.id,\r\n          droppedReason: values.reason,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id);\r\n          handleDropReasonClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function changeStcStatus() {\r\n    var url = props.StcStatusUrl;\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        id: shortList.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        updateData(shortList.id);\r\n        handleChangeMessageClose();\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function OfferDeclineStatus(values) {\r\n    setLoader(true);\r\n    var url = props.OfferDeclineStatusUrl;\r\n\r\n    return new Promise((resolve) => {\r\n    \r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          candidateId: shortList.id,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          updateData(shortList.id);\r\n          handleStatusNewClose();\r\n          resolve();\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n          setLoader(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"VIEW\") {\r\n      setDataList(\"VIEW\");\r\n    } else {\r\n      setDataList(\"NOTES\");\r\n    }\r\n    if (name !== \"NOTES\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: props.UpdateCandidates,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n      \r\n          if (response.data.status === true) {\r\n            setCandidateView({\r\n              ...candidateView,\r\n              id: response.data.data.id,\r\n              chatId: response.data.chatUser?.id,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile,\r\n              cc: response.data.data.requirement?.recruiter?.firstName + \" \" + response.data.data.requirement?.recruiter?.lastName,\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              clientName: response.data.data.requirement?.client?.clientName,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              statusCode: response.data.data.statusList?.statusCode,\r\n              source: response.data.data.source?.name,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n              candidateUniqueId: response.data.data.uniqueId,\r\n              isAnswered: response.data.data.isAnswered,\r\n              currentLocation:  response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation: response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:  response.data.data.candidateDetail?.nativeLocation,\r\n              experience: response.data.data.candidateDetail?.experience,\r\n              relevantExperience: response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n              dob: response.data.data.candidateDetail?.dob,\r\n              noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:  response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason: response.data.data.candidateDetail?.reason,\r\n              candidateProcessed: response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled:  response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification: response.data.data.candidateDetail?.educationalQualification,\r\n              gender: response.data.data.candidateDetail?.gender,\r\n              resume: response.data.data.candidateDetail?.resume,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile, \r\n                candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n                candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n                candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n                candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n                mainId: response.data.data.mainId, \r\n                isCandidateCpv: response.data.data.isCandidateCpv,\r\n                currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setCandidatesEdit({\r\n              ...candidatesEdit,\r\n              id: response.data.data.id,\r\n              requirementName: response.data.data.requirement?.requirementName,\r\n              email: response.data.data.candidateDetail?.email,\r\n              mobile: response.data.data.candidateDetail?.mobile?.substring(2),\r\n              firstName: response.data.data.candidateDetail?.firstName,\r\n              lastName: response.data.data.candidateDetail?.lastName,\r\n              skills: response.data.data.candidateDetail?.skills,\r\n              source: response.data.data.source?.id,\r\n              invoicedDate: response.data.data.invoicedDate,\r\n              joinedDate: response.data.data.joinedDate,\r\n              invoiceValue: response.data.data.invoiceValue,\r\n              currentLocation:  response.data.data.candidateDetail?.currentLocation,\r\n              preferredLocation:  response.data.data.candidateDetail?.preferredLocation,\r\n              nativeLocation:   response.data.data.candidateDetail?.nativeLocation,\r\n              experience: response.data.data.candidateDetail?.experience,\r\n              relevantExperience:   response.data.data.candidateDetail?.relevantExperience,\r\n              currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n              expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n              dob: response.data.data.candidateDetail?.dob,\r\n              noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n              reasonForJobChange:  response.data.data.candidateDetail?.reasonForJobChange,\r\n              reason: response.data.data.candidateDetail?.reason,\r\n              candidateProcessed: response.data.data.candidateDetail?.candidateProcessed,\r\n              differentlyAbled: response.data.data.candidateDetail?.differentlyAbled,\r\n              educationalQualification:  response.data.data.candidateDetail?.educationalQualification,\r\n              gender: response.data.data.candidateDetail?.gender,\r\n              alternateMobile: response.data.data.candidateDetail?.alternateMobile.substring(2),\r\n              resume: response.data.data.candidateDetail?.resume,\r\n              candidateRecruiterDiscussionRecording:response.data.data.candidateRecruiterDiscussionRecording,\r\n              candidateSkillExplanationRecording:response.data.data.candidateSkillExplanationRecording,\r\n              candidateMindsetAssessmentLink:response.data.data.candidateMindsetAssessmentLink,\r\n              candidateAndTechPannelDiscussionRecording:response.data.data.candidateAndTechPannelDiscussionRecording,\r\n              mainId: response.data.data.mainId, \r\n              recruiterId: response.data.data.recruiterId, \r\n              hideContactDetails: response.data.data.hideContactDetails,\r\n              currentCompanyName:response.data.data.candidateDetail?.currentCompanyName,\r\n            });\r\n\r\n            setState({ ...state, right: true });\r\n            setLoader(false);\r\n          }  else{\r\n            setLoader(false);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.UpdateDataUrl,\r\n        data: {\r\n          id: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setListCanditate(response.data.data);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setCandidatesEdit({\r\n        ...candidatesEdit,\r\n        id: values,\r\n      });\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.CandidatesNoteUrl,\r\n        data: {\r\n          candidateId: values,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setCandidatesNote(response.data.data);\r\n          setState({ ...state, right: true });\r\n          setLoader(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>Total : {count}</Grid>\r\n    </>\r\n  );\r\n\r\n  // const CustomExpandIcon = ({ isRowExpanded }) => {\r\n  //   if (isRowExpanded) {\r\n  //     return (\r\n  //       <Tooltip title=\"List of Invoiced Candidates\" placement=\"right\">\r\n  //         <ExpandLessIcon />\r\n  //       </Tooltip>\r\n  //     );\r\n  //   } else {\r\n  //     return (\r\n  //       <Tooltip title=\"List of Invoiced Candidates\" placement=\"right\">\r\n  //         <ExpandMoreIcon/>\r\n  //       </Tooltip>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: \"Oops! Matching record could not be found\",\r\n      },\r\n    },\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => {},\r\n    filterType: \"dropdown\",\r\n    search: false,\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery === true ? \"vertical\" : \"standard\",\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n              <Bar title=\"Candidates\" list={list} />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n  const components = {\r\n    ExpandButton: function (props) {\r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  const [stausOpen, setStatusOpen] = React.useState(false);\r\n  const [stausNewOpen, setStatusNewOpen] = React.useState(false);\r\n  const [dropOpen, setDropOpen] = React.useState(false);\r\n  const [messageOpen, setMessageOpen] = React.useState(false);\r\n\r\n  const [candidate, setCandidate] = useState({\r\n    requirementId: \"\",\r\n    source: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    candidateProcessed: \"\",\r\n    native: \"\",\r\n    preferredLocation: \"\",\r\n    relevantExperience: null,\r\n    educationalQualification: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    dob: \"\",\r\n    freeValue:\r\n      decode.isEnableFree === true\r\n        ? \"YES\"\r\n        : decode.isEnablePaid === true\r\n        ? \"NO\"\r\n        : \"YES\",\r\n  });\r\n\r\n  const handleStatusOpen = () => {\r\n    setStatusOpen(true);\r\n  };\r\n\r\n  const handleStatusClose = () => {\r\n    setStatusOpen(false);\r\n  };\r\n\r\n  const handleStatusNewOpen = () => {\r\n    setStatusNewOpen(true);\r\n  };\r\n\r\n  const handleStatusNewClose = () => {\r\n    setStatusNewOpen(false);\r\n  };\r\n\r\n  const handleMessageOpen = () => {\r\n    setMessageOpen(true);\r\n  };\r\n\r\n  const handleMessageClose = () => {\r\n    setMessageOpen(false);\r\n  };\r\n  const [view, setView] = useState(\"\");\r\n\r\n  function sendMessage(candidateId, mobile, message, candidate_name, list) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.SendMessageUrl,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"general_message\",\r\n        vars: [\r\n          candidate_name,\r\n          list.rec_name,\r\n          list.rec_mobile_no,\r\n          localStorage.getItem(\"companyName\"),\r\n        ],\r\n        message: message,\r\n        candidate_name: candidate_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (response.data.isNew === true) {\r\n            getmessageIni();\r\n          }\r\n\r\n          setLoader(false);\r\n          handleMessageClose();\r\n          handleNotificationCall(\"success\", response.data.message); \r\n\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.MyWalletUrl,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  function dropConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.DropStatusUrl,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setDropOpen(false);\r\n        updateData(id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  function reverseConfirmation(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.reverseUrl,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setReverseOpen(false);\r\n        setLoader(false);\r\n        updateData(id);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n        setLoader(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Edit\r\n          setValidation={setValidation}\r\n          validation={validation}\r\n          editSubmit={editSubmit}\r\n          handleEdit={handleEdit}\r\n          setCandidatesEdit={setCandidatesEdit}\r\n          candidatesEdit={candidatesEdit}\r\n          editCandidates={editCandidates}\r\n          editIsSubmitting={editIsSubmitting}\r\n          editErrors={editErrors}\r\n          toggleDrawer={toggleDrawer}\r\n          source={source}\r\n          setFile={setFile}\r\n          file={file}\r\n          setAssessment={setAssessment}\r\n          assessment={assessment}\r\n          days={days}\r\n          months={months}\r\n          years={years}\r\n          setDay={setDay}\r\n          setMonth={setMonth}\r\n          setYear={setYear}\r\n          date={date}\r\n          month={month}\r\n          year={year}\r\n          setPhoneValidation={setPhoneValidation}\r\n          show ={candidatesEdit.recruiterId=== decode.recruiterId? true : false}  \r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidatesEdit}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Note\r\n          toggleDrawer={toggleDrawer}\r\n          candidatesNote={candidatesNote}\r\n          noteCandidates={noteCandidates}\r\n          noteErrors={noteErrors}\r\n          handleAddNotes={handleAddNotes}\r\n          noteSubmit={noteSubmit}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n          <PageTitle title={props.title} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n          <TextField\r\n            required\r\n            name=\"fromDate\"\r\n            label=\"From\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n          />\r\n\r\n          <TextField\r\n            required\r\n            name=\"toDate\"\r\n            label=\"To\"\r\n            InputLabelProps={{ shrink: true }}\r\n            className={classes.filterWidth}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            components={components}\r\n            options={table_options}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"View Candidate\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <Actions\r\n                  index={index}\r\n                  item={item}\r\n                  reset={editreset}\r\n                  editreset={editreset}\r\n                  noteReset={noteReset}\r\n                  setCandidateList={setCandidateList}\r\n                  handleMessageOpen={handleMessageOpen}\r\n                  candidateList={candidateList}\r\n                  handleDropOpen={handleDropOpen}\r\n                  handleReverseOpen={handleReverseOpen}\r\n                  handleShow={handleShow}\r\n                  setFile={setFile}\r\n                  setAssessment={setAssessment}\r\n                  setCandidatesChange={setCandidatesChange}\r\n                  setPhoneValidation={setPhoneValidation}\r\n                  handleUse={handleUse}\r\n                />,\r\n                item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item}\r\n                      handleStatusOpen={handleStatusOpen}\r\n                      handleStatusNewOpen={handleStatusNewOpen}\r\n                      setValidation={setValidation}\r\n                      setShortList={setShortList}\r\n                      shortList={shortList}\r\n                      setView={setView}\r\n                      view={view}\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n                <>\r\n                  {item.candidateDetail?.firstName +\r\n                    \" \" +\r\n                    item.candidateDetail?.lastName}\r\n                  <br /> {\" (\" + item.uniqueId + \")\"}\r\n                </>,\r\n                item.mainId === decode.mainId ? \r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </> \r\n                : item.hideContactDetails !== true?\r\n                <>  { item.candidateDetail?.email + \" /\"} <br/>{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>  \r\n                :\"\",\r\n                <>\r\n                  \r\n                  {item.requirement?.requirementName} <br />\r\n                  {\"(\" + item.requirement?.uniqueId + \")\"}\r\n                </>,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName,\r\n                item.requirement?.recruiter?.firstName +\r\n                  \" \" +\r\n                  item.requirement?.recruiter?.lastName,\r\n                  <Tooltip title=\"View Candidate\" placement=\"bottom\" aria-label=\"view\">\r\n                 <ViewIcon\r\n                   className={classes.toolIcon}\r\n                   onClick={(e) => {\r\n                     handleShow(item.id,  \"VIEW\");\r\n                   }}\r\n                 />\r\n               </Tooltip>,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Message\r\n        setState={setState}\r\n        state={state}\r\n        candidateList={candidateList}\r\n        decode={decode}\r\n        sendMessage={sendMessage}\r\n        handleMessageOpen={handleMessageOpen}\r\n        messageOpen={messageOpen}\r\n        handleMessageClose={handleMessageClose}\r\n      />\r\n\r\n      <Dialogs\r\n        handleStatusClose={handleStatusClose}\r\n        handleStatusNewClose={handleStatusNewClose}\r\n        validation={validation}\r\n        stausOpen={stausOpen}\r\n        stausNewOpen={stausNewOpen}\r\n        changeStatus={changeStatus}\r\n        shortList={shortList}\r\n        view={view}\r\n        setView={setView}\r\n        joinedStatus={joinedStatus}\r\n        updateJoiningDitchedStatus={updateJoiningDitchedStatus}\r\n        OfferDeclineStatus={OfferDeclineStatus}\r\n        joiningRef={joiningRef}\r\n        saveOnly={saveOnly}\r\n        setSaveOnly={setSaveOnly}\r\n        dropCandidates={dropCandidates}\r\n        dropErrors={dropErrors}\r\n        dropSubmit={dropSubmit}\r\n        dropReset={dropReset}\r\n        DropStatus={DropStatus}\r\n        handleDropReasonClose={handleDropReasonClose}\r\n        dropReasonOpen={dropReasonOpen}\r\n        handleDropReasonOpen={handleDropReasonOpen}\r\n        changeMessageOpen={changeMessageOpen}\r\n        handleChangeMessageClose={handleChangeMessageClose}\r\n        changeStcStatus={changeStcStatus}\r\n        handleChangeMessageOpen={handleChangeMessageOpen}\r\n        reasonRef={reasonRef}\r\n        handleReasonOpen={handleReasonOpen}\r\n        reasonOpen={reasonOpen}\r\n        handleReasonClose={handleReasonClose}\r\n      />\r\n\r\n      <Drop\r\n        handleDropClose={handleDropClose}\r\n        dropOpen={dropOpen}\r\n        dropConfirmation={dropConfirmation}\r\n        candidateList={candidateList}\r\n      />\r\n\r\n      {decode.role === \"CLIENTCOORDINATOR\" ? (\r\n        <Reverse\r\n          handleReverseClose={handleReverseClose}\r\n          reverseOpen={reverseOpen}\r\n          reverseConfirmation={reverseConfirmation}\r\n          candidateList={candidateList}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <SwipeableDrawer\r\n        anchor=\"right\"\r\n        open={state[\"right\"]}\r\n        onClose={toggleDrawer(\"right\", false)}\r\n        onOpen={toggleDrawer(\"right\", true)}\r\n        classes={{\r\n          paper:\r\n            dataList === \"VIEW\" || dataList === \"NOTES\"\r\n              ? classes.drawer\r\n              : classes.clientDrawer,\r\n        }}\r\n      >\r\n        {list(\"right\")}\r\n      </SwipeableDrawer>\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\transaction\\Transaction.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\chat\\Chat.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\contact\\Contact.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\company\\Company.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\plans\\Plans.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\price\\Price.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\invoice\\Invoice.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\source\\Source.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\ticket\\Ticket.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\users\\Users.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\adminUser\\Admin.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\Projects.js",["766"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Collapse,\r\n  Box,\r\n  SwipeableDrawer,\r\n  Switch,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Typography,\r\n  TablePagination,\r\n  TextField,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n// components\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardMedia\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport { toast } from \"react-toastify\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport EditRoundedIcon from \"@material-ui/icons/EditRounded\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\n// data\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Notification from \"../../components/Notification\";\r\nimport AddProject from \"../../components/Admin/AddProject.js\";\r\n\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport moment from \"moment\";\r\n// import CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\n// import XlsxPopulate from \"xlsx-populate\";\r\n// import { saveAs } from \"file-saver\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport ProjectAction from \"./ProjectAction.js\";\r\nimport ProjectView from \"./ProjectView.js\";\r\nimport ProjectApproval from \"./ProjectApproval.js\";\r\nimport classNames from \"classnames\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Tables() {\r\n  const classes = useStyles();\r\n  const mobileQuery = useMediaQuery('(max-width:600px)');\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const [clientData, setClientData] = useState([]);\r\n  const [clientEdit, setClientEdit] = useState({\r\n    id: \"\",\r\n    clientName: \"\",\r\n    clientIndustry: \"\",\r\n    clientWebsite: \"\",\r\n    hrbpCode: \"\",\r\n    reasonForHiring: \"\",\r\n    projectRegion: \"\",\r\n    projectLocation: \"\",\r\n    recruiterId: \"\",\r\n    handler: {},\r\n    billable: \"\",\r\n    lohName: \"\",\r\n    lohNoOfHires: \"\",\r\n    aggStartDate: \"\",\r\n    aggEndDate: \"\",\r\n    aggRec: \"\",\r\n    aggName: \"\",\r\n    aggEmail: \"\",\r\n    aggMobile: \"\",\r\n    status: \"\",\r\n    createdAt: \"\",\r\n  });\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n  const [display, setDisplay] = useState(false);\r\n  const [clientsName, setClientsName] = useState([]);\r\n  const [recruiterName, setRecruiterName] = useState([])\r\n  const [billable, setBillable] = useState(false);\r\n  var [notificationsPosition] = useState(2);\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n  const [displayAdd, setDisplayAdd] = useState(false);\r\n  const [displayOrgAdd, setDisplayOrgAdd] = useState(false);\r\n  const [Id, setId] = useState(0);\r\n  const [addLevelOfHireData, setAddLevelOfHireData] = useState({\r\n    clientId: \"\",\r\n    name: \"\",\r\n    noOfHires: \"\",\r\n  });\r\n  const [editLevelOfHireData, setEditLevelOfHireData] = useState({});\r\n  const [collapseopen, setCollapseopen] = useState({\r\n    hireLevelList: false,\r\n    orgRecList: false\r\n  });\r\n  const [viewProjOpen, setViewProjOpen] = useState({\r\n    viewAllList: false,\r\n    hireLevelList: false,\r\n    orgRecList: false\r\n  });\r\n\r\n  const handleViewProjClick = (list) => {\r\n    setViewProjOpen((prevState) => ({\r\n      ...prevState,\r\n      [list]: !prevState[list]\r\n    }));\r\n  };\r\n\r\n  const handleCollapseClick = (list) => {\r\n    setCollapseopen((prevState) => ({\r\n      ...prevState,\r\n      [list]: !prevState[list]\r\n    }));\r\n  };\r\n\r\n  const handleLevelOfHireEdit = (item) => {\r\n    setEditLevelOfHireData({\r\n      id: item.id,\r\n      name: item.name,\r\n      noOfHires: item.noOfHires,\r\n    });\r\n    setDisplay(true);\r\n  };\r\n\r\n  const handleLevelOfHireAdd = (item) => {\r\n    setAddLevelOfHireData({\r\n      clientId: item.id,\r\n      name: \"\",\r\n      noOfHires: \"\",\r\n    });\r\n    setDisplayAdd(true);\r\n  };\r\n\r\n  const handleAddNewLevelOfHire = (e, field) => {\r\n    setAddLevelOfHireData({\r\n      ...addLevelOfHireData,\r\n      [field]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleLevelOfHireChange = (e, field) => {\r\n    setEditLevelOfHireData({\r\n      ...editLevelOfHireData,\r\n      [field]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSaveEditLevelOfHire = () => {\r\n    if (editLevelOfHireData.name === \"\" || editLevelOfHireData.noOfHires === \"\") {\r\n      handleNotificationCall('error', \"Please Fill both fields\");\r\n      return\r\n    }\r\n\r\n    axios({\r\n      method: 'post',\r\n      url: `${process.env.REACT_APP_SERVER}CC/editHiringLevel`,\r\n      data: editLevelOfHireData,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.data.status === true) {\r\n          handleNotificationCall('success', response.data.message);\r\n          setDisplay(false);\r\n          handleShow(clientEdit.id, 'EDIT');\r\n        } else {\r\n          handleNotificationCall('error', response.data.message);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  function handleSaveAddLevelOfHire() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}CC/addHiringLevel`,\r\n      data: addLevelOfHireData,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          handleShow(clientEdit.id, \"EDIT\");\r\n\r\n          setDisplayAdd(false);\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[notificationsPosition],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    clientName: Yup.string().max(255).required(\"Project Name is required\"),\r\n    clientIndustry: Yup.string()\r\n      .max(255)\r\n      .required(\"Project Division is required\"),\r\n    recruiterId: Yup.string().required(\"Hiring Manager is required\"),\r\n    hrbpCode: Yup.string().required(\"HRBU is reuired\"),\r\n    reasonForHiring: Yup.string().required(\"Reason For Hiring is reuired\"),\r\n    projectRegion: Yup.string().required(\"Project Region is reuired\"),\r\n    projectLocation: Yup.string().required(\"Project Location is reuired\"),\r\n    billable: Yup.string().required(\"Billable Field is reuired\"),\r\n    aggStartDate: Yup.string().max(255).required(\"Start Date is required\"),\r\n    aggEndDate: Yup.string().max(255).required(\"End Date is required\"),\r\n  });\r\n\r\n  const approveSchema = Yup.object().shape({\r\n    approverName: Yup.string().max(255).required(\"Approver Name is required\"),\r\n    approverEmail: Yup.string()\r\n      .max(255)\r\n      .required(\"Approver Email is required\"),\r\n    approverDesignation: Yup.string().required(\"Approver Designation is required\"),\r\n    approverContent: Yup.string().required(\"Approver Content is reuired\"),\r\n  });\r\n\r\n  const {\r\n    register: editClient,\r\n    formState: { errors: editErrors, isSubmitting: editIsSubmitting },\r\n    handleSubmit: editSubmit,\r\n    reset: editreset,\r\n    setValue: setEditValue,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const {\r\n    register: approveProject,\r\n    formState: { errors: approveErrors, isSubmitting: approveIsSubmitting },\r\n    handleSubmit: approveSubmit,\r\n    reset: approveReset,\r\n    setValue: setApproveValue,\r\n  } = useForm({\r\n    mode: \"onSubmit\",\r\n    resolver: yupResolver(approveSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    setLoader(true);\r\n\r\n    const fetchData = async () => {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/getAllClients`,\r\n        data: {\r\n          page: \"1\",\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n\r\n          setClientData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      });\r\n      const dataset = await getRecruiterName();\r\n      setRecruiterName(dataset)\r\n\r\n    };\r\n    const getUserName = async () => {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/getAllClientList`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setLoader(false);\r\n            setUserName(response.data.data);\r\n          }\r\n        })\r\n\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    };\r\n    if (decode.role === \"ADMIN\") {\r\n      const getClientName = async () => {\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}admin/getAllCCList`,\r\n          data: {},\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n            if (response.data.status === true) {\r\n              setLoader(false);\r\n              setClientsName(response.data.data);\r\n            }\r\n          })\r\n\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      };\r\n      getClientName();\r\n    }\r\n    fetchData();\r\n    getUserName();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token]);\r\n  const getRecruiterName = async () => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/orgPocForCompany`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setRecruiterName(response.data.data);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n  const [userName, setUserName] = useState([]);\r\n  const [clientId, setClientId] = useState(null);\r\n\r\n  const filterRef = useRef(null);\r\n\r\n  const handleFromDateChange = (event) => {\r\n    setFromDate(filterRef.current.fromDate.value);\r\n  };\r\n\r\n  const handleToDateChange = (event) => {\r\n    setToDate(filterRef.current.toDate.value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setClientId(null);\r\n    forceUpdate();\r\n  }\r\n\r\n  function getFilterData() {\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n    const form = filterRef.current;\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      clientId: clientId?.id,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/getAllClients`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setClientData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleAdd(values) {\r\n    if (values.aggStartDate >= values.aggEndDate) {\r\n      handleNotificationCall(\"error\", \"Select Hiring Dates Properly\");\r\n      return\r\n    }\r\n    const filteredRecruiterFields = recruiterFields.filter(item => item.recruiterId !== \"\");\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/addClient`,\r\n        data: {\r\n          clientName: values.clientName,\r\n          clientIndustry: values.clientIndustry,\r\n          handlerId: values.recruiterId,\r\n          clientWebsite: values.clientWebsite,\r\n          aggStartDate: values.aggStartDate,\r\n          aggEndDate: values.aggEndDate,\r\n          orgRec: filteredRecruiterFields,\r\n          hrbpCode: values.hrbpCode,\r\n          reasonForHiring: values.reasonForHiring,\r\n          projectRegion: values.projectRegion,\r\n          projectLocation: values.projectLocation,\r\n          billable: values.billable,\r\n          levelOfHiring: levelOfHiringFields,\r\n\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  function handleEdit(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/editClient`,\r\n        data: {\r\n          id: clientEdit.id,\r\n          clientName: values.clientName,\r\n          clientIndustry: values.clientIndustry,\r\n          clientWebsite: values.clientWebsite,\r\n          aggStartDate: values.aggStartDate,\r\n          aggEndDate: values.aggEndDate,\r\n          recruiterId: values.recruiterId,\r\n          hrbpCode: values.hrbpCode,\r\n          projectRegion: values.projectRegion,\r\n          projectLocation: values.projectLocation,\r\n          reasonForHiring: values.reasonForHiring,\r\n          billable: values.billable,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            handleNotificationCall(\"success\", response.data.message);\r\n\r\n            forceUpdate();\r\n\r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          }\r\n\r\n          setLoader(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  function handleRecAdd() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/addOrgRecruiter`,\r\n      data: {\r\n        name: newPOCRecruiterAdd[0].name,\r\n        email: newPOCRecruiterAdd[0].email,\r\n        mobile: newPOCRecruiterAdd[0].mobile,\r\n        clientId: clientEdit.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          handleShow(clientEdit.id, \"EDIT\");\r\n          setNewPOCRecruiterAdd([{\r\n            name: \"\",\r\n            mobile: \"\",\r\n            email: \"\",\r\n            recruiterId: \"\"\r\n          }])\r\n          setDisplayOrgAdd(false);\r\n          handleNotificationCall(\"success\", response.data.message);\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleClientStatus(id, value) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/changeClientStatus`,\r\n      data: {\r\n        clientId: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setLoader(false);\r\n        const switchState = clientData.map(item => {\r\n\r\n          if (item.id === id) {\r\n            return { ...item, statusList: { ...item.statusList, statusName: value === true ? \"ACTIVE\" : \"INACTIVE\" } };\r\n\r\n          }\r\n          return item;\r\n        });\r\n        setClientData(switchState);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleAddApprover(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}CC/sendApprovalMail`,\r\n        data: {\r\n          id: clientEdit.id,\r\n          name: values.approverName,\r\n          email: values.approverEmail,\r\n          designation: values.approverDesignation,\r\n          content: values.approverContent,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          forceUpdate();\r\n          // setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  function handleStatus(id, value) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/changeOrgRecruiterStatus`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setLoader(false);\r\n        const switchState = recruiterEditFields.map(item => {\r\n\r\n          if (item.id === id) {\r\n            return { ...item, isActive: value };\r\n\r\n          }\r\n          return item;\r\n        });\r\n\r\n        setRecruiterEditFields(switchState);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n    reset();\r\n    editreset();\r\n    if (name === \"EDIT\") {\r\n      setDataList(\"EDIT\");\r\n    } else if (name === \"APPROVAL\") {\r\n      setDataList(\"APPROVAL\")\r\n    }\r\n    else {\r\n      setDataList(\"VIEW\");\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewClient`,\r\n      data: {\r\n        id: values,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setRecruiterEditFields(response.data.orgRecruiter);\r\n          setRecruiterFields(response.data.orgRecruiter);\r\n          setEditRecFields(response.data.orgRecruiter);\r\n          setLevelOfHireEditFields(response.data.levelOfHiring)\r\n          setClientEdit({\r\n            ...clientEdit,\r\n            id: response.data.data.id,\r\n            clientName: response.data.data.clientName,\r\n            clientIndustry: response.data.data.clientIndustry,\r\n            clientWebsite: response.data.data.clientWebsite,\r\n            recruiterId: response.data.data?.handlerId,\r\n            hrbpCode: response.data.data?.hrbpCode,\r\n            handler: response.data.data?.handler,\r\n            reasonForHiring: response.data.data?.reasonForHiring,\r\n            projectRegion: response.data.data?.projectRegion,\r\n            projectLocation: response.data.data?.projectLocation,\r\n            billable: response.data.data?.billable,\r\n            lohName: \"\",\r\n            lohNoOfHires: \"\",\r\n            aggStartDate: moment(response.data.data.aggStartDate).format(\r\n              \"YYYY-MM-DD\",\r\n            ),\r\n            aggEndDate: moment(response.data.data.aggEndDate).format(\r\n              \"YYYY-MM-DD\",\r\n            ),\r\n            orgRec: response.data.orgRecruiter,\r\n            status: response.data.data.statusList,\r\n            createdAt: response.data.data.createdAt,\r\n          });\r\n          setState({ ...state, right: true });\r\n          setEditValue('billable', response.data.data?.billable);\r\n          setBillable(response.data.data?.billable);\r\n          setLoader(false);\r\n        } else {\r\n          setLoader(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const [recruiterFields, setRecruiterFields] = useState([{\r\n    name: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    recruiterId: \"\"\r\n  }]);\r\n\r\n  const [newPOCRecruiterAdd, setNewPOCRecruiterAdd] = useState([{\r\n    name: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    recruiterId: \"\"\r\n  }]);\r\n  const [editRecFields, setEditRecFields] = useState([{\r\n    name: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    recruiterId: \"\"\r\n  }]);\r\n\r\n  const [levelOfHiringFields, setLevelOfHiringFields] = useState([{\r\n    name: \"\",\r\n    noOfHires: \"\",\r\n  }]);\r\n\r\n  const recruiterChange = (event, index) => {\r\n    const { value } = event.target;\r\n    const nameAlreadyExists = recruiterFields.some((field, idx) => field.recruiterId === value && idx !== index);\r\n    if (nameAlreadyExists) {\r\n      handleNotificationCall(\"error\", \"This POC name already exists in the list.\");\r\n      return;\r\n    }\r\n\r\n    const selectedRecruiter = recruiterName.find((recruiter) => recruiter.id === value);\r\n    if (selectedRecruiter) {\r\n      const newRecruiterFields = [...recruiterFields];\r\n      newRecruiterFields[index] = {\r\n        ...newRecruiterFields[index],\r\n        name: `${selectedRecruiter.firstName} ${selectedRecruiter?.lastName || \"\"}`,\r\n        email: selectedRecruiter.user?.email || \"\",\r\n        mobile: selectedRecruiter.mobile || \"\",\r\n        recruiterId: value\r\n      };\r\n      setRecruiterFields(newRecruiterFields);\r\n    }\r\n  };\r\n\r\n  const recruiterEditChange = (event, index) => {\r\n    const { value } = event.target;\r\n    const nameAlreadyExists = editRecFields.some((field, idx) => field.recruiterId === value && idx !== index);\r\n    if (nameAlreadyExists) {\r\n      handleNotificationCall(\"error\", \"This POC name already exists in the list.\");\r\n      return;\r\n    }\r\n\r\n    const selectedRecruiter = recruiterName.find((recruiter) => recruiter.id === value);\r\n    if (selectedRecruiter) {\r\n      const newRecruiterFields = [...editRecFields];\r\n      newRecruiterFields[index] = {\r\n        ...newRecruiterFields[index],\r\n        name: `${selectedRecruiter.firstName} ${selectedRecruiter?.lastName || \"\"}`,\r\n        email: selectedRecruiter.user?.email || \"\",\r\n        mobile: selectedRecruiter.mobile || \"\",\r\n        recruiterId: value\r\n      };\r\n      setEditRecFields(newRecruiterFields);\r\n    }\r\n  };\r\n\r\n\r\n  const recruiterAddInEditPage = (event, index) => {\r\n    const { value } = event.target;\r\n    const nameAlreadyExists = newPOCRecruiterAdd.some((field, idx) => field.recruiterId === value && idx !== index);\r\n    if (nameAlreadyExists) {\r\n      handleNotificationCall(\"error\", \"This POC name already exists in the list.\");\r\n      return;\r\n    }\r\n\r\n    const selectedRecruiter = recruiterName.find((recruiter) => recruiter.id === value);\r\n    if (selectedRecruiter) {\r\n      const newRecruiterFields = [...newPOCRecruiterAdd];\r\n      newRecruiterFields[index] = {\r\n        ...newRecruiterFields[index],\r\n        name: `${selectedRecruiter.firstName} ${selectedRecruiter?.lastName || \"\"}`,\r\n        email: selectedRecruiter.user?.email || \"\",\r\n        mobile: selectedRecruiter.mobile || \"\",\r\n        recruiterId: value\r\n      };\r\n      setNewPOCRecruiterAdd(newRecruiterFields);\r\n    }\r\n  };\r\n  // const recruiterEditChange = (event, index) => {\r\n  //   const { name, value } = event.target;\r\n  //   if (name === \"editname\") {\r\n  //     const nameAlreadyExists = recruiterEditFields.some((field, idx) => field.name === value && idx !== index);\r\n  //     if (nameAlreadyExists) {\r\n  //       handleNotificationCall(\"error\", \"This POC name already exists in the list.\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     const selectedRecruiter = recruiterName.find((recruiter) => recruiter.id === value);\r\n  //     const newRecruiterFields = [...recruiterEditFields];\r\n  //     newRecruiterFields[index][name] = value;\r\n\r\n  //     if (selectedRecruiter) {\r\n  //       newRecruiterFields[index].name = selectedRecruiter.firstName+\" \"+selectedRecruiter?.lastName  || \"\";\r\n  //       newRecruiterFields[index].email = selectedRecruiter.user?.email || \"\";\r\n  //       newRecruiterFields[index].mobile = selectedRecruiter.mobile || \"\";\r\n  //       newRecruiterFields[index].recruiterId = value;\r\n  //     }\r\n  //     console.log(newRecruiterFields,'4545454545')\r\n  //     setEditRecFields(newRecruiterFields);\r\n  //   }\r\n  // };\r\n\r\n  // const recruiterChange = (event, index) => {\r\n  //   // const values = [...recruiterFields];\r\n  //   // values[index][event.target.name] = event.target.value;\r\n  //   // setRecruiterFields(values);\r\n  //   const { name, value } = event.target;\r\n  //   const values = [...recruiterFields];\r\n  // };\r\n\r\n  console.log(displayOrgAdd, editRecFields, '90909')\r\n  const levelOfHiringChange = (event, index) => {\r\n    const values = [...levelOfHiringFields];\r\n    values[index][event.target.name] = event.target.value;\r\n    setLevelOfHiringFields(values);\r\n  };\r\n\r\n  const [recruiterEditFields, setRecruiterEditFields] = useState([\r\n    {\r\n      name: \"\",\r\n      mobile: \"\",\r\n      email: \"\",\r\n      recruiterId: \"\"\r\n    },\r\n  ]);\r\n  const [levelOfHireEditFields, setLevelOfHireEditFields] = useState([\r\n    {\r\n      name: \"\",\r\n      noOfHires: \"\",\r\n    },\r\n  ]);\r\n\r\n  // adds new input\r\n  const recruiterAdd = () => {\r\n    setRecruiterFields([\r\n      ...recruiterFields,\r\n      {\r\n        name: \"\",\r\n        mobile: \"\",\r\n        email: \"\",\r\n        recruiterId: \"\"\r\n      }\r\n    ]);\r\n\r\n    const timeout = setTimeout(() => {\r\n      const element = document.getElementById(\"section\");\r\n\r\n      element.scrollIntoView({ behavior: \"smooth\" });\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timeout);\r\n  };\r\n\r\n  const recruiterRemove = (index) => {\r\n    if (recruiterFields.length !== -1) {\r\n      const values = [...recruiterFields];\r\n      values.splice(index, 1);\r\n      setRecruiterFields(values);\r\n    }\r\n  };\r\n\r\n  const LevelOfHireAdd = () => {\r\n    setLevelOfHiringFields([\r\n      ...levelOfHiringFields,\r\n      {\r\n        name: \"\",\r\n        noOfHires: \"\",\r\n      },\r\n    ]);\r\n\r\n    const timeout = setTimeout(() => {\r\n      const element = document.getElementById(\"section-level-of-hire\");\r\n\r\n      element.scrollIntoView({ behavior: \"smooth\" });\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timeout);\r\n  };\r\n\r\n  const LevelOfHireRemove = (index) => {\r\n    if (levelOfHiringFields.length !== -1) {\r\n      const values = [...levelOfHiringFields];\r\n      values.splice(-1);\r\n      setLevelOfHiringFields(values);\r\n    }\r\n  };\r\n  const [state, setState] = useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"EDIT\" ? (\r\n      <>\r\n        <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n          <List>\r\n            <Card className={classes.root}>\r\n              <CardHeader>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={1}\r\n                  className={classes.drawerHeader}\r\n                >\r\n                  <Grid item xs={10} md={6}>\r\n                    <Typography variant=\"subtitle1\">Edit Project</Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={2} lg={6} className={classes.drawerClose}>\r\n                    <CloseIcon\r\n                      className={classes.closeBtn}\r\n                      size=\"14px\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardHeader>\r\n\r\n              <form onSubmit={editSubmit(handleEdit)}>\r\n                <CardContent className={classes.drawerViewContent}>\r\n                  <Grid container direction=\"row\" spacing={2}>\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"clientName\">\r\n                        Project Name\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Project Name\"\r\n                          id=\"clientName\"\r\n                          defaultValue={clientEdit.clientName}\r\n                          {...editClient(\"clientName\")}\r\n                          error={editErrors.clientName ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.clientName?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"clientIndustry\">\r\n                        Project Division\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Project Division\"\r\n                          id=\"clientIndustry\"\r\n                          defaultValue={clientEdit.clientIndustry}\r\n                          {...editClient(\"clientIndustry\")}\r\n                          error={editErrors.clientIndustry ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.clientIndustry?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"recruiterId\">\r\n                        Hiring Manager\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          select\r\n                          label={clientEdit.recruiterId === '' ? 'Select Hiring Manager' : ''}\r\n                          classes={{ root: classes.customSelectTextField }}\r\n                          size=\"small\"\r\n                          {...editClient('recruiterId')}\r\n                          defaultValue={clientEdit.recruiterId}\r\n                          onChange={(e) => setEditValue('recruiterId', e.target.value)}\r\n                          InputLabelProps={{ shrink: false }}\r\n                          margin=\"normal\"\r\n                          variant=\"outlined\"\r\n                        >\r\n                          {clientsName?.map((option) => {\r\n                            return (\r\n                              <MenuItem key={option.user.id} value={option.id}>\r\n                                {decode.user_id === option.user.id\r\n                                  ? `${option.firstName} ${option.lastName} (You)`\r\n                                  : option.employeeId === '' || option.employeeId === null\r\n                                    ? `${option.firstName} ${option.lastName}`\r\n                                    : `${option.firstName} ${option.lastName} (${option?.employeeId})`}\r\n                              </MenuItem>\r\n                            )\r\n                          })\r\n                          }\r\n                        </TextField>\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.recruiterId?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"hrbpCode\">\r\n                        HR Business Unit Code\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter HRBU Code\"\r\n                          id=\"hrbpCode\"\r\n                          {...editClient(\"hrbpCode\")}\r\n                          defaultValue={clientEdit.hrbpCode}\r\n                          error={editErrors.clientIndustry ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.hrbpCode?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"projectRegion\">\r\n                        Project Region\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Project Region\"\r\n                          id=\"projectRegion\"\r\n                          {...editClient(\"projectRegion\")}\r\n                          defaultValue={clientEdit.projectRegion}\r\n                          error={editErrors.projectRegion ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.projectRegion?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"projectLocation\">\r\n                        Project Location\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Project Location\"\r\n                          id=\"projectLocation\"\r\n                          {...editClient(\"projectLocation\")}\r\n                          defaultValue={clientEdit.projectLocation}\r\n                          error={editErrors.projectLocation ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.projectLocation?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={8} md={8} lg={8}>\r\n                      <InputLabel shrink htmlFor=\"reasonForHiring\">\r\n                        Reason For Hiring\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          multiline\r\n                          rows={3}\r\n                          maxRows={4}\r\n                          placeholder=\"Backfill/ New Hire/ Rehire/ Special Hire\"\r\n                          id=\"reasonForHiring\"\r\n                          defaultValue={clientEdit.reasonForHiring}\r\n                          {...editClient(\"reasonForHiring\")}\r\n                          error={editErrors.reasonForHiring ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.reasonForHiring?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"billable\">\r\n                        Billable\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <Switch\r\n                          checked={billable}\r\n                          color=\"primary\"\r\n                          id=\"billable\"\r\n                          name=\"billable\"\r\n                          defaultValue={clientEdit.billable}\r\n                          {...editClient('billable', {\r\n                            onChange: (e) => {\r\n                              setBillable(e.target.checked);\r\n                            },\r\n                          })}\r\n                          inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                        />\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.billable?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"aggStartDate\">\r\n                        Hiring Start Date\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          type=\"date\"\r\n                          placeholder=\"Select Hiring Start Date\"\r\n                          id=\"aggStartDate\"\r\n                          defaultValue={clientEdit.aggStartDate}\r\n                          {...editClient(\"aggStartDate\")}\r\n                          error={editErrors.aggStartDate ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.aggStartDate?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"aggEndDate\">\r\n                        Hiring End Date\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          type=\"date\"\r\n                          placeholder=\"Select Hiring End Date\"\r\n                          id=\"aggEndDate\"\r\n                          defaultValue={clientEdit.aggEndDate}\r\n                          {...editClient(\"aggEndDate\")}\r\n                          error={editErrors.aggEndDate ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {editErrors.aggEndDate?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <ListItem button onClick={() => handleCollapseClick('hireLevelList')}>\r\n                        <ListItemIcon>\r\n                          <SignalCellularAltIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Number to be hired\" />\r\n                        {collapseopen.hireLevelList ? <ExpandLess /> : <ExpandMore />}\r\n                      </ListItem>\r\n                      <Collapse in={collapseopen.hireLevelList}>\r\n                        <List component=\"div\" disablePadding>\r\n                          <Grid container direction=\"row\" spacing={2}>\r\n                            <Grid item xs={12} lg={12}>\r\n                              <MUIDataTable\r\n                                title=\"\"\r\n                                options={{\r\n                                  pagination: false,\r\n                                  sort: false,\r\n                                  selectableRows: \"none\",\r\n                                  search: false,\r\n                                  filter: false,\r\n                                  download: false,\r\n                                  print: false,\r\n                                  viewColumns: false,\r\n                                  responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n                                  textLabels: {\r\n                                    body: {\r\n                                      noMatch: 'Oops! Matching record could not be found',\r\n                                    }\r\n                                  },\r\n\r\n                                }}\r\n                                columns={[\r\n                                  {\r\n                                    name: \"S.No\",\r\n                                  },\r\n                                  {\r\n                                    name: \"Level Name\",\r\n                                    flex: 1\r\n                                  },\r\n                                  {\r\n                                    name: \"Number to be hired\",\r\n                                    width: 300\r\n                                  },\r\n                                  {\r\n                                    name: \"Edit\",\r\n                                    width: 300\r\n                                  },\r\n                                ]}\r\n                                data={levelOfHireEditFields.map((item, index) => {\r\n                                  return [\r\n                                    index + 1,\r\n                                    item.id === Id ? (\r\n                                      display === false ? (\r\n                                        item.name\r\n                                      ) : (\r\n                                        <TextField\r\n                                          InputProps={{ disableUnderline: true }}\r\n                                          classes={{ root: classes.customTextField }}\r\n                                          size=\"small\"\r\n                                          placeholder=\"Level Name\"\r\n                                          defaultValue={item.name}\r\n                                          onChange={(e) => handleLevelOfHireChange(e, 'name')}\r\n                                        />\r\n                                      )\r\n                                    ) : (\r\n                                      item.name\r\n                                    ),\r\n                                    item.id === Id ? (\r\n                                      display === false ? (\r\n                                        item.noOfHires\r\n                                      ) : (\r\n                                        <TextField\r\n                                          InputProps={{ disableUnderline: true }}\r\n                                          classes={{ root: classes.customTextField }}\r\n                                          size=\"small\"\r\n                                          placeholder=\"Number to be hired\"\r\n                                          defaultValue={item.noOfHires}\r\n                                          onChange={(e) => handleLevelOfHireChange(e, 'noOfHires')}\r\n                                        />\r\n                                      )\r\n                                    ) : (\r\n                                      item.noOfHires\r\n                                    ),\r\n                                    display === false ? (\r\n                                      <EditRoundedIcon\r\n                                        onClick={() => { handleLevelOfHireEdit(item); setId(item.id); }}\r\n                                        size=\"small\"\r\n                                        color=\"primary\"\r\n                                        className={classes.closeBtn}\r\n                                      />\r\n                                    ) : item.id === Id ? (\r\n                                      <div className={classes.space}>\r\n                                        <CheckCircleIcon\r\n                                          size=\"14px\"\r\n                                          color=\"primary\"\r\n                                          className={classes.closeBtn}\r\n                                          onClick={handleSaveEditLevelOfHire}\r\n                                        />\r\n                                        <CancelIcon\r\n                                          size=\"14px\"\r\n                                          color=\"primary\"\r\n                                          className={classes.closeBtn}\r\n                                          onClick={() => {\r\n                                            setDisplay(false);\r\n                                          }}\r\n                                        />\r\n                                      </div>\r\n                                    ) : (\r\n                                      <EditRoundedIcon\r\n                                        onClick={() => { handleLevelOfHireEdit(item); setId(item.id); }}\r\n                                        size=\"small\"\r\n                                        color=\"primary\"\r\n                                        className={classes.closeBtn}\r\n                                      />\r\n                                    ),\r\n                                  ];\r\n                                })}\r\n                              />\r\n                            </Grid>\r\n\r\n                            {displayAdd === true ? (\r\n                              <>\r\n                                <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                                  <InputLabel shrink>\r\n                                    Level Name\r\n                                  </InputLabel>\r\n\r\n                                  <FormControl className={classes.margin}>\r\n                                    <TextField\r\n                                      InputProps={{ disableUnderline: true }}\r\n                                      classes={{ root: classes.customTextField }}\r\n                                      size=\"small\"\r\n                                      placeholder=\"Level Name\"\r\n                                      defaultValue=\"\"\r\n                                      name=\"name\"\r\n                                      onChange={(e) => handleAddNewLevelOfHire(e, 'name')}\r\n                                    />\r\n                                  </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                                  <InputLabel shrink>\r\n                                    Number to be hired\r\n                                  </InputLabel>\r\n\r\n                                  <FormControl className={classes.margin}>\r\n                                    <TextField\r\n                                      InputProps={{ disableUnderline: true }}\r\n                                      classes={{ root: classes.customTextField }}\r\n                                      size=\"small\"\r\n                                      placeholder=\"Number to be hired\"\r\n                                      name=\"noOfHires\"\r\n                                      defaultValue=\"\"\r\n                                      onChange={(e) => handleAddNewLevelOfHire(e, 'noOfHires')}\r\n                                    />\r\n                                  </FormControl>\r\n                                </Grid>\r\n                              </>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n\r\n                            <Grid\r\n                              item\r\n                              xs={12}\r\n                              lg={12}\r\n                              className={classes.drawerClose}\r\n                            >\r\n                              {displayAdd === true ? (\r\n                                <>\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    size=\"small\"\r\n                                    color=\"primary\"\r\n                                    className={classes.closeBtn}\r\n                                    onClick={(e) => {\r\n                                      handleSaveAddLevelOfHire();\r\n                                    }}\r\n                                  >\r\n                                    SAVE\r\n                                  </Button>\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    size=\"small\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.closeBtn}\r\n                                    onClick={(e) => {\r\n                                      setDisplayAdd(false);\r\n                                    }}\r\n                                  >\r\n                                    Close\r\n                                  </Button>\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <div className={classes.lgButton}>\r\n                                    <Button\r\n                                      variant=\"contained\"\r\n                                      color=\"primary\"\r\n                                      size=\"small\"\r\n                                      onClick={() => handleLevelOfHireAdd(clientEdit)}\r\n                                      className={classes.margin}\r\n                                      startIcon={<AddCircleIcon />}\r\n                                    >\r\n                                      Add New Level Name\r\n                                    </Button>\r\n                                  </div>\r\n\r\n                                  <div className={classes.smButton}>\r\n                                    <Button\r\n                                      variant=\"contained\"\r\n                                      size=\"small\"\r\n                                      startIcon={<AddCircleIcon />}\r\n                                      className={classes.addUser}\r\n                                      color=\"primary\"\r\n                                      onClick={() => handleLevelOfHireAdd(clientEdit)}\r\n                                    >\r\n                                      Add New Level Name\r\n                                    </Button>\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </List>\r\n                      </Collapse>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <ListItem button onClick={() => handleCollapseClick('orgRecList')}>\r\n                        <ListItemIcon>\r\n                          <PeopleAltIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Org Recruiter Lists\" />\r\n                        {collapseopen.orgRecList ? <ExpandLess /> : <ExpandMore />}\r\n                      </ListItem>\r\n                      <Collapse in={collapseopen.orgRecList}>\r\n                        <List component=\"div\" disablePadding>\r\n                          <Grid container direction=\"row\" spacing={2}>\r\n                            <Grid item xs={12} lg={12}>\r\n                              <MUIDataTable\r\n                                title=\"\"\r\n                                options={{\r\n                                  pagination: false,\r\n                                  sort: false,\r\n                                  selectableRows: \"none\",\r\n                                  search: false,\r\n                                  filter: false,\r\n                                  download: false,\r\n                                  print: false,\r\n                                  viewColumns: false,\r\n                                  responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n                                  textLabels: {\r\n                                    body: {\r\n                                      noMatch: 'Oops! Matching record could not be found',\r\n                                    }\r\n                                  },\r\n                                }}\r\n                                columns={[\r\n                                  {\r\n                                    name: \"S.No\",\r\n                                  },\r\n                                  {\r\n                                    name: \"Recruiter Point of Contact(POC) Name\",\r\n                                  },\r\n                                  {\r\n                                    name: \"Recruiter Email-Id\",\r\n                                  },\r\n                                  {\r\n                                    name: \"Recruiter Mobile No\",\r\n                                  },\r\n                                  {\r\n                                    name: \"Status\",\r\n                                  },\r\n                                  {\r\n                                    name: \"Edit\",\r\n                                  },\r\n                                ]}\r\n                                data={recruiterEditFields.map((item, index) => {\r\n                                  return [\r\n                                    index + 1,\r\n                                    item.id === Id ? (\r\n                                      display === false ? (\r\n                                        item.name\r\n                                      ) : (\r\n                                        <>\r\n                                          <TextField\r\n                                            select\r\n                                            name=\"editname\"\r\n                                            label={\r\n                                              recruiterName === \"\" ? \"Select Recrutier Name\" : \"\"\r\n                                            }\r\n                                            style={{ textAlign: \"left\" }}\r\n                                            classes={{ root: classes.customSelectTextField }}\r\n                                            defaultValue={item.recruiterId}\r\n                                            onChange={(e) => {\r\n                                              recruiterEditChange(e, index);\r\n                                            }}\r\n                                            size=\"small\"\r\n                                            InputLabelProps={{ shrink: false }}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                          >\r\n                                            {recruiterName?.map((option) => {\r\n                                              const roleName = option.user?.roleName;\r\n                                              const firstName = option.firstName;\r\n                                              const lastName = option.lastName;\r\n                                              let label = `${firstName} ${lastName}`;\r\n                                              if (roleName) {\r\n                                                label += ` (${roleName})`;\r\n\r\n                                                if (roleName === \"SUBVENDOR\") {\r\n                                                  label = label.replace(\"(SUBVENDOR)\", \"(Vendor)\");\r\n                                                } else if (roleName === \"CLIENTCOORDINATOR\") {\r\n                                                  label = label.replace(\r\n                                                    \"(CLIENTCOORDINATOR)\",\r\n                                                    \"(Hiring Manager)\",\r\n                                                  );\r\n                                                }\r\n                                              }\r\n                                              return (\r\n                                                <MenuItem\r\n                                                  key={option.id}\r\n                                                  value={option.id}\r\n                                                >\r\n                                                  {label}\r\n                                                </MenuItem>\r\n                                              );\r\n                                            })}\r\n                                          </TextField>\r\n                                        </>\r\n                                      )\r\n                                    ) : (\r\n                                      item.name\r\n                                    ),\r\n                                    item.id === Id ? (\r\n                                      display === false ? (\r\n                                        item.email\r\n                                      ) : (\r\n                                        <TextField\r\n                                          InputProps={{ disableUnderline: true, readOnly: true }}\r\n                                          classes={{ root: classes.customTextField }}\r\n                                          size=\"small\"\r\n                                          placeholder=\"Email\"\r\n                                          value={item.email}\r\n                                          name=\"email\"\r\n                                        />\r\n                                      )\r\n                                    ) : (\r\n                                      item.email\r\n                                    ),\r\n                                    item.id === Id ? (\r\n                                      display === false ? (\r\n                                        item.mobile\r\n                                      ) : (\r\n                                        <TextField\r\n                                          InputProps={{ disableUnderline: true, readOnly: true }}\r\n                                          classes={{ root: classes.customTextField }}\r\n                                          size=\"small\"\r\n                                          placeholder=\"Mobile\"\r\n                                          value={item.mobile}\r\n                                        />\r\n                                      )\r\n                                    ) : (\r\n                                      item.mobile\r\n                                    ),\r\n                                    <Switch\r\n                                      checked={item.isActive}\r\n                                      onChange={(e) => {\r\n                                        handleStatus(item.id, e.target.checked);\r\n                                      }}\r\n                                      color=\"primary\"\r\n                                      inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                                    />,\r\n                                    display === false ? (\r\n                                      <EditRoundedIcon\r\n                                        onClick={(e) => {\r\n                                          setDisplay(true);\r\n                                          setId(item.id);\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        color=\"primary\"\r\n                                        className={classes.closeBtn}\r\n                                      />\r\n                                    ) : item.id === Id ? (\r\n                                      <div className={classes.space}>\r\n                                        <CheckCircleIcon\r\n                                          size=\"14px\"\r\n                                          color=\"primary\"\r\n                                          className={classes.closeBtn}\r\n                                          onClick={() => {\r\n                                            axios({\r\n                                              method: \"post\",\r\n                                              url: `${process.env.REACT_APP_SERVER}admin/editOrgRecruiter`,\r\n                                              data: {\r\n                                                id: item.id,\r\n                                                name: editRecFields[0].name,\r\n                                                email: editRecFields[0].email,\r\n                                                mobile: editRecFields[0].mobile,\r\n                                              },\r\n                                              headers: {\r\n                                                \"Content-Type\": \"application/json\",\r\n                                                Authorization: token,\r\n                                              },\r\n                                            })\r\n                                              .then(function (response) {\r\n                                                if (response.data.status === true) {\r\n                                                  handleNotificationCall(\r\n                                                    \"success\",\r\n                                                    response.data.message,\r\n                                                  );\r\n\r\n                                                  setDisplay(false);\r\n\r\n                                                  handleShow(clientEdit.id, \"EDIT\");\r\n                                                } else {\r\n                                                  handleNotificationCall(\r\n                                                    \"error\",\r\n                                                    response.data.message,\r\n                                                  );\r\n                                                }\r\n                                              })\r\n                                              .catch(function (error) {\r\n                                                console.log(error);\r\n                                              });\r\n                                          }}\r\n                                        />\r\n\r\n                                        <CancelIcon\r\n                                          size=\"14px\"\r\n                                          color=\"primary\"\r\n                                          className={classes.closeBtn}\r\n                                          onClick={() => {\r\n                                            setDisplay(false);\r\n                                          }}\r\n                                        />\r\n                                      </div>\r\n                                    ) : (\r\n                                      <EditRoundedIcon\r\n                                        onClick={(e) => {\r\n                                          setDisplay(true);\r\n                                          setId(item.id);\r\n                                        }}\r\n                                        size=\"small\"\r\n                                        color=\"primary\"\r\n                                        className={classes.closeBtn}\r\n                                      />\r\n                                    ),\r\n                                  ];\r\n                                })}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item xs={12} lg={12} className=\"vijay\">\r\n                              {displayOrgAdd === true &&\r\n                                newPOCRecruiterAdd.map((user, index) => {\r\n                                  return (\r\n                                    <div key={index} style={{ display: 'flex', flexDirection: 'row', alignItems: 'baseline', gap: \"20px\" }}>\r\n                                      <Grid\r\n                                        item\r\n                                        xs={12}\r\n                                        className={classNames(classes.fieldsInput)}\r\n                                      >\r\n                                        <InputLabel shrink>\r\n                                          Recruiter Point of Contact(POC) Name\r\n                                        </InputLabel>\r\n                                        <TextField\r\n                                          select\r\n                                          name={`recruiterId`}\r\n                                          label={recruiterName === \"\" ? \"Select Recruiter Name\" : \"\"}\r\n                                          style={{ textAlign: \"left\" }}\r\n                                          classes={{ root: classes.customSelectTextField }}\r\n                                          value={user.recruiterId}\r\n                                          onChange={(e) => recruiterAddInEditPage(e, index)}\r\n                                          size=\"small\"\r\n                                          InputLabelProps={{ shrink: false }}\r\n                                          margin=\"normal\"\r\n                                          variant=\"outlined\"\r\n                                        >\r\n                                          {recruiterName?.map((option) => {\r\n                                            const roleName = option.user?.roleName;\r\n                                            const firstName = option.firstName;\r\n                                            const lastName = option.lastName;\r\n                                            let label = `${firstName} ${lastName}`;\r\n                                            if (roleName) {\r\n                                              label += ` (${roleName})`;\r\n\r\n                                              if (roleName === \"SUBVENDOR\") {\r\n                                                label = label.replace(\"(SUBVENDOR)\", \"(Vendor)\");\r\n                                              } else if (roleName === \"CLIENTCOORDINATOR\") {\r\n                                                label = label.replace(\"(CLIENTCOORDINATOR)\", \"(Hiring Manager)\");\r\n                                              }\r\n                                              return (\r\n                                                <MenuItem key={option.id} value={option.id}>\r\n                                                  {label}\r\n                                                </MenuItem>\r\n                                              );\r\n                                            }\r\n                                          })}\r\n                                        </TextField>\r\n\r\n                                      </Grid>\r\n\r\n                                      <Grid\r\n                                        item\r\n                                        xs={12}\r\n                                      >\r\n                                        <InputLabel shrink>\r\n                                          Recruiter Email-Id\r\n                                        </InputLabel>\r\n\r\n                                        <FormControl className={classes.margin}>\r\n                                          <TextField\r\n                                            InputProps={{ disableUnderline: true }}\r\n                                            classes={{ root: classes.customTextField }}\r\n                                            size=\"small\"\r\n                                            placeholder=\"Recruiter Email-Id\"\r\n                                            id=\"email\"\r\n                                            value={user.email}\r\n                                            name=\"email\"\r\n                                          />\r\n                                        </FormControl>\r\n                                      </Grid>\r\n\r\n                                      <Grid\r\n                                        item\r\n                                        xs={12}\r\n                                      >\r\n                                        <InputLabel shrink>\r\n                                          Recruiter Mobile No\r\n                                        </InputLabel>\r\n\r\n                                        <FormControl className={classes.margin}>\r\n                                          <TextField\r\n                                            InputProps={{ disableUnderline: true }}\r\n                                            classes={{ root: classes.customTextField }}\r\n                                            size=\"small\"\r\n                                            placeholder=\"Recruiter Mobile No\"\r\n                                            id=\"mobile\"\r\n                                            value={user.mobile}\r\n                                            name=\"mobile\"\r\n                                          />\r\n                                        </FormControl>\r\n                                      </Grid>\r\n                                    </div>\r\n                                  )\r\n                                })\r\n                              }\r\n                            </Grid>\r\n                            <div id=\"section\"> </div>\r\n                            <Grid\r\n                              item\r\n                              xs={12}\r\n                              lg={12}\r\n                              className={classes.drawerClose}\r\n                            >\r\n                              {displayOrgAdd === true ? (\r\n                                <>\r\n\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    size=\"small\"\r\n                                    color=\"primary\"\r\n                                    className={classes.closeBtn}\r\n                                    onClick={(e) => {\r\n                                      handleRecAdd();\r\n                                    }}\r\n                                  >\r\n                                    SAVE\r\n                                  </Button>\r\n                                  <Button\r\n                                    variant=\"contained\"\r\n                                    size=\"small\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.closeBtn}\r\n                                    onClick={(e) => {\r\n                                      setDisplayOrgAdd(false);\r\n                                    }}\r\n                                  >\r\n                                    Close\r\n                                  </Button>\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <div className={classes.lgButton}>\r\n                                    <Button\r\n                                      variant=\"contained\"\r\n                                      color=\"primary\"\r\n                                      size=\"small\"\r\n                                      onClick={(e) => {\r\n                                        setDisplay(false);\r\n                                        setDisplayOrgAdd(true);\r\n                                      }}\r\n                                      className={classes.margin}\r\n                                      startIcon={<AddCircleIcon />}\r\n                                    >\r\n                                      Add New Recruiter Point of Contact(POC)\r\n                                    </Button>\r\n                                  </div>\r\n\r\n                                  <div className={classes.smButton}>\r\n                                    <Button\r\n                                      variant=\"contained\"\r\n                                      size=\"small\"\r\n                                      startIcon={<AddCircleIcon />}\r\n                                      className={classes.addUser}\r\n                                      color=\"primary\"\r\n                                      onClick={(e) => {\r\n                                        setDisplayOrgAdd(true);\r\n                                      }}\r\n                                    >\r\n                                      Add New Recruiter POC\r\n                                    </Button>\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </List>\r\n                      </Collapse>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n                <CardActions  >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    className={classes.clientDrawerFooter}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      type=\"submit\"\r\n                      disabled={editIsSubmitting}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                      color=\"secondary\"\r\n                    >\r\n                      Close\r\n                    </Button>\r\n\r\n                  </Grid>\r\n                </CardActions>\r\n              </form>\r\n            </Card>\r\n          </List>\r\n        </Box>\r\n      </>\r\n    ) : dataList === \"ADD\" ? (\r\n      <>\r\n        <AddProject\r\n          clientsName={clientsName}\r\n          recruiterName={recruiterName}\r\n          isSubmitting={isSubmitting}\r\n          setValue={setValue}\r\n          handleAdd={handleAdd}\r\n          handleSubmit={handleSubmit}\r\n          toggleDrawer={toggleDrawer}\r\n          billable={billable}\r\n          setBillable={setBillable}\r\n          recruiterChange={recruiterChange}\r\n          levelOfHiringChange={levelOfHiringChange}\r\n          recruiterFields={recruiterFields}\r\n          levelOfHiringFields={levelOfHiringFields}\r\n          errors={errors}\r\n          register={register}\r\n          recruiterAdd={recruiterAdd}\r\n          recruiterRemove={recruiterRemove}\r\n          LevelOfHireAdd={LevelOfHireAdd}\r\n          LevelOfHireRemove={LevelOfHireRemove}\r\n        />\r\n      </>\r\n    ) : dataList === \"VIEW\" ? (\r\n      <>\r\n        <ProjectView\r\n          anchor={anchor}\r\n          toggleDrawer={toggleDrawer}\r\n          mobileQuery={mobileQuery}\r\n          recruiterEditFields={recruiterEditFields}\r\n          viewProjOpen={viewProjOpen}\r\n          clientsName={clientsName}\r\n          clientEdit={clientEdit}\r\n          levelOfHireEditFields={levelOfHireEditFields}\r\n          handleViewProjClick={handleViewProjClick}\r\n        />\r\n      </>\r\n    ) : dataList === \"APPROVAL\" ? (\r\n      <>\r\n        <ProjectApproval\r\n          anchor={anchor}\r\n          toggleDrawer={toggleDrawer}\r\n          mobileQuery={mobileQuery}\r\n          recruiterEditFields={recruiterEditFields}\r\n          viewProjOpen={viewProjOpen}\r\n          clientsName={clientsName}\r\n          clientEdit={clientEdit}\r\n          levelOfHireEditFields={levelOfHireEditFields}\r\n          handleViewProjClick={handleViewProjClick}\r\n          approveIsSubmitting={approveIsSubmitting}\r\n          approveProject={approveProject}\r\n          approveErrors={approveErrors}\r\n          approveSubmit={approveSubmit}\r\n          approveReset={approveReset}\r\n          setApproveValue={setApproveValue}\r\n          approveSchema={approveSchema}\r\n          handleAddApprover={handleAddApprover}\r\n        />\r\n      </>\r\n    )\r\n      : (\r\n        \"\"\r\n      );\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n    const form = filterRef.current;\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      fromDate: `${form[\"fromDate\"].value}`,\r\n      toDate: `${form[\"toDate\"].value}`,\r\n      clientId: clientId?.id,\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/getAllClients`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setLoader(true);\r\n\r\n        setClientData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n    });\r\n  };\r\n\r\n  // function getSheetData(data, header) {\r\n  //   var fields = Object.keys(data[0]);\r\n  //   var sheetData = data.map(function (row) {\r\n  //     return fields.map(function (fieldName) {\r\n  //       return row[fieldName] ? row[fieldName] : \"\";\r\n  //     });\r\n  //   });\r\n  //   sheetData.unshift(header);\r\n  //   return sheetData;\r\n  // }\r\n\r\n  // async function saveAsExcel(data) {\r\n  //   let header = [\r\n  //     \"S.No\",\r\n  //     \"Clients Name\",\r\n  //     \"Clients Industry\",\r\n  //     \"Clients Website\",\r\n  //     \"Agreement Start Date\",\r\n  //     \"Agreement End Date\",\r\n  //     \"Status\",\r\n  //     \"Posted Date\",\r\n  //   ];\r\n\r\n  //   XlsxPopulate.fromBlankAsync().then(async (workbook) => {\r\n  //     const sheet1 = workbook.sheet(0);\r\n  //     const sheetData = getSheetData(data, header);\r\n  //     const totalColumns = sheetData[0].length;\r\n\r\n  //     sheet1.cell(\"A1\").value(sheetData);\r\n  //     const range = sheet1.usedRange();\r\n  //     const endColumn = String.fromCharCode(64 + totalColumns);\r\n  //     sheet1.row(1).style(\"bold\", true);\r\n  //     sheet1.range(\"A1:\" + endColumn + \"1\").style(\"fill\", \"BFBFBF\");\r\n  //     range.style(\"border\", true);\r\n  //     return workbook.outputAsync().then((res) => {\r\n  //       saveAs(\r\n  //         res,\r\n  //         `Clients_${moment(new Date()).format(\"DD_MM_YYYY_HH_mm\")}.xlsx`,\r\n  //       );\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  // function downloadExel() {\r\n  //   setLoader(true);\r\n\r\n  //   const form = filterRef.current;\r\n  //   var data = JSON.stringify({\r\n  //     fromDate: `${form[\"fromDate\"].value}`,\r\n  //     toDate: `${form[\"toDate\"].value}`,\r\n  //     clientId: clientId?.id,\r\n  //     fileDownload: \"yes\",\r\n  //   });\r\n\r\n  //   axios({\r\n  //     method: \"post\",\r\n  //     url: `${process.env.REACT_APP_SERVER}admin/getAllClients`,\r\n  //     data: data,\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Authorization: token,\r\n  //     },\r\n  //   })\r\n  //     .then(function (response) {\r\n  //       if (response.data.status === true) {\r\n  //         setLoader(false);\r\n  //         saveAsExcel(response.data.data);\r\n  //       }\r\n  //     })\r\n\r\n  //     .catch(function (error) {\r\n  //       console.log(error);\r\n  //     });\r\n  // }\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n        {/* <Tooltip title=\"Dowmload\" placement=\"bottom\" aria-label=\"download\">\r\n          {count !== 0 ? (\r\n            <CloudDownloadIcon\r\n              className={classes.toolIcon}\r\n              onClick={(e) => {\r\n                downloadExel();\r\n              }}\r\n            />\r\n          ) : (\r\n            <CloudDownloadIcon className={classes.downloadIcon} />\r\n          )}\r\n        </Tooltip> */}\r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2}>\r\n        <Grid item xs={6}>\r\n          <PageTitle title=\"Projects\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} className={classes.drawerClose}>\r\n          <div className={classes.lgButton}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              className={classes.addUser}\r\n              startIcon={<AddCircleIcon />}\r\n              onClick={(e) => {\r\n                setDataList(\"ADD\");\r\n                reset();\r\n                editreset();\r\n                setState({ ...state, right: true });\r\n\r\n                setRecruiterFields([{\r\n                  name: \"\",\r\n                  mobile: \"\",\r\n                  email: \"\",\r\n                  recruiterId: \"\"\r\n                }])\r\n              }}\r\n            >\r\n              Add New Project\r\n            </Button>\r\n          </div>\r\n          <div className={classes.smButton}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              className={classes.addUser}\r\n              startIcon={<AddCircleIcon />}\r\n              onClick={(e) => {\r\n                setDataList(\"ADD\");\r\n                reset();\r\n                editreset();\r\n                setState({ ...state, right: true });\r\n              }}\r\n            >\r\n              Add\r\n            </Button>\r\n          </div>\r\n          <SwipeableDrawer\r\n            anchor=\"right\"\r\n            open={state[\"right\"]}\r\n            onClose={toggleDrawer(\"right\", false)}\r\n            onOpen={toggleDrawer(\"right\", true)}\r\n            classes={{ paper: classes.clientDrawer }}\r\n          >\r\n            {list(\"right\")}\r\n          </SwipeableDrawer>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n          <Autocomplete\r\n            className={classes.filterFullWidth}\r\n            options={userName}\r\n            getOptionLabel={(option) =>\r\n              option.clientName + \" (\" + option.uniqueId + \")\"\r\n            }\r\n            value={clientId}\r\n            onChange={(event, value) => setClientId(value)}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                name=\"clientId\"\r\n                label=\"Projects\"\r\n                InputLabelProps={{ shrink: true }}\r\n                type=\"text\"\r\n              />\r\n            )}\r\n          />\r\n\r\n          <TextField\r\n            name=\"fromDate\"\r\n            label=\"From\"\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n            className={classes.filterWidth}\r\n            InputLabelProps={{ shrink: true }}\r\n            type=\"date\"\r\n            defaultValue={fromDate}\r\n            onChange={handleFromDateChange}\r\n\r\n          />\r\n\r\n          <TextField\r\n            name=\"toDate\"\r\n            label=\"To\"\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n            className={classes.filterWidth}\r\n            InputLabelProps={{ shrink: true }}\r\n            type=\"date\"\r\n            defaultValue={toDate}\r\n            onChange={handleToDateChange}\r\n\r\n          />\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n      <Grid container direction=\"row\" spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n\r\n            options={{\r\n              textLabels: {\r\n                body: {\r\n                  noMatch: 'Oops! Matching record could not be found',\r\n                }\r\n              },\r\n              pagination: false,\r\n              selectableRows: \"none\",\r\n              search: false,\r\n              filter: false,\r\n              print: false,\r\n              download: false,\r\n              sort: false,\r\n              responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n              customToolbar: () => <HeaderElements />,\r\n            }}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Actions\",\r\n              },\r\n              {\r\n                name: \"Project Name\",\r\n              },\r\n              {\r\n                name: \"Approval Status\",\r\n              },\r\n              {\r\n                name: \"Project Division\",\r\n              },\r\n              {\r\n                name: \"Hiring Start Date\",\r\n              },\r\n\r\n              {\r\n                name: \"Hiring End Date\",\r\n              },\r\n\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={clientData.map((item, index) => {\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n                <>\r\n                  <Grid container className={classes.space}>\r\n                    <Grid item xs className={classes.toolAlign}>\r\n                      <ProjectAction\r\n                        index={index}\r\n                        item={item}\r\n                        handleShow={handleShow}\r\n                        setDisplayAdd={setDisplayAdd}\r\n                        setDisplayOrgAdd={setDisplayOrgAdd}\r\n                        viewProjOpen={viewProjOpen}\r\n                        collapseopen={collapseopen}\r\n                        setCollapseopen={setCollapseopen}\r\n                        setViewProjOpen={setViewProjOpen}\r\n\r\n                      />\r\n                      {/* <Tooltip\r\n                        title=\"Edit Projects\"\r\n                        placement=\"bottom\"\r\n                        aria-label=\"edit\"\r\n                      >\r\n                        <EditIcon\r\n                          className={classes.toolIcon}\r\n                          onClick={(e) => {\r\n                            handleShow(item.id, \"EDIT\");\r\n                            setDisplayAdd(false);\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                      <Tooltip\r\n                        title=\"View Projects\"\r\n                        placement=\"bottom\"\r\n                        aria-label=\"view\"\r\n                      >\r\n                        <ViewIcon\r\n                          className={classes.toolIcon}\r\n                          onClick={(e) => {\r\n                            handleShow(item.id, \"VIEW\");\r\n                          }}\r\n                        />\r\n                      </Tooltip> */}\r\n                    </Grid>\r\n                  </Grid>\r\n                </>,\r\n                <div style={{ display: \"flex\", alignItems: 'center', gap: \"5px\" }}>\r\n                  {item.clientName} {\"(\" + item.uniqueId + \")\"}\r\n                </div>,\r\n                <div style={{ display: \"flex\", alignItems: 'center', gap: \"5px\" }}>\r\n                  {item.approved === \"Approved\" ? <> <CheckCircleIcon style={{ color: \"#9BCF53\" }} /> <span> Approved </span> </> : item.approved === \"Disapproved\" ? <> <HighlightOffIcon style={{ color: \"#FF0000\" }} /> <span>Not Approved </span> </>: item.approved === \"Pending\" ? <> <ScheduleIcon style={{ color: \"#1679AB\" }} /><span> Pending </span> </>: <></>}\r\n                </div>,\r\n                item.clientIndustry,\r\n                item.aggStartDate\r\n                  ? moment(item.aggStartDate).format(\"DD-MM-YYYY\")\r\n                  : \"\",\r\n                item.aggEndDate\r\n                  ? moment(item.aggEndDate).format(\"DD-MM-YYYY\")\r\n                  : \"\",\r\n\r\n                item.statusList ? (\r\n                  <Switch\r\n                    checked={\r\n                      item.statusList.statusName === \"ACTIVE\" ? true : false\r\n                    }\r\n                    onChange={(e) => {\r\n                      handleClientStatus(item.id, e.target.checked);\r\n                    }}\r\n                    color=\"primary\"\r\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                  />\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={50}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\dashboard\\Dashboard.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\clients\\Clients.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\Sidebar.js",["767","768","769","770"],"import { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { ArrowBack as ArrowBackIcon } from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport classNames from \"classnames\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nimport dashboard from \"../../images/dashboard.png\";\r\nimport users from \"../../images/user.png\";\r\nimport clients from \"../../images/Clients.png\";\r\nimport candidates from \"../../images/graduated.png\";\r\nimport invoice from \"../../images/invoice.png\";\r\nimport resumeSearch from '../../images/Resume_search.png'\r\nimport hiringSupport from \"../../images/HiringSupport.png\";\r\nimport regCompanies from \"../../images/regCompanies.png\";\r\nimport report from \"../../images/Report.png\";\r\nimport setting from \"../../images/setting.png\";\r\nimport price from \"../../images/pricing.png\";\r\nimport requirement from \"../../images/requirement.png\";\r\nimport whatsapp from \"../../images/whatsapp.png\";\r\nimport companies from \"../../images/companies.png\";\r\nimport priceList from \"../../images/pricelist.png\";\r\nimport search from \"../../images/search.png\";\r\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\r\nimport AssignReq from \"../../images/AssignReq.png\";\r\n\r\nimport useStyles from \"./styles\";\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\n\r\nimport {\r\n  toggleSidebar,\r\n  useLayoutDispatch,\r\n  useLayoutState,\r\n} from \"../../context/LayoutContext\";\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const companyType = decode.companyType\r\n  const role = decode.role;\r\n\r\n  const superAdmin = [\r\n    {\r\n      id: 0,\r\n      label: \"Dashboard\",\r\n      link: \"/app/dashboard\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Dashboard\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={dashboard}\r\n              alt=\"dashboard\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 1,\r\n      label: \"Registered Companies\",\r\n      link: \"/app/company\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Registered Companies\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={regCompanies}\r\n              alt=\"transaction\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      label: \"Companies\",\r\n      link: \"/app/admin\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Companies\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={companies}\r\n              alt=\"companies\"\r\n              className={classNames(classes.Icon2)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 3,\r\n      label: \"Plans\",\r\n      link: \"/app/price\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Plans\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={priceList}\r\n              alt=\"price\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 4,\r\n      label: \"Transaction History\",\r\n      link: \"/app/transaction\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Transaction History\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={invoice}\r\n              alt=\"invoice\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 5,\r\n      label: \"Contact Sales\",\r\n      link: \"/app/contact\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Contact Sales\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={hiringSupport}\r\n              alt=\"transaction\"\r\n              className={classNames(classes.Icon5)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  var admin = [\r\n    {\r\n      id: 0,\r\n      label: \"Live Status\",\r\n      link: \"/app/dashboard\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Live Status\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={dashboard}\r\n              alt=\"dashboard\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 1,\r\n      label: \"Users\",\r\n      link: \"/app/users\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Users\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={candidates}\r\n              alt=\"users\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      label: companyType === \"COMPANY\"? \"Projects\" :\"Clients\",\r\n      link: companyType === \"COMPANY\"? \"/app/projects\" :\"/app/clients\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title={companyType === \"COMPANY\"? \"Projects\" :\"Clients\"} placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={clients}\r\n              alt={companyType === \"COMPANY\"? \"Projects\" :\"Clients\"}\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 3,\r\n      label: \"Requirements\",\r\n      link: \"/app/requirements\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Requirements\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={requirement}\r\n              alt=\"requirement\"\r\n              className={classNames(classes.Icon2)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 4,\r\n      label: \"Assign Requirements Candidates\",\r\n      link: \"/app/assign_requirements\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Assigned Requirements\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={AssignReq}\r\n              alt=\"requirement\"\r\n              className={classNames(classes.Icon2)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: 5,\r\n      label: \"Candidates\",\r\n      link: \"/app/admin_candidates\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={users}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 6,\r\n      label: \"Search Candidates\",\r\n      link: \"/app/search\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Search Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={search}\r\n              alt=\"search candidates\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    // {\r\n    //   id: 7,\r\n    //   label: \"Invoiced Candidates\",\r\n    //   link: \"/app/invoice\",\r\n    //   view: true,\r\n    //   icon: (\r\n    //     <Tooltip title=\"Invoiced Candidates\" placement=\"right\">\r\n    //       <IconButton>\r\n    //         <img\r\n    //           src={invoice}\r\n    //           alt=\"invoice\"\r\n    //           className={classNames(classes.Icon1)}\r\n    //         />\r\n    //       </IconButton>\r\n    //     </Tooltip>\r\n    //   ),\r\n    // },\r\n    // {\r\n    //   id: 7,\r\n    //   label: \"Resume Parsing\",\r\n    //   link: \"/app/resume_search\",\r\n    //   view: true,\r\n    //   icon: (\r\n    //     <Tooltip title=\"Resume Parsing\" placement=\"right\">\r\n    //       <IconButton>\r\n    //         <img\r\n    //           src={resumeSearch}\r\n    //           alt=\"resume_search\"\r\n    //           className={classNames(classes.Icon1)}\r\n    //         />\r\n    //       </IconButton>\r\n    //     </Tooltip>\r\n    //   ),\r\n    // },\r\n    {\r\n      id: 8,\r\n      label: \"Chat\",\r\n      link: \"/app/chat\",\r\n      view: decode.isEnablePaid === true ? true : false,\r\n      icon: (\r\n        <Tooltip title=\"Chat\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={whatsapp}\r\n              alt=\"whatsapp\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 9,\r\n      label: \"Reports\",\r\n      type: \"reports\",\r\n      link: \"/app/reports\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Reports\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={report}\r\n              alt=\"report\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n      subMenu: [\r\n        {\r\n          id: 0,\r\n          label: companyType === \"COMPANY\" ? \"Submitted to Hiring Manager\" : \"Submitted to Client\",\r\n          link: \"/app/reports/all_candidates_stc\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 1,\r\n          label: \"Final Interview Completed\",\r\n          link: \"/app/reports/all_candidates_fic\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 2,\r\n          label: \"Document Collected\",\r\n          link: \"/app/reports/all_candidates_document_collected\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 3,\r\n          label: \"Salary Breakup Shared\",\r\n          link: \"/app/reports/all_candidates_salary_breakup_shared\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 4,\r\n          label: \"Offered\",\r\n          link: \"/app/reports/all_candidates_offered\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 5,\r\n          label: \"Offer Declined\",\r\n          link: \"/app/reports/all_candidates_Offered_declined\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 6,\r\n          label: \"Joined\",\r\n          link: \"/app/reports/all_candidates_joined\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 7,\r\n          label: \"Not Joined\",\r\n          link: \"/app/reports/all_candidates_ditched\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 8,\r\n          label: companyType === \"COMPANY\" ? \"Vendor On-boarded Candidates\" :\"Invoiced Candidates\",\r\n          link: companyType === \"COMPANY\" ? \"/app/reports/vendor_onboarded_candidates\" : \"/app/reports/all_candidates_invoiced\" ,\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 9,\r\n          label: \"Credit Note\",\r\n          link: \"/app/reports/all_candidates_credit_note\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 10,\r\n          label: \"Dropped\",\r\n          link: \"/app/reports/all_candidates_drop\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 10,\r\n      label: \"Sources\",\r\n      type: \"settings\",\r\n      link: \"/app/settings\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Settings\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={setting}\r\n              alt=\"setting\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n      subMenu: [\r\n        {\r\n          id: 0,\r\n          label: \"Source of Profile\",\r\n          link: \"/app/settings/source\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n        {\r\n          id: 0,\r\n          label: \"Free Message Activity\",\r\n          link: \"/app/settings/free_message_activity\",\r\n          icon: (\r\n            <IconButton>\r\n              <ArrowLeftIcon />\r\n            </IconButton>\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 11,\r\n      label: \"Refo Billing\",\r\n      link: \"/app/plans\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Billing\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={price}\r\n              alt=\"price\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const cc = [\r\n    {\r\n      id: 0,\r\n      label: \"Live Status\",\r\n      link: \"/app/dashboard\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Live Status\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={dashboard}\r\n              alt=\"dashboard\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      label: companyType === \"COMPANY\"&&\"Projects\",\r\n      link: companyType === \"COMPANY\"&& \"/app/projects\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title={companyType === \"COMPANY\"&& \"Projects\"} placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={clients}\r\n              alt={companyType === \"COMPANY\"&& \"Projects\"}\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 1,\r\n      label: \"Requirements\",\r\n      link: \"/app/requirements\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Requirements\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={requirement}\r\n              alt=\"requirement\"\r\n              className={classNames(classes.Icon2)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      label: \"Candidates\",\r\n      link: \"/app/cc_candidates\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={candidates}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 3,\r\n      label: \"Search Candidates\",\r\n      link: \"/app/search\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Search Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={search}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const recruiter = [\r\n    {\r\n      id: 0,\r\n      label: \"Live Status\",\r\n      link: \"/app/dashboard\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Live Status\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={dashboard}\r\n              alt=\"dashboard\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 1,\r\n      label: \"Candidates\",\r\n      link: \"/app/recruiter_candidates\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={candidates}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      label: \"Search Candidates\",\r\n      link: \"/app/search\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Search Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={search}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const others = [\r\n    {\r\n      id: 0,\r\n      label: \"Live Status\",\r\n      link: \"/app/dashboard\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Live Status\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={dashboard}\r\n              alt=\"dashboard\"\r\n              className={classNames(classes.Icon1)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 1,\r\n      label: \"Requirements\",\r\n      link: \"/app/others_requirements\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Requirements\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={requirement}\r\n              alt=\"requirement\"\r\n              className={classNames(classes.Icon2)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 2,\r\n      label: \"Candidates\",\r\n      link: \"/app/others_candidates\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={candidates}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n    {\r\n      id: 3,\r\n      label: \"Search Candidates\",\r\n      link: \"/app/search\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Search Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={search}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const chat = [\r\n    {\r\n      id: 0,\r\n      label: \"Chat\",\r\n      link: \"/app/singlechat\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Chat\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={whatsapp}\r\n              alt=\"whatsapp\"\r\n              className={classNames(classes.Icon4)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const share = [\r\n    {\r\n      id: 0,\r\n      label: \"Candidates\",\r\n      type: \"title\",\r\n      link: \"#\",\r\n      view: true,\r\n      icon: (\r\n        <Tooltip title=\"Candidates\" placement=\"right\">\r\n          <IconButton>\r\n            <img\r\n              src={candidates}\r\n              alt=\"candidates\"\r\n              className={classNames(classes.Icon3)}\r\n            />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ),\r\n    },\r\n  ];\r\n  // global\r\n  var { isSidebarOpened } = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function () {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n      onClose={() => toggleSidebar(layoutDispatch)}\r\n    >\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        <>\r\n          {location.pathname !== \"/app/singlechat\" &&\r\n          location.pathname !== \"/shortList\" ? (\r\n            <>\r\n              {role === \"SUPERADMIN\"\r\n                ? superAdmin.map((link) => (\r\n                    <SidebarLink\r\n                      key={link.id}\r\n                      location={location}\r\n                      isSidebarOpened={isSidebarOpened}\r\n                      {...link}\r\n                    />\r\n                  ))\r\n                : role === \"ADMIN\"\r\n                ? admin\r\n                  .filter((link) => companyType !== \"COMPANY\" || link.label !== \"Refo Billing\" && link.label !== \"Assign Requirements Candidates\")\r\n                  .map((link) => (\r\n                    <SidebarLink\r\n                      key={link.id}\r\n                      location={location}\r\n                      isSidebarOpened={isSidebarOpened}\r\n                      {...link}\r\n                    />\r\n                  ))\r\n\r\n                : role === \"RECRUITER\"\r\n                ? recruiter.map((link) => (\r\n                    <SidebarLink\r\n                      key={link.id}\r\n                      location={location}\r\n                      isSidebarOpened={isSidebarOpened}\r\n                      {...link}\r\n                    />\r\n                  ))\r\n                : role === \"CLIENTCOORDINATOR\"\r\n                ? cc.map((link) => (\r\n                    <SidebarLink\r\n                      key={link.id}\r\n                      location={location}\r\n                      isSidebarOpened={isSidebarOpened}\r\n                      {...link}\r\n                    />\r\n                  ))\r\n                : others.map((link) => (\r\n                    <SidebarLink\r\n                      key={link.id}\r\n                      location={location}\r\n                      isSidebarOpened={isSidebarOpened}\r\n                      {...link}\r\n                    />\r\n                  ))}\r\n            </>\r\n          ) : location.pathname === \"/shortList\" ? (\r\n            share.map((link) => (\r\n              <SidebarLink\r\n                key={link.id}\r\n                location={location}\r\n                isSidebarOpened={isSidebarOpened}\r\n                {...link}\r\n              />\r\n            ))\r\n          ) : (\r\n            chat.map((link) => (\r\n              <SidebarLink\r\n                key={link.id}\r\n                location={location}\r\n                isSidebarOpened={isSidebarOpened}\r\n                {...link}\r\n              />\r\n            ))\r\n          )}\r\n        </>\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    // var breakpointWidth = theme.breakpoints.values.md\r\n    var breakpointWidth = theme.breakpoints.values.sm;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\resumeSearch\\Resume.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Header\\Header.js",["771","772","773","774","775","776","777"],"import React, { useEffect, useState, useReducer, useRef } from \"react\";\r\nimport {\r\n  Backdrop,\r\n  Box,\r\n  CircularProgress,\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  List,\r\n  Select,\r\n  TextField,\r\n  MenuItem,\r\n  SwipeableDrawer,\r\n  Toolbar,\r\n  AppBar,\r\n  InputAdornment,\r\n  Dialog,\r\n  DialogTitle,\r\n  Button,\r\n  Typography,\r\n  DialogContent,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  ClickAwayListener,\r\n  Tooltip,\r\n  Popper,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\n\r\nimport WhatsAppIcon from \"@material-ui/icons/WhatsApp\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport CloudOffIcon from \"@material-ui/icons/CloudOff\";\r\nimport CloudQueueIcon from \"@material-ui/icons/CloudQueue\";\r\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\r\nimport { Popover } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardMedia\";\r\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport VpnKeyIcon from \"@material-ui/icons/VpnKey\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport axios from \"axios\";\r\nimport classNames from \"classnames\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport Notification from \"../../components/Notification\";\r\nimport {\r\n  toggleSidebar,\r\n  useLayoutDispatch,\r\n  useLayoutState,\r\n} from \"../../context/LayoutContext\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport { signOut, useUserDispatch } from \"../../context/UserContext\";\r\nimport walletBlue from \"../../images/WalletBlue.png\";\r\nimport walletRed from \"../../images/WalletRed.png\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchBar from \"../Candidates/Search.js\";\r\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\r\n\r\nimport PermContactCalendarIcon from \"@material-ui/icons/PermContactCalendar\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport sample_candidates from \"../../images/sample_candidates.xlsx\";\r\nimport AddClient from \"../Admin/AddClient\";\r\nimport AddUser from \"../Admin/AddUser\";\r\nimport Add from \"../Candidates/Add\";\r\nimport AddRequirements from \"../Candidates/AddRequirements\";\r\nimport AssignAdd from \"../Admin/AssignAdd.js\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nimport addRequirements from \"../../images/quickAccess/Add_requirements.png\";\r\nimport addUsers from \"../../images/quickAccess/Add_users.png\";\r\nimport addClients from \"../../images/quickAccess/Add_clients.png\";\r\nimport addCandidates from \"../../images/quickAccess/Add_candidates.png\";\r\nimport assignRequirements from \"../../images/quickAccess/Assign_Requirements.png\";\r\nimport MSMEregistration from \"../../images/quickAccess/MSMEregistration.png\";\r\nimport shareCVImg from \"../../images/quickAccess/shareCV.png\";\r\n//import ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n  const [reducerValue, forceUpdate] = useReducer((x) => x + 1, 0);\r\n  var userDispatch = useUserDispatch();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var layoutState = useLayoutState();\r\n  var [notificationsPosition] = useState(2);\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var token = localStorage.getItem(\"token\");\r\n  var decode = jwtDecode(token);\r\n  var [WalletValue, setWalletValue] = useState(0);\r\n  var [image, setImage] = useState();\r\n  var [view, setView] = useState(\"\");\r\n  var [profile, setProfile] = useState([]);\r\n  var [file, setFile] = useState([]);\r\n  const [assessment, setAssessment] = useState([]);\r\n  const [hideContactDetails, setHideContactDetails] = useState(false);\r\n\r\n  //const [isScrollOpen,setIsScrollOpen]=useState(false)\r\n  const [isShareCV, setIsShareCV] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  var [deleteValue, setDeleteValue] = useState(\"\");\r\n  const [roleName, setRoleName] = useState(\"\");\r\n\r\n  var [backupView, setBackupView] = useState({\r\n    view: \"\",\r\n    link: \"\",\r\n  });\r\n\r\n  const [backupOpen, setBackupOpen] = React.useState(false);\r\n  const [confirmOpen, setConfirmOpen] = React.useState(false);\r\n  const [deleteOpen, setDeleteOpen] = React.useState(false);\r\n  const [uploadOpen, setUploadOpen] = React.useState(false);\r\n  const [uploadConfirmOpen, setUploadConfirmOpen] = React.useState(false);\r\n  const [existingOpen, setExistingOpen] = React.useState(false);\r\n  const [existingConfirmOpen, setExistingConfirmOpen] = React.useState(false);\r\n  const [invitationOpen, setInvitationOpen] = React.useState(false);\r\n\r\n  const [cvLink, setCvLink] = React.useState(\"\");\r\n\r\n  async function copyTextToClipboard(text) {\r\n    if (\"clipboard\" in navigator) {\r\n      return await navigator.clipboard.writeText(text);\r\n    } else {\r\n      return document.execCommand(\"copy\", true, text);\r\n    }\r\n  }\r\n\r\n  function handleCopy() {\r\n    copyTextToClipboard(\r\n      `${process.env.REACT_APP_SITE}/v1/#/companyRegister`,\r\n    ).then(() => {\r\n      handleNotificationCall(\"success\", \"Copied successfully\");\r\n    });\r\n  }\r\n\r\n  function handleCvLinkCopy(text) {\r\n    copyTextToClipboard(text).then(() => {\r\n      handleNotificationCall(\"success\", \"Copied successfully\");\r\n    });\r\n  }\r\n\r\n  function getLink(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/candidateCvLink`,\r\n      data: { requirementId: id },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCvLink(response.data.link);\r\n      } else {\r\n      }\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  const handleUploadConfirmClose = () => {\r\n    setUploadConfirmOpen(false);\r\n  };\r\n\r\n  // const handleUploadOpen = () => {\r\n  //   setUploadOpen(true);\r\n  // };\r\n\r\n  const handleUploadClose = () => {\r\n    setUploadOpen(false);\r\n  };\r\n\r\n  const handleExistingOpen = () => {\r\n    setExistingOpen(true);\r\n  };\r\n\r\n  const handleExistingClose = () => {\r\n    setExistingOpen(false);\r\n  };\r\n\r\n  // const handleBackupOpen = () => {\r\n  //   setBackupOpen(true);\r\n  // };\r\n\r\n  const handleBackupClose = () => {\r\n    setBackupOpen(false);\r\n  };\r\n\r\n  const handleconfirmOpen = () => {\r\n    setBackupOpen(false);\r\n    setConfirmOpen(true);\r\n  };\r\n\r\n  const handleconfirmClose = () => {\r\n    setConfirmOpen(false);\r\n  };\r\n\r\n  const handleExistingConfirmClose = () => {\r\n    setExistingConfirmOpen(false);\r\n  };\r\n\r\n  const handleInvitationClose = () => {\r\n    setInvitationOpen(false);\r\n  };\r\n\r\n  const handleShareCVClose = () => {\r\n    setIsShareCV(false);\r\n  };\r\n\r\n  const handleDeleteOpen = () => {\r\n    setConfirmOpen(false);\r\n    setDeleteOpen(true);\r\n  };\r\n\r\n  const handleDeleteClose = () => {\r\n    setDeleteOpen(false);\r\n  };\r\n\r\n  const toRef = useRef(null);\r\n  const fromRef = useRef(null);\r\n\r\n  const monthDropdown = [\r\n    {\r\n      id: \"1\",\r\n      Month: \"JAN\",\r\n    },\r\n    {\r\n      id: \"2\",\r\n      Month: \"FEB\",\r\n    },\r\n    {\r\n      id: \"3\",\r\n      Month: \"MAR\",\r\n    },\r\n    {\r\n      id: \"4\",\r\n      Month: \"APR\",\r\n    },\r\n\r\n    {\r\n      id: \"5\",\r\n      Month: \"MAY\",\r\n    },\r\n    {\r\n      id: \"6\",\r\n      Month: \"JUN\",\r\n    },\r\n    {\r\n      id: \"7\",\r\n      Month: \"JUL\",\r\n    },\r\n    {\r\n      id: \"8\",\r\n      Month: \"AUG\",\r\n    },\r\n\r\n    {\r\n      id: \"9\",\r\n      Month: \"SEP\",\r\n    },\r\n\r\n    {\r\n      id: \"10\",\r\n      Month: \"OCT\",\r\n    },\r\n\r\n    {\r\n      id: \"11\",\r\n      Month: \"NOV\",\r\n    },\r\n\r\n    {\r\n      id: \"12\",\r\n      Month: \"DEC\",\r\n    },\r\n  ];\r\n\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    right: false,\r\n  });\r\n\r\n  const [popperOpen, setPopperOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [anchorEl2, setAnchorEl2] = useState(null);\r\n\r\n  const [quickAccessOpen, setQuickAccessOpen] = useState(false);\r\n  const [quickAccessMobileOpen, setQuickAccessMobileOpen] = useState(false);\r\n\r\n  const handleQAClick = (event) => {\r\n    setAnchorEl2(event.currentTarget);\r\n    setQuickAccessOpen((previousOpen) => !previousOpen);\r\n  };\r\n\r\n  const handleQAMobileClick = (event) => {\r\n    setAnchorEl2(event.currentTarget);\r\n    setQuickAccessMobileOpen((previousOpen) => !previousOpen);\r\n  };\r\n\r\n  const qaOpen = quickAccessOpen && Boolean(anchorEl2);\r\n  const qaMobileOpen = quickAccessMobileOpen && Boolean(anchorEl2);\r\n\r\n  const qaId = qaOpen ? \"spring\" : undefined;\r\n  const qaMobileId = qaMobileOpen ? \"spring\" : undefined;\r\n\r\n  const handlePoperClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setPopperOpen((previousOpen) => !previousOpen);\r\n  };\r\n\r\n  const canBeOpen = popperOpen && Boolean(anchorEl);\r\n  const poperId = canBeOpen ? \"spring-popper\" : undefined;\r\n\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n    financialData();\r\n  };\r\n\r\n  /** Start Client **/\r\n\r\n  const [setDay] = useState(\"\");\r\n  const [setMonth] = useState(\"\");\r\n  const [setYear] = useState(\"\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from(\r\n    { length: 60 },\r\n    (_, i) => moment(new Date()).format(\"YYYY\") - i,\r\n  );\r\n\r\n  const [recruiterFields, setRecruiterFields] = useState([\r\n    {\r\n      name: \"\",\r\n      mobile: \"\",\r\n      email: \"\",\r\n    },\r\n  ]);\r\n\r\n  const recruiterChange = (event, index) => {\r\n    const values = [...recruiterFields];\r\n    values[index][event.target.name] = event.target.value;\r\n    setRecruiterFields(values);\r\n  };\r\n\r\n  const recruiterAdd = () => {\r\n    setRecruiterFields([\r\n      ...recruiterFields,\r\n      {\r\n        name: \"\",\r\n        mobile: \"\",\r\n        email: \"\",\r\n      },\r\n    ]);\r\n\r\n    const timeout = setTimeout(() => {\r\n      const element = document.getElementById(\"section\");\r\n\r\n      element.scrollIntoView({ behavior: \"smooth\" });\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timeout);\r\n  };\r\n  const recruiterRemove = (index) => {\r\n    if (recruiterFields.length !== -1) {\r\n      const values = [...recruiterFields];\r\n      values.splice(-1);\r\n      setRecruiterFields(values);\r\n    }\r\n  };\r\n\r\n  function handleAddClient(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/addClient`,\r\n        data: {\r\n          clientName: values.clientName,\r\n          clientIndustry: values.clientIndustry,\r\n          clientWebsite: values.clientWebsite,\r\n          aggStartDate: values.aggStartDate,\r\n          aggEndDate: values.aggEndDate,\r\n          orgRec: recruiterFields,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          history.push(\"/app/clients\");\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** End Client **/\r\n\r\n  /** Start User*/\r\n  function handleAddUser(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/addUser`,\r\n        data: {\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          email: values.email,\r\n          password: values.password,\r\n          mobile: values.mobile,\r\n          roleName: values.roleName,\r\n          companyName: values.companyName,\r\n          employeeId: values.employeeId,\r\n        },\r\n\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          history.push(\"/app/users\");\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  /** End User */\r\n\r\n  /** Start Candidate*/\r\n  const [source, setSource] = useState([]);\r\n  const messageRef = useRef();\r\n  const [recruitmentId, setRecruitmentId] = useState(\"\");\r\n  const [addList, setAddList] = useState([]);\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n  const [validation, setValidation] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const ExistCheck = (e) => {\r\n    if (decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\") {\r\n      CheckExitAlready(recruitmentId, e);\r\n    } else {\r\n      if (recruitmentId !== \"\") {\r\n        CheckExitAlready(recruitmentId, e);\r\n      } else {\r\n        handleNotificationCall(\"error\", \"Select Requirement\");\r\n      }\r\n    }\r\n  };\r\n\r\n  function CheckExitAlready(recruitmentId, e) {\r\n    var data = {};\r\n    var url = \"\";\r\n\r\n    if (e.target.name === \"email\") {\r\n      data = {\r\n        requirementId: recruitmentId,\r\n        email: e.target.value,\r\n      };\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/checkEmailExist`;\r\n    } else {\r\n      data = {\r\n        requirementId: recruitmentId,\r\n        mobile: e.target.value,\r\n      };\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/checkMobileExist`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [candidate, setCandidate] = useState({\r\n    requirementId: \"\",\r\n    source: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    candidateProcessed: \"\",\r\n    native: \"\",\r\n    preferredLocation: \"\",\r\n    relevantExperience: null,\r\n    educationalQualification: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    dob: \"\",\r\n    freeValue:\r\n      decode.isEnableFree === true\r\n        ? \"YES\"\r\n        : decode.isEnablePaid === true\r\n          ? \"NO\"\r\n          : \"YES\",\r\n  });\r\n\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n  function handleAddCandidate(values) {\r\n    return new Promise((resolve) => {\r\n      if (validation === true) {\r\n      } else {\r\n        setAddList(values);\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}CC/getRequirement`,\r\n          data: {\r\n            id: recruitmentId,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n            setRequirementList({\r\n              ...requirementList,\r\n              cand1_name: values.firstName + \" \" + values.lastName,\r\n              job1_location: response.data.data.jobLocation,\r\n              client1_name: response.data.data.client?.clientName,\r\n              job1_title: response.data.data.requirementName,\r\n              cand1_skills: values.skills,\r\n              job1_experience: response.data.data.experience,\r\n              rec_name: localStorage.getItem(\"firstName\"),\r\n              rec_mobile_no: localStorage.getItem(\"mobile\"),\r\n              req_id: response.data.data.uniqueId,\r\n            });\r\n\r\n            CheckAlreadyExit(values);\r\n          }\r\n          resolve();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  function CheckAlreadyExit(addList) {\r\n    var dob = addList.day + \"-\" + addList.month + \"-\" + addList.year;\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n      data: {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: \"\",\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob:\r\n          addList.day === undefined\r\n            ? \"\"\r\n            : dob !== \"--\"\r\n              ? addList.day + \"-\" + addList.month + \"-\" + addList.year\r\n              : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        sendMessage: \"\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleClickOpen();\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleAddList(send) {\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day + \"-\" + addList.month + \"-\" + addList.year;\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob:\r\n          addList.day === undefined\r\n            ? \"\"\r\n            : dob !== \"--\"\r\n              ? addList.day + \"-\" + addList.month + \"-\" + addList.year\r\n              : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        candidateRecruiterDiscussionRecording:\r\n          addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording:\r\n          addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:\r\n          addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n        sendMessage: send,\r\n      };\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/addCandidate`;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob:\r\n          addList.day === undefined\r\n            ? \"\"\r\n            : dob !== \"--\"\r\n              ? addList.day + \"-\" + addList.month + \"-\" + addList.year\r\n              : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        candidateRecruiterDiscussionRecording:\r\n          addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording:\r\n          addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording:\r\n          addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n        sendMessage: send,\r\n      };\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleClose();\r\n        var message = \"\";\r\n\r\n        if (file !== undefined) {\r\n          if (file?.length !== 0) {\r\n            uploadResume(file, response.data.candidateDetailsId);\r\n          }\r\n        }\r\n\r\n        if (assessment !== undefined) {\r\n          if (assessment?.length !== 0) {\r\n            uploadAssessment(assessment, response.data.candidateId);\r\n          }\r\n        }\r\n\r\n        if (send === true) {\r\n          if (candidate.freeValue === \"YES\") {\r\n            message = messageRef.current.value;\r\n\r\n            window.open(\r\n              \"https://api.whatsapp.com/send?phone=+91\" +\r\n              addList.mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n            );\r\n          } else {\r\n            message =\r\n              \"Hi \" +\r\n              requirementList.cand1_name +\r\n              \", Can we chat today about a job opening \" +\r\n              localStorage.getItem(\"firstName\") +\r\n              \", \" +\r\n              localStorage.getItem(\"mobile\") +\r\n              \", \" +\r\n              localStorage.getItem(\"companyName\") +\r\n              \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n            handleMessage(\r\n              response.data.candidate_mobile,\r\n              message,\r\n              response.data.candidateId,\r\n            );\r\n          }\r\n        }\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        decode.role === \"ADMIN\"\r\n          ? history.push(\"/app/admin_candidates\")\r\n          : decode.role === \"RECRUITER\"\r\n            ? history.push(\"/app/recruiter_candidates\")\r\n            : decode.role === \"CLIENTCOORDINATOR\"\r\n              ? history.push(\"/app/cc_candidates\")\r\n              : history.push(\"/app/others_candidates\");\r\n        setState({ ...state, right: false });\r\n        candidateReset();\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadResume(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"resume\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateResume`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        // aiResumeUpload(data)\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleMessage(mobile, message, candidateId) {\r\n    var url = \"\";\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = `${process.env.REACT_APP_SERVER}recruiter/changeYesCadidateStatus`;\r\n    } else {\r\n      url = `${process.env.REACT_APP_SERVER}chat/sendTemplateMessage`;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"first_message\",\r\n        vars: [\r\n          requirementList.cand1_name,\r\n          requirementList.rec_name,\r\n          requirementList.rec_mobile_no,\r\n          localStorage.getItem(\"companyName\"),\r\n        ],\r\n        message: message,\r\n        candidate_name: requirementList.cand1_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        setLoader(false);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      // handleStatusClose();\r\n      // handleStatusNewClose();\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (decode.role !== \"SUPERADMIN\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}source/viewSourcesList`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          setSource(response.data.data);\r\n        }\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [token]);\r\n\r\n  /** End Candidate */\r\n\r\n  /** Start Requirements */\r\n  const [recUser, setRecUser] = useState([]);\r\n\r\n  const ContentRef = React.useRef();\r\n  var [hideFromInternal, setHideFromInternal] = useState(false);\r\n  const [modeofWork, setModeofWork] = React.useState(\"\");\r\n  const [specialHiring, setSpecialHiring] = React.useState(\"\");\r\n  const [clientId, setClientId] = useState(\"\");\r\n  const [requirementsOrgId, setRequirementsOrgId] = useState(\"\");\r\n  const [clientList, setClientList] = useState([]);\r\n\r\n  const RequirementsSchema = Yup.object().shape({\r\n    requirementName: Yup.string().required(\"Requirement Name is required\"),\r\n    jobLocation: Yup.string().required(\"Job Location is required\"),\r\n    clientId: Yup.string().required(decode.companyType === \"COMPANY\" ? \"Project Name is required\" : \"Client Name is required\"),\r\n    orgRecruiterId: Yup.string().required(\"Org Recruiter Name is required\"),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    gist: Yup.string(),\r\n    hideFromInternal: Yup.string(),\r\n    work: Yup.string().required(\"Mode of work is required\"),\r\n    hiring: Yup.string(),\r\n    experience: Yup.string().required(\"Experience is required\"),\r\n  });\r\n\r\n  const {\r\n    register: requirementsRegister,\r\n    formState: {\r\n      errors: requirementsErrors,\r\n      isSubmitting: requirementsIsSubmitting,\r\n    },\r\n    handleSubmit: requirementsSubmit,\r\n    reset: requirementsReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(RequirementsSchema),\r\n  });\r\n\r\n  function handleClientNameChange(value) {\r\n    setClientId(value);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}CC/getOrganisationReciruterList`,\r\n      data: {\r\n        id: value,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setRecUser(response.data.data);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleUploadChange(e) {\r\n    setFile(e.target.files[0]);\r\n  }\r\n\r\n  function handleRequirementAdd(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      var url = \"\";\r\n      if (decode.role === \"ADMIN\") {\r\n        url = `${process.env.REACT_APP_SERVER}admin/addRequirement`;\r\n      } else {\r\n        url = `${process.env.REACT_APP_SERVER}CC/addRequirement`;\r\n      }\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: url,\r\n        data: {\r\n          requirementName: values.requirementName,\r\n          skills: values.skills,\r\n          clientId: clientId,\r\n          orgRecruiterId: requirementsOrgId,\r\n          jobLocation: values.jobLocation,\r\n          experience: values.experience,\r\n          gist: ContentRef.current.value,\r\n          file: file?.name,\r\n          modeOfWork: values.work,\r\n          specialHiring: values.hiring,\r\n          hideFromInternal: values.hideFromInternal,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          if (file?.name) {\r\n            uploadJD(file, response.data.requirementId);\r\n          }\r\n\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          history.push(\"/app/requirements\");\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        resolve();\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  function uploadJD(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}cc/updateRequirementJd`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** End Requirements */\r\n\r\n  /** Start Assign */\r\n  const [requirementName, setRequirementName] = useState([]);\r\n\r\n  const [externalUser, setExternalUser] = useState([]);\r\n  const [recruiterId, setRecruiterId] = useState(null);\r\n  const [requirementId, setRequirementId] = useState(null);\r\n  const [assignData, setAssignData] = useState([]);\r\n  const [assignPage, setAssignPage] = useState(0);\r\n  const [assignCurrerntPage, setAssignCurrerntPage] = useState(1);\r\n  const [assigncount, setAssignCount] = useState(0);\r\n\r\n  const assignSchema = Yup.object().shape({\r\n    recruiterId: Yup.string().required(\"User is required\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n  });\r\n\r\n  const {\r\n    register: assignRequirement,\r\n    formState: { errors: assignErrors, isSubmitting: assignIsSubmitting },\r\n    handleSubmit: assignSubmit,\r\n    reset: assignReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(assignSchema),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (decode.role !== \"SUPERADMIN\") {\r\n      const fetchData = async () => {\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/externalUserList`,\r\n          data: {},\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.status === true) {\r\n            setExternalUser(response.data.data);\r\n          }\r\n        });\r\n      };\r\n\r\n      const getRequirementName = async () => {\r\n        var url = \"\";\r\n\r\n        if (decode.role === \"ADMIN\") {\r\n          url = `${process.env.REACT_APP_SERVER}admin/getAllRequirementList`;\r\n        } else if (\r\n          decode.role === \"SUBVENDOR\" ||\r\n          decode.role === \"FREELANCER\"\r\n        ) {\r\n          url = `${process.env.REACT_APP_SERVER}recruiter/getAssignedRequierments`;\r\n        } else if (decode.role === \"RECRUITER\") {\r\n          url = `${process.env.REACT_APP_SERVER}recruiter/requirementList`;\r\n        } else {\r\n          url = `${process.env.REACT_APP_SERVER}CC/getCCRequirementList`;\r\n        }\r\n\r\n        axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: {},\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n            if (response.data.status === true) {\r\n              setLoader(false);\r\n              setRequirementName(response.data.data);\r\n            }\r\n          })\r\n\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      };\r\n      fetchData();\r\n      getRequirementName();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token]);\r\n\r\n  function handleAssignRequirements(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/assignRequirements`,\r\n        data: {\r\n          recruiterId: recruiterId?.id,\r\n          requirementId: requirementId?.id,\r\n        },\r\n\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        resolve();\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          history.push(\"/app/users\");\r\n          assignReset();\r\n          setRecruiterId(null);\r\n          setRequirementId(null);\r\n          forceUpdate();\r\n          setState({ ...state, right: false });\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n        setLoader(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  const handlerequirementChangePage = (event, newPage) => {\r\n    setAssignPage(newPage);\r\n    setLoader(true);\r\n    setAssignCurrerntPage(newPage + 1);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewAllAssigendRequirements`,\r\n      data: {\r\n        recruiterId: recruiterId?.id,\r\n        page: newPage + 1,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setAssignData(response.data.data);\r\n        setAssignCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n  function handleAssignStatus(id, value) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/changeAssignedRequirementStatus`,\r\n      data: {\r\n        id: id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        const switchState = assignData.map((item) => {\r\n          if (item.id === id) {\r\n            return { ...item, isActive: value };\r\n          }\r\n          return item;\r\n        });\r\n        setAssignData(switchState);\r\n        setLoader(false);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getAssigendRequirements(id) {\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/viewAllAssigendRequirements`,\r\n      data: {\r\n        recruiterId: id,\r\n        page: \"1\",\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setAssignData(response.data.data);\r\n          setAssignCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /** End Assign */\r\n\r\n  const positions = [toast.POSITION.TOP_RIGHT];\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[notificationsPosition],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n  const [Month, setMonthValue] = useState({\r\n    toMonth: \"\",\r\n    fromMonth: \"\",\r\n  });\r\n\r\n\r\n\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string().max(255).required(\"First Name is required\"),\r\n    lastName: Yup.string().max(255).required(\"Last Name is required\"),\r\n    mobile: Yup.string()\r\n      .required(\"Mobile is required\")\r\n      .min(10, \"Must be exactly 10 digits\")\r\n      .max(10, \"Must be exactly 10 digits\"),\r\n    companyName: Yup.string().max(255).required(\"Company Name is required\"),\r\n  });\r\n\r\n  const changeSchema = Yup.object().shape({\r\n    old: Yup.string()\r\n      .required(\"Old Password is required\")\r\n      .min(8, \"Old Password must be at least 8 characters\"),\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(8, \"Password must be at least 8 characters\"),\r\n    confirm: Yup.string()\r\n      .required(\"Confirm Password is required\")\r\n      .min(8, \"Confirm Password must be at least 8 characters\"),\r\n  });\r\n\r\n  const userSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email must be a Valid Email Address\"),\r\n    firstName: Yup.string()\r\n      .max(255)\r\n      .required(\"First Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    mobile: Yup.string()\r\n      .required(\"Mobile is required\")\r\n      .min(10, \"Must be exactly 10 digits\")\r\n      .max(10, \"Must be exactly 10 digits\"),\r\n    roleName: Yup.string().required(\"User Category is required\"),\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(8, \"Password must be at least 8 characters\"),\r\n    employeeId: Yup.string(),\r\n    companyName:\r\n      roleName === \"SUBVENDOR\"\r\n        ? Yup.string().required(\"company Name is required\")\r\n        : Yup.string(),\r\n  });\r\n\r\n  const clientSchema = Yup.object().shape({\r\n    clientName: Yup.string().max(255).required(decode.companyType === \"COMPANY\" ? \"Project Name is required\" : \"Client Name is required\"),\r\n    clientIndustry: Yup.string()\r\n      .max(255)\r\n      .required(decode.companyType === \"COMPANY\" ? \"Project Division is required\" : \"Client Industry is required\"),\r\n    // clientWebsite: Yup.string()\r\n    //   .max(255)\r\n    //   .required(\"Clients Website is required\"),\r\n    aggStartDate: Yup.string().max(255).required(\"Start Date is required\"),\r\n    aggEndDate: Yup.string().max(255).required(\"End Date is required\"),\r\n  });\r\n\r\n  const invitationSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Email must be a Valid Email Address\")\r\n      .required(\"Email is required\"),\r\n  });\r\n\r\n  const shareCVSchema = Yup.object().shape({\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    email: Yup.string()\r\n      .email(\"Email must be a Valid Email Address\")\r\n      .required(\"Email is required\"),\r\n    mobile: Yup.string()\r\n      .required(\"Mobile is required\")\r\n      .min(10, \"Must be exactly 10 digits\")\r\n      .max(10, \"Must be exactly 10 digits\"),\r\n  });\r\n\r\n  const candidateSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Email must be a Valid Email Address\")\r\n      .required(\"Email is required\"),\r\n    firstName: Yup.string()\r\n      .required(\"First Name is required\")\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string()\r\n      .max(255)\r\n      .required(\"Last Name is required\")\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    mobile: Yup.string()\r\n      .required(\"Contact Number is required\")\r\n      .min(10, \"Must be exactly 10 digits\")\r\n      .max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required(\"Skill is required\"),\r\n    source: Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    location: Yup.string().nullable().notRequired(),\r\n    alternateMobile:\r\n      phoneValidation === true\r\n        ? Yup.string()\r\n          .required(\"Alternate Contact Number is required\")\r\n          .min(10, \"Must be exactly 10 digits\")\r\n          .max(10, \"Must be exactly 10 digits\")\r\n        : Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().nullable().required(\"Gender is required\"),\r\n    educationalQualification: Yup.string().nullable().notRequired(),\r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    expectedCtc: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(),\r\n    native: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number()\r\n      .nullable(true)\r\n      .transform((_, val) => (val ? Number(val) : null)),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n  const {\r\n    register: candidateRegister,\r\n    formState: { errors: candidateErrors, isSubmitting: candidateIsSubmitting },\r\n    handleSubmit: candidateSubmit,\r\n    reset: candidateReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(candidateSchema),\r\n  });\r\n\r\n  const {\r\n    register: clientRegister,\r\n    formState: { errors: clientErrors, isSubmitting: clientIsSubmitting },\r\n    handleSubmit: clientSubmit,\r\n    reset: clientReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(clientSchema),\r\n  });\r\n\r\n  const {\r\n    register: userRegister,\r\n    formState: { errors: userErrors, isSubmitting: userIsSubmitting },\r\n    handleSubmit: userSubmit,\r\n    reset: userReset,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(userSchema),\r\n  });\r\n\r\n  const {\r\n    register: changePassword,\r\n    formState: { errors: changeErrors, isSubmitting: changeIsSubmitting },\r\n    handleSubmit: changeSubmit,\r\n  } = useForm({\r\n    mode: \"onBlur\",\r\n    resolver: yupResolver(changeSchema),\r\n  });\r\n\r\n  const {\r\n    register: invite,\r\n    formState: { errors: inviteErrors, isSubmitting: inviteIsSubmitting },\r\n    handleSubmit: inviteSubmit,\r\n    reset: inviteReset,\r\n  } = useForm({\r\n    resolver: yupResolver(invitationSchema),\r\n  });\r\n\r\n  const {\r\n    register: shareCV,\r\n    formState: { errors: shareCVErrors, isSubmitting: shareCVIsSubmitting },\r\n    handleSubmit: shareCVSubmit,\r\n    reset: shareCVReset,\r\n  } = useForm({\r\n    resolver: yupResolver(shareCVSchema),\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n  const { handleSubmit: uploadSubmit } = useForm({\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const [values, setValues] = React.useState({\r\n    showOldPassword: false,\r\n    showPassword: false,\r\n    showConfirmPassword: false,\r\n  });\r\n\r\n  const handleClickOldPassword = () => {\r\n    setValues({ ...values, showOldPassword: !values.showOldPassword });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleClickConfirmPassword = () => {\r\n    setValues({ ...values, showConfirmPassword: !values.confirm });\r\n  };\r\n\r\n  function handleChange(event) {\r\n    setImage(URL.createObjectURL(event.target.files[0]));\r\n\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"image\", event.target.files[0]);\r\n\r\n    setLoader(true);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/setLogo`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setLoader(false);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n        setImage(response.data.image);\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleCompanySettings(values) {\r\n    if(fromRef.current.value !==\"\" && toRef.current.value !==\"\"){\r\n      handleNotificationCall(\"error\", \"Check Finacial Year Properly\");\r\n      return\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/editMyCompanySettings`,\r\n        data: {\r\n          fromMonth: fromRef.current.value,\r\n          toMonth: toRef.current.value,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            forceUpdate();\r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          }\r\n          setLoader(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  function handleBackupOnly(view) {\r\n    setLoader(true);\r\n    setView(\"Download\");\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/resumeBackup`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          handleResumeBackup(view);\r\n        } else {\r\n          setLoader(false);\r\n\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleResumeBackup(view) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/backupData`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          handleArchiveDownload(view);\r\n        } else {\r\n          setLoader(false);\r\n\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleArchiveDownload(view) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/archiveDownload`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setBackupView({\r\n            ...backupView,\r\n            view: view,\r\n            link: response.data.link,\r\n          });\r\n        } else {\r\n          setLoader(false);\r\n\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function handleUploadConfirm() {\r\n    if (file && file.name) {\r\n      setUploadConfirmOpen(true);\r\n      handleUploadClose();\r\n    } else {\r\n      handleNotificationCall(\"error\", \"No file uploaded\");\r\n    }\r\n  }\r\n\r\n  function handleExistingConfirm() {\r\n    if (file && file.name) {\r\n      setExistingConfirmOpen(true);\r\n      handleExistingClose();\r\n    } else {\r\n      handleNotificationCall(\"error\", \"No file uploaded\");\r\n    }\r\n  }\r\n\r\n  function handleUpload() {\r\n    if (file && file.name) {\r\n      var FormData = require(\"form-data\");\r\n      var data = new FormData();\r\n      data.append(\"backup\", file);\r\n\r\n      setLoader(true);\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/clientRestoreBackup`,\r\n        data: data,\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          restore(response.data.foldername);\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      });\r\n    } else {\r\n      handleNotificationCall(\"error\", \"No file uploaded\");\r\n    }\r\n  }\r\n\r\n  function restore(foldername) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/clientrestoreDataBase`,\r\n      data: {\r\n        foldName: foldername,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setLoader(false);\r\n        handleNotificationCall(\"success\", response.data.message);\r\n        handleUploadConfirmClose();\r\n        window.location.reload();\r\n      } else {\r\n        setLoader(false);\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleExistingUpload() {\r\n    if (file && file.name) {\r\n      var FormData = require(\"form-data\");\r\n      var data = new FormData();\r\n      data.append(\"backup\", file);\r\n\r\n      setLoader(true);\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/uploadExistingCandidates`,\r\n        data: data,\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          handleNotificationCall(\"success\", response.data.message);\r\n          handleExistingConfirmClose();\r\n          setLoader(false);\r\n        } else {\r\n          setLoader(false);\r\n          handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n      });\r\n    } else {\r\n      handleNotificationCall(\"error\", \"No file uploaded\");\r\n    }\r\n  }\r\n\r\n  const deleteRef = useRef(null);\r\n\r\n  function handleBackupDelete() {\r\n    setLoader(true);\r\n    if (deleteRef.current.value === \"DELETE\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/inactiveBackup`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            window.location.reload();\r\n            handleDeleteClose();\r\n            handleNotificationCall(\"success\", \"Data is deleted permanently\");\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          }\r\n          setLoader(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setLoader(false);\r\n      handleNotificationCall(\"error\", \"Doesn't match\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    var decode = jwtDecode(token);\r\n    if (decode.role !== \"SUPERADMIN\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}auth/getLogo`,\r\n        data: {},\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            setImage(response.data.image);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n      const fetchData = async () => {\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}recruiter/viewUsers`,\r\n          data: {\r\n            id: decode.user_id,\r\n          },\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n            if (response.data.status === true) {\r\n              setProfile(response.data.data);\r\n            }\r\n            setLoader(false);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n\r\n            if (\r\n              error?.response?.status === 401 ||\r\n              error?.response?.status === 403\r\n            ) {\r\n              signOut(userDispatch, props.history);\r\n            }\r\n          });\r\n      };\r\n\r\n      if (decode.role === \"ADMIN\") {\r\n        financialData();\r\n      }\r\n      fetchData();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token]);\r\n\r\n  const financialData = async () => {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/myCompanySettings`,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setMonthValue({\r\n          toMonth: response.data.data.toMonth,\r\n          fromMonth: response.data.data.fromMonth,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  function updateProfile(values) {\r\n    return new Promise((resolve) => {\r\n      setLoader(true);\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}admin/updateProfile`,\r\n        data: {\r\n          id: decode.user_id,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          companyName: values.companyName,\r\n          mobile: values.mobile,\r\n          email: values.email,\r\n          employeeId: values.employeeId,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          if (response.data.status === true) {\r\n            localStorage.setItem(\"firstName\", values.firstName);\r\n            localStorage.setItem(\"email\", values.email);\r\n            localStorage.setItem(\"mobile\", values.mobile);\r\n            localStorage.setItem(\"companyName\", values.companyName);\r\n\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            forceUpdate();\r\n\r\n            setState({ ...state, right: false });\r\n          } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n          }\r\n          resolve();\r\n          setLoader(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  async function handleChangePassword(values) {\r\n    if (values.password !== values.confirm) {\r\n        handleNotificationCall(\"error\", \"Password is mismatch\");\r\n        return\r\n    }\r\n    setLoader(true);\r\n    try {\r\n        var decode = jwtDecode(token);\r\n        var url = decode.role === \"SUPERADMIN\"\r\n            ? `${process.env.REACT_APP_SERVER}superadmin/changeMyPassword`\r\n            : `${process.env.REACT_APP_SERVER}auth/changeMyPassword`;\r\n\r\n        const response = await axios({\r\n            method: \"post\",\r\n            url: url,\r\n            data: {\r\n                newPassword: values.password,\r\n                oldPassword: values.old,\r\n            },\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: token,\r\n            },\r\n        });\r\n\r\n        if (response.data.status === true) {\r\n            handleNotificationCall(\"success\", response.data.message);\r\n            forceUpdate();\r\n            setState({ ...state, right: false });\r\n        } else {\r\n            handleNotificationCall(\"error\", response.data.message);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    } finally {\r\n        setLoader(false);\r\n    }\r\n  }\r\n\r\n  function inviteMSME(values) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/inviteMsme`,\r\n      data: {\r\n        email: values.email,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleNotificationCall(\"success\", response.data.message);\r\n        inviteReset();\r\n        handleInvitationClose();\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function shareCVShortList(values) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}admin/sendCV`,\r\n      data: {\r\n        email: values.email,\r\n        mobile: values.mobile,\r\n        requirementId: requirementId?.id,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        handleNotificationCall(\"success\", response.data.message);\r\n        shareCVReset();\r\n        handleShareCVClose();\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    var decode = jwtDecode(token);\r\n\r\n    if (decode.role !== \"SUPERADMIN\") {\r\n      const fetchData = async () => {\r\n        axios({\r\n          method: \"post\",\r\n          url: `${process.env.REACT_APP_SERVER}auth/getMyWallet`,\r\n          data: {},\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: token,\r\n          },\r\n        }).then(function (response) {\r\n          if (response.data.data !== null) {\r\n            setWalletValue(response.data.data?.remainingMessages);\r\n          } else {\r\n            setWalletValue(0);\r\n          }\r\n        });\r\n      };\r\n      fetchData();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reducerValue, token]);\r\n\r\n  useEffect(() => {\r\n    const changeWallet = () => {\r\n      forceUpdate();\r\n    };\r\n\r\n    window.addEventListener(\"storage\", changeWallet);\r\n    return () => {\r\n      window.removeEventListener(\"storage\", changeWallet);\r\n    };\r\n  }, []);\r\n\r\n  const list = (anchor) => (\r\n    <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n      <List>\r\n        {view === \"Settings\" ? (\r\n          <>\r\n            <Card className={classes.root}>\r\n              <CardHeader>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={1}\r\n                  className={classes.drawerHeader}\r\n                >\r\n                  <Grid item xs={10} md={6}>\r\n                    <Typography variant=\"subtitle1\"> Settings </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={2} lg={6} className={classes.drawerClose}>\r\n                    <CloseIcon\r\n                      className={classes.closeBtn}\r\n                      size=\"14px\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardHeader>\r\n\r\n              <form onSubmit={uploadSubmit(handleCompanySettings)}>\r\n                <CardContent className={classes.root}>\r\n                  <Grid container direction=\"row\" spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <Box\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <Avatar\r\n                          alt=\"Profile\"\r\n                          src={image}\r\n                          className={classes.avatarButton}\r\n                        />\r\n                      </Box>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid container direction=\"row\" spacing={2}>\r\n                    <Grid item xs={12} lg={4}></Grid>\r\n\r\n                    <Grid item xs={12} lg={4}>\r\n                      <FormControl>\r\n                        <div className={classes.root + \" \" + classes.center}>\r\n                          <input\r\n                            accept=\"image/*\"\r\n                            className={classes.input}\r\n                            id=\"icon-button-file\"\r\n                            type=\"file\"\r\n                            style={{ display: \"none\" }}\r\n                            onChange={handleChange}\r\n                          />\r\n                          <label htmlFor=\"icon-button-file\">\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              className={classes.button}\r\n                              startIcon={<PhotoCamera />}\r\n                              aria-label=\"upload picture\"\r\n                              component=\"span\"\r\n                            >\r\n                              Upload Logo\r\n                            </Button>\r\n                          </label>\r\n                        </div>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={4}></Grid>\r\n                    <Grid item xs={12}>\r\n                      <InputLabel shrink htmlFor=\"fromMonth\">\r\n                        Financial Year\r\n                      </InputLabel>\r\n\r\n                      <FormControl className={classes.margin}>\r\n                        <div className={classes.space}>\r\n                          <Select\r\n                            labelId=\"fromMonth\"\r\n                            name=\"fromMonth\"\r\n                            defaultValue={Month.fromMonth}\r\n                            classes={{\r\n                              root: classes.customSelectField,\r\n                              icon: classes.customSelectIcon,\r\n                            }}\r\n                            onChange={(e) => {\r\n                              setMonthValue({\r\n                                ...Month,\r\n                                fromMonth: e.target.value,\r\n                              });\r\n                            }}\r\n                            inputRef={fromRef}\r\n                            disableUnderline\r\n                          >\r\n                            {monthDropdown.map((item, index) => {\r\n                              return [\r\n                                <MenuItem value={item.id}>\r\n\r\n                                  {item.Month}\r\n                                </MenuItem>,\r\n                              ];\r\n                            })}\r\n                          </Select>\r\n\r\n                          <Select\r\n                            labelId=\"toMonth\"\r\n                            name=\"toMonth\"\r\n                            defaultValue={Month.toMonth}\r\n                            onChange={(e) => {\r\n                              setMonthValue({\r\n                                ...Month,\r\n                                toMonth: e.target.value,\r\n                              });\r\n                            }}\r\n                            classes={{\r\n                              root: classes.customSelectField,\r\n                              icon: classes.customSelectIcon,\r\n                            }}\r\n                            inputRef={toRef}\r\n                            disableUnderline\r\n                          >\r\n                            {monthDropdown.map((item, index) => {\r\n                              return [\r\n                                <MenuItem value={item.id}>\r\n\r\n                                  {item.Month}\r\n                                </MenuItem>,\r\n                              ];\r\n                            })}\r\n                          </Select>\r\n                        </div>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    spacing={2}\r\n                    className={classes.drawerFooter}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      type=\"submit\"\r\n                      disabled={loader}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    >\r\n                      Close\r\n                    </Button>\r\n                  </Grid>\r\n                </CardActions>\r\n              </form>\r\n            </Card>\r\n          </>\r\n        ) : view === \"Change\" ? (\r\n          <>\r\n            <Card className={classes.root}>\r\n              <CardHeader>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={1}\r\n                  className={classes.drawerHeader}\r\n                >\r\n                  <Grid item xs={10} md={6}>\r\n                    <Typography variant=\"subtitle1\">\r\n                      Change Password\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={2} lg={6} className={classes.drawerClose}>\r\n                    <CloseIcon\r\n                      className={classes.closeBtn}\r\n                      size=\"14px\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardHeader>\r\n\r\n              <form onSubmit={changeSubmit(handleChangePassword)}>\r\n                <CardContent className={classes.root}>\r\n                  <Grid container direction=\"row\" spacing={2}>\r\n                    <Grid item xs={12}>\r\n                      <InputLabel shrink htmlFor=\"old\">\r\n\r\n                        Old Password\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          classes={{ root: classes.customTextField }}\r\n                          type={values.showOldPassword ? \"text\" : \"password\"}\r\n                          placeholder=\"Enter Password\"\r\n                          InputProps={{\r\n                            disableUnderline: true,\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  aria-label=\"toggle password visibility\"\r\n                                  onClick={handleClickOldPassword}\r\n                                >\r\n                                  {values.showOldPassword ? (\r\n                                    <Visibility />\r\n                                  ) : (\r\n                                    <VisibilityOff />\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          {...changePassword(\"old\")}\r\n                          error={changeErrors.old ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {changeErrors.old?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"password\">\r\n\r\n                        Password\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          classes={{ root: classes.customTextField }}\r\n                          type={values.showPassword ? \"text\" : \"password\"}\r\n                          placeholder=\"Enter Password\"\r\n                          InputProps={{\r\n                            disableUnderline: true,\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  aria-label=\"toggle password visibility\"\r\n                                  onClick={handleClickShowPassword}\r\n                                >\r\n                                  {values.showPassword ? (\r\n                                    <Visibility />\r\n                                  ) : (\r\n                                    <VisibilityOff />\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          {...changePassword(\"password\")}\r\n                          error={changeErrors.password ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {changeErrors.password?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"confirm\">\r\n\r\n                        Confirm Password\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          classes={{ root: classes.customTextField }}\r\n                          type={\r\n                            values.showConfirmPassword ? \"text\" : \"password\"\r\n                          }\r\n                          placeholder=\"Enter Confirm Password\"\r\n                          InputProps={{\r\n                            disableUnderline: true,\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  aria-label=\"toggle password visibility\"\r\n                                  onClick={handleClickConfirmPassword}\r\n                                >\r\n                                  {values.showConfirmPassword ? (\r\n                                    <Visibility />\r\n                                  ) : (\r\n                                    <VisibilityOff />\r\n                                  )}\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                          {...changePassword(\"confirm\")}\r\n                          error={changeErrors.confirm ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n\r\n                          {changeErrors.confirm?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    spacing={2}\r\n                    className={classes.drawerFooter}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      type=\"submit\"\r\n                      disabled={changeIsSubmitting}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    >\r\n                      Close\r\n                    </Button>\r\n                  </Grid>\r\n                </CardActions>\r\n              </form>\r\n            </Card>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Card className={classes.root}>\r\n              <CardHeader>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={1}\r\n                  className={classes.drawerHeader}\r\n                >\r\n                  <Grid item xs={10} md={6}>\r\n                    <Typography variant=\"subtitle1\">Update Profile</Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={2} lg={6} className={classes.drawerClose}>\r\n                    <CloseIcon\r\n                      className={classes.closeBtn}\r\n                      size=\"14px\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardHeader>\r\n\r\n              <form onSubmit={handleSubmit(updateProfile)}>\r\n                <CardContent>\r\n                  <Grid container direction=\"row\" spacing={2}>\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"firstName\">\r\n                        First Name\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          defaultValue={profile.recruiter?.firstName}\r\n                          {...register(\"firstName\")}\r\n                          error={errors.firstName ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.firstName?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"lastName\">\r\n                        Last Name\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          defaultValue={profile.recruiter?.lastName}\r\n                          {...register(\"lastName\")}\r\n                          error={errors.lastName ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.lastName?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"email\">\r\n                        Email\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          defaultValue={profile.email}\r\n                          {...register(\"email\")}\r\n                          error={errors.email ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.email?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"mobile\">\r\n                        Mobile\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Mobile\"\r\n                          id=\"mobile\"\r\n                          name=\"mobile\"\r\n                          defaultValue={profile.recruiter?.mobile}\r\n                          {...register(\"mobile\")}\r\n                          error={errors.mobile ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.mobile?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"companyName\">\r\n                        Company Name\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Company Name\"\r\n                          id=\"companyName\"\r\n                          name=\"companyName\"\r\n                          defaultValue={profile.recruiter?.companyName}\r\n                          {...register(\"companyName\")}\r\n                          error={errors.companyName ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.companyName?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} lg={6}>\r\n                      <InputLabel shrink htmlFor=\"employeeId\">\r\n                        Employee ID\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <TextField\r\n                          InputProps={{ disableUnderline: true }}\r\n                          classes={{ root: classes.customTextField }}\r\n                          size=\"small\"\r\n                          placeholder=\"Enter Employee ID\"\r\n                          id=\"employeeId\"\r\n                          name=\"employeeId\"\r\n                          defaultValue={profile.recruiter?.employeeId}\r\n                          {...register(\"employeeId\")}\r\n                          error={errors.employeeId ? true : false}\r\n                        />\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {errors.employeeId?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    spacing={2}\r\n                    className={classes.drawerFooter}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      type=\"submit\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      Update\r\n                    </Button>\r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      onClick={toggleDrawer(anchor, false)}\r\n                    >\r\n                      Close\r\n                    </Button>\r\n                  </Grid>\r\n                </CardActions>\r\n              </form>\r\n            </Card>\r\n          </>\r\n        )}\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  const User = (anchor) => (\r\n    <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n      <List>\r\n        <>\r\n          <AddUser\r\n            toggleDrawer={toggleDrawer}\r\n            handleSubmit={userSubmit}\r\n            handleAdd={handleAddUser}\r\n            setRoleName={setRoleName}\r\n            isSubmitting={userIsSubmitting}\r\n            errors={userErrors}\r\n            register={userRegister}\r\n          />\r\n        </>\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  const Client = (anchor) => (\r\n    <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n      <List>\r\n        <>\r\n          <AddClient\r\n            isSubmitting={clientIsSubmitting}\r\n            handleAdd={handleAddClient}\r\n            handleSubmit={clientSubmit}\r\n            toggleDrawer={toggleDrawer}\r\n            recruiterChange={recruiterChange}\r\n            recruiterFields={recruiterFields}\r\n            errors={clientErrors}\r\n            register={clientRegister}\r\n            recruiterAdd={recruiterAdd}\r\n            recruiterRemove={recruiterRemove}\r\n          />\r\n        </>\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  const Candidate = (anchor) => (\r\n    <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n      <List>\r\n        <>\r\n          <Add\r\n            setValidation={setValidation}\r\n            validation={validation}\r\n            handleAddList={handleAddList}\r\n            register={candidateRegister}\r\n            source={source}\r\n            recruitmentList={recruitmentList}\r\n            handleClose={handleClose}\r\n            errors={candidateErrors}\r\n            setLoader={setLoader}\r\n            toggleDrawer={toggleDrawer}\r\n            setRecruitmentList={setRecruitmentList}\r\n            requirementList={requirementList}\r\n            handleSubmit={candidateSubmit}\r\n            handleAdd={handleAddCandidate}\r\n            requirement={requirementName}\r\n            isSubmitting={candidateIsSubmitting}\r\n            open={open}\r\n            messageRef={messageRef}\r\n            reset={candidateReset}\r\n            setCandidate={setCandidate}\r\n            candidate={candidate}\r\n            setFile={setFile}\r\n            file={file}\r\n            setAssessment={setAssessment}\r\n            assessment={assessment}\r\n            setRecruitmentId={setRecruitmentId}\r\n            recruitmentId={recruitmentId}\r\n            days={days}\r\n            months={months}\r\n            years={years}\r\n            setDay={setDay}\r\n            setMonth={setMonth}\r\n            setYear={setYear}\r\n            setPhoneValidation={setPhoneValidation}\r\n            setHideContactDetails={setHideContactDetails}\r\n            hideContactDetails={hideContactDetails}\r\n            ExistCheck={ExistCheck}\r\n            requirementId={\"true\"}\r\n          />\r\n        </>\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  const Requirements = (anchor) => (\r\n    <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n      <List>\r\n        <>\r\n          <AddRequirements\r\n            handleAdd={handleRequirementAdd}\r\n            setClientList={setClientList}\r\n            clientList={clientList}\r\n            handleChange={handleClientNameChange}\r\n            handleSubmit={requirementsSubmit}\r\n            toggleDrawer={toggleDrawer}\r\n            register={requirementsRegister}\r\n            errors={requirementsErrors}\r\n            isSubmitting={requirementsIsSubmitting}\r\n            recUser={recUser}\r\n            modeOfWork={modeofWork}\r\n            setModeofWork={setModeofWork}\r\n            specialHiring={specialHiring}\r\n            setSpecialHiring={setSpecialHiring}\r\n            hideFromInternal={hideFromInternal}\r\n            setHideFromInternal={setHideFromInternal}\r\n            handleUploadChange={handleUploadChange}\r\n            file={file}\r\n            setFile={setFile}\r\n            ContentRef={ContentRef}\r\n            requirement={requirementName}\r\n            setRequirementsOrgId={setRequirementsOrgId}\r\n          />\r\n        </>\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  const Assign = (anchor) => (\r\n    <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n      <List>\r\n        <>\r\n          <AssignAdd\r\n            externalUser={externalUser}\r\n            toggleDrawer={toggleDrawer}\r\n            handleAssignRequirements={handleAssignRequirements}\r\n            assignSubmit={assignSubmit}\r\n            assignRequirement={assignRequirement}\r\n            assignErrors={assignErrors}\r\n            setRequirementId={setRequirementId}\r\n            handlerequirementChangePage={handlerequirementChangePage}\r\n            assigncount={assigncount}\r\n            assignPage={assignPage}\r\n            handleAssignStatus={handleAssignStatus}\r\n            requirementName={requirementName}\r\n            setRecruiterId={setRecruiterId}\r\n            assignIsSubmitting={assignIsSubmitting}\r\n            assignData={assignData}\r\n            assignCurrerntPage={assignCurrerntPage}\r\n            getAssigendRequirements={getAssigendRequirements}\r\n            recruiter={\"true\"}\r\n          />\r\n        </>\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={\r\n          layoutState.isSidebarOpened ? classes.appBar1 : classes.appBar\r\n        }\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={() => toggleSidebar(layoutDispatch)}\r\n            className={classNames(\r\n              classes.headerMenuButtonSandwich,\r\n              classes.headerMenuButtonCollapse,\r\n            )}\r\n          >\r\n            {layoutState.isSidebarOpened ? (\r\n              // <ArrowBackIcon\r\n              //       classes={{\r\n              //         root: classNames(\r\n              //           classes.headerIcon,\r\n              //           classes.headerIconCollapse,\r\n              //         ),\r\n              //       }}\r\n              //     />\r\n\r\n              <MenuIcon\r\n                classes={{\r\n                  root: classNames(\r\n                    classes.headerIcon,\r\n                    classes.headerIconCollapse,\r\n                  ),\r\n                }}\r\n              />\r\n            ) : (\r\n              <MenuIcon\r\n                classes={{\r\n                  root: classNames(\r\n                    classes.headerIcon,\r\n                    classes.headerIconCollapse,\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n          </IconButton>\r\n\r\n          <div\r\n            className={\r\n              layoutState.isSidebarOpened\r\n                ? classes.headerTopOpen\r\n                : classes.headerTop\r\n            }\r\n          >\r\n            <div\r\n              className={\r\n                layoutState.isSidebarOpened\r\n                  ? classes.headerWidth\r\n                  : classes.headerWidth1\r\n              }\r\n            >\r\n              <Typography variant=\"h5\" className={classes.title}>\r\n                <span className=\"refo-font\">refo</span>\r\n              </Typography>\r\n              {/* <div className={classes.lgQuickButton}>\r\n                {decode.role !== \"SUPERADMIN\" ? (\r\n                  <Tooltip title=\"Quick Access\" placement=\"bottom\">\r\n                    <IconButton>\r\n                      <ArrowLeftIcon\r\n                        id={qaId}\r\n                        onClick={handleQAClick}\r\n                        className={classes.quickAccessArrow}\r\n                      />\r\n                      \r\n                    </IconButton>\r\n                  </Tooltip>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </div>\r\n\r\n              <div className={classes.smQuickHeaderButton}>\r\n                {decode.role !== \"SUPERADMIN\" ? (\r\n                  <Tooltip title=\"Quick Access\" placement=\"bottom\">\r\n                    <IconButton>\r\n                      <ArrowLeftIcon\r\n                        id={qaMobileId}\r\n                        onClick={handleQAMobileClick}\r\n                        className={classes.quickAccessArrow}\r\n                      />\r\n                      \r\n                    </IconButton>\r\n                  </Tooltip>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </div> */}\r\n              {/* {\r\n                  isScrollOpen ?  */}\r\n              <Popper\r\n                id={qaId}\r\n                open={quickAccessOpen}\r\n                anchorEl={anchorEl2}\r\n                onClose={() => {\r\n                  setQuickAccessOpen(false);\r\n                }}\r\n                anchorReference=\"anchorPosition\"\r\n                anchorPosition={{ top: 0, left: 400 }}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"right\",\r\n                }}\r\n                className={\r\n                  layoutState.isSidebarOpened\r\n                    ? classes.quickAccessPopoverOpen\r\n                    : classes.quickAccessPopover\r\n                }\r\n              >\r\n                <ClickAwayListener\r\n                  onClickAway={() => {\r\n                    setQuickAccessOpen(false);\r\n                  }}\r\n                >\r\n                  <div className={classes.lgQuickButton}>\r\n                    {decode.role === \"ADMIN\" ? (\r\n                      <>\r\n                        <div className={classes.quickAccessContainer}>\r\n                          <IconButton\r\n                            onClick={(e) => {\r\n                              setView(\"Client\");\r\n                              clientReset();\r\n                              setState({ ...state, right: true });\r\n                            }}\r\n                          >\r\n                            <img src={addClients} alt=\"img\" />\r\n                            <p>Add Projects</p>\r\n                          </IconButton>\r\n                        </div>\r\n                        <div className={classes.quickAccessContainer}>\r\n                          <IconButton\r\n                            onClick={(e) => {\r\n                              setView(\"User\");\r\n                              userReset();\r\n                              setState({ ...state, right: true });\r\n                            }}\r\n                          >\r\n                            <img src={addUsers} alt=\"img\" />\r\n                            <p>Add Users</p>\r\n                          </IconButton>\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {decode.role === \"ADMIN\" ||\r\n                      decode.role === \"CLIENTCOORDINATOR\" ? (\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setView(\"Requirement\");\r\n                            requirementsReset();\r\n                            setFile([]);\r\n                            setSpecialHiring(\"\");\r\n                            setState({ ...state, right: true });\r\n                          }}\r\n                        >\r\n                          <img src={addRequirements} alt=\"img\" />\r\n                          <p>Add Requirements</p>\r\n                        </IconButton>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {decode.role === \"ADMIN\" ? (\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setView(\"Assign\");\r\n                            setAssignData([]);\r\n                            assignReset();\r\n                            setState({ ...state, right: true });\r\n                          }}\r\n                        >\r\n                          <img src={assignRequirements} alt=\"img\" />\r\n                          <p>Assign Requirements</p>\r\n                        </IconButton>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {decode.role !== \"SUPERADMIN\" ? (\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setView(\"Candidate\");\r\n                            candidateReset();\r\n                            setFile([]);\r\n                            setAssessment([]);\r\n                            setState({ ...state, right: true });\r\n                          }}\r\n                        >\r\n                          <img src={addCandidates} alt=\"img\" />\r\n                          <p>Add Candidates</p>\r\n                        </IconButton>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {decode.role === \"ADMIN\" ? (\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setInvitationOpen(true);\r\n                          }}\r\n                        >\r\n                          <img src={MSMEregistration} alt=\"img\" />\r\n                          <p>MSME Invitation</p>\r\n                        </IconButton>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {decode.role === \"ADMIN\" ? (\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setIsShareCV(true);\r\n                          }}\r\n                        >\r\n                          <img src={shareCVImg} alt=\"img\" />\r\n                          <p>Share & CV Shortlist</p>\r\n                        </IconButton>\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                </ClickAwayListener>\r\n              </Popper>\r\n            </div>\r\n\r\n            <div className={classes.grow}>\r\n              {decode.role !== \"SUPERADMIN\" ? (\r\n                <div className={classes.SlgButton}>\r\n                  <SearchBar\r\n                    WalletValue={WalletValue}\r\n                    search={props.history?.location?.search}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {/* {decode.role === \"ADMIN\" ? (\r\n                <Tooltip\r\n                  title=\"Credit is one candidate added to a job\"\r\n                  placement=\"bottom\"\r\n                  PopperProps={{ style: { marginTop: -35 } }}\r\n                >\r\n                  <Badge\r\n                    onClick={(e) => {\r\n                      history.push(\"/app/plans\");\r\n                    }}\r\n                    overlap=\"circular\"\r\n                    max={999999999}\r\n                    badgeContent={\r\n                      WalletValue === 0 ? \"0 Credits\" : WalletValue + \" Credits\"\r\n                    }\r\n                    anchorOrigin={{\r\n                      vertical: \"top\",\r\n                      horizontal: \"left\",\r\n                    }}\r\n                    className={classes.wallet}\r\n                    color={WalletValue === 0 ? \"primary\" : \"secondary\"}\r\n                  >\r\n                    {WalletValue === 0 ? (\r\n                      <Avatar\r\n                        alt=\"Profile\"\r\n                        src={walletRed}\r\n                        className={classes.walletButton}\r\n                      />\r\n                    ) : (\r\n                      <Avatar\r\n                        alt=\"Profile\"\r\n                        src={walletBlue}\r\n                        className={classes.walletButton}\r\n                      />\r\n                    )}\r\n                  </Badge>\r\n                </Tooltip>\r\n              ) : decode.role === \"CLIENTCOORDINATOR\" &&\r\n                decode.role === \"RECRUITER\" ? (\r\n                <Tooltip\r\n                  title=\"Credit is one candidate added to a job\"\r\n                  placement=\"bottom\"\r\n                >\r\n                  <Badge\r\n                    overlap=\"circular\"\r\n                    max={999999999}\r\n                    badgeContent={\r\n                      WalletValue === 0 ? \"0 Credits\" : WalletValue + \" Credits\"\r\n                    }\r\n                    anchorOrigin={{\r\n                      vertical: \"top\",\r\n                      horizontal: \"left\",\r\n                    }}\r\n                    className={classes.wallet}\r\n                    color={WalletValue === 0 ? \"primary\" : \"secondary\"}\r\n                  >\r\n                    {WalletValue === 0 ? (\r\n                      <Avatar\r\n                        alt=\"Profile\"\r\n                        src={walletRed}\r\n                        className={classes.walletButton}\r\n                      />\r\n                    ) : (\r\n                      <Avatar\r\n                        alt=\"Profile\"\r\n                        src={walletBlue}\r\n                        className={classes.walletButton}\r\n                      />\r\n                    )}\r\n                  </Badge>\r\n                </Tooltip>\r\n              ) : (\r\n                \"\"\r\n              )} */}\r\n\r\n              <ClickAwayListener onClickAway={(e) => setProfileMenu(false)}>\r\n                <div>\r\n                  <IconButton\r\n                    aria-haspopup=\"true\"\r\n                    color=\"inherit\"\r\n                    className={classes.headerMenuButton}\r\n                    aria-controls=\"profile-menu\"\r\n                    onClick={(e) => setProfileMenu(e.currentTarget)}\r\n                  >\r\n                    <Avatar\r\n                      alt=\"Profile\"\r\n                      src={image}\r\n                      className={classes.profileButton}\r\n                    />\r\n                  </IconButton>\r\n\r\n                  {profileMenu ? (\r\n                    <div className={classes.dropdown}>\r\n                      {decode.role !== \"SUPERADMIN\" ? (\r\n                        <ListItem className={classes.profileHeader}>\r\n                          <ListItemAvatar>\r\n                            <Avatar\r\n                              alt={\r\n                                profile.recruiter?.firstName +\r\n                                \" \" +\r\n                                profile.recruiter?.lastName\r\n                              }\r\n                              sizes=\"medium\"\r\n                              src={image}\r\n                              className={classes.chipAvatar}\r\n                            />\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            primary={\r\n                              <>\r\n\r\n                                <Typography>\r\n\r\n                                  {profile.recruiter?.firstName +\r\n                                    \" \" +\r\n                                    profile.recruiter?.lastName}\r\n                                </Typography>\r\n                                <Typography>\r\n\r\n                                  {profile.roleName}-\r\n                                  {profile.recruiter?.companyName}\r\n                                </Typography>\r\n                                <Typography> {profile.email} </Typography>\r\n                              </>\r\n                            }\r\n                          />\r\n                          {/* <ListItemSecondaryAction className={classes.closeBtn} onClick={() => signOut(userDispatch, props.history)}>\r\n                  \r\n                 <VscSignOut  className={classes.IconButton} />   \r\n \r\n                 </ListItemSecondaryAction> */}\r\n                        </ListItem>\r\n                      ) : (\r\n                        <ListItem className={classes.profileHeader}>\r\n                          <ListItemAvatar>\r\n                            <Avatar\r\n                              alt={\r\n                                profile.recruiter?.firstName +\r\n                                \" \" +\r\n                                profile.recruiter?.lastName\r\n                              }\r\n                              sizes=\"medium\"\r\n                              src={image}\r\n                              className={classes.chipAvatar}\r\n                            />\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            primary={\r\n                              <>\r\n\r\n                                <Typography> SUPERADMIN </Typography>\r\n                                <Typography>\r\n\r\n                                  {localStorage.getItem(\"email\")}\r\n                                </Typography>\r\n                              </>\r\n                            }\r\n                          />\r\n                          {/* <ListItemSecondaryAction  onClick={() => signOut(userDispatch, props.history)}>\r\n                \r\n                 \r\n\r\n                <VscSignOut className={classes.IconButton}    />   \r\n\r\n                </ListItemSecondaryAction> */}\r\n                        </ListItem>\r\n                      )}\r\n\r\n                      {decode.role === \"SUPERADMIN\" ? (\r\n                        <ListItem\r\n                          className={classes.profileMenuIcon}\r\n                          onClick={(e) => {\r\n                            history.push(\"/app/ticket\");\r\n                          }}\r\n                        >\r\n                          <ContactSupportIcon />\r\n                          Support\r\n                        </ListItem>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {decode.role === \"ADMIN\" ? (\r\n                        <div>\r\n                          <ListItem\r\n                            className={classes.profileMenuIcon}\r\n                            onClick={(e) => {\r\n                              setView(\"Settings\");\r\n                              setState({ ...state, right: true });\r\n                            }}\r\n                          >\r\n                            <SettingsIcon /> Settings\r\n                          </ListItem>\r\n                          <ListItem\r\n                            className={classes.profileMenuIcon}\r\n                            onClick={(e) => {\r\n                              history.push(\"/app/ticket\");\r\n                            }}\r\n                          >\r\n                            <ContactSupportIcon />\r\n                            Support\r\n                          </ListItem>\r\n\r\n                          <ListItem\r\n                            className={classes.profileMenuIcon}\r\n                            onClick={(e) => {\r\n                              setView(\"Profile\");\r\n                              setState({ ...state, right: true });\r\n                            }}\r\n                          >\r\n                            <PermContactCalendarIcon /> Update Profile\r\n                          </ListItem>\r\n\r\n                          {/*   <ListItem   className={classes.profileMenuIcon} \r\n                  onClick={(e) => {    handleBackupOpen();\r\n                    setBackupView({  \r\n                      ...backupView,\r\n                      view:\"\",\r\n                      link:\"\"\r\n                     });  \r\n                  }}\r\n                >\r\n                  <CloudDownloadIcon /> Backup & Store\r\n                </ListItem>\r\n\r\n\r\n               <ListItem   className={classes.profileMenuIcon}   onClick={(e) => {  handleUploadOpen(); setFile([]); }}   >\r\n                  <CloudUploadIcon /> Restore Backup\r\n                </ListItem> */}\r\n\r\n                          <ListItem\r\n                            className={classes.profileMenuIcon}\r\n                            onClick={(e) => {\r\n                              handleExistingOpen();\r\n                              setFile([]);\r\n                            }}\r\n                          >\r\n                            <PublishIcon /> Upload Existing Candidates\r\n                          </ListItem>\r\n                        </div>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n\r\n                      <ListItem\r\n                        className={classes.profileMenuIcon}\r\n                        onClick={(e) => {\r\n                          setView(\"Change\");\r\n                          setState({ ...state, right: true });\r\n                        }}\r\n                      >\r\n                        <VpnKeyIcon /> Change Password\r\n                      </ListItem>\r\n\r\n                      <ListItem\r\n                        className={classes.profileMenuIcon}\r\n                        onClick={() => signOut(userDispatch, props.history)}\r\n                      >\r\n                        <ExitToAppIcon /> Logout\r\n                      </ListItem>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              </ClickAwayListener>\r\n            </div>\r\n          </div>\r\n        </Toolbar>\r\n\r\n        <SwipeableDrawer\r\n          anchor=\"right\"\r\n          open={state[\"right\"]}\r\n          onClose={toggleDrawer(\"right\", false)}\r\n          onOpen={toggleDrawer(\"right\", true)}\r\n          classes={{\r\n            paper:\r\n              view === \"Client\" || view === \"Candidate\"\r\n                ? classes.clientDrawer\r\n                : classes.drawer,\r\n          }}\r\n        >\r\n          {view === \"Settings\" || view === \"Profile\" || view === \"Change\"\r\n            ? list(\"right\")\r\n            : view === \"User\"\r\n              ? User(\"right\")\r\n              : view === \"Client\"\r\n                ? Client(\"right\")\r\n                : view === \"Candidate\"\r\n                  ? Candidate(\"right\")\r\n                  : view === \"Requirement\"\r\n                    ? Requirements(\"right\")\r\n                    : view === \"Assign\"\r\n                      ? Assign(\"right\")\r\n                      : \"\"}\r\n        </SwipeableDrawer>\r\n      </AppBar>\r\n\r\n      {decode.role !== \"SUPERADMIN\" ? (\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <div className={classes.smQuickButton}>\r\n              <Popper\r\n                id={qaMobileId}\r\n                open={quickAccessMobileOpen}\r\n                anchorEl={anchorEl2}\r\n                onClose={() => {\r\n                  setQuickAccessMobileOpen(false);\r\n                }}\r\n                anchorPosition={{ top: 18, left: 400 }}\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                className={classes.quickAccessMobilePopover}\r\n              >\r\n                <div className={classes.quickAccessMobile}>\r\n                  {decode.role === \"ADMIN\" ? (\r\n                    <>\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setView(\"Client\");\r\n                            clientReset();\r\n                            setState({ ...state, right: true });\r\n                          }}\r\n                        >\r\n                          <img src={addClients} alt=\"img\" />\r\n                          <p>Add Projects</p>\r\n                        </IconButton>\r\n                      </div>\r\n                      <div className={classes.quickAccessContainer}>\r\n                        <IconButton\r\n                          onClick={(e) => {\r\n                            setView(\"User\");\r\n                            userReset();\r\n                            setState({ ...state, right: true });\r\n                          }}\r\n                        >\r\n                          <img src={addUsers} alt=\"img\" />\r\n                          <p>Add Users</p>\r\n                        </IconButton>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {decode.role === \"ADMIN\" ||\r\n                    decode.role === \"CLIENTCOORDINATOR\" ? (\r\n                    <div className={classes.quickAccessContainer}>\r\n                      <IconButton\r\n                        onClick={(e) => {\r\n                          setView(\"Requirement\");\r\n                          requirementsReset();\r\n                          setState({ ...state, right: true });\r\n                        }}\r\n                      >\r\n                        <img src={addRequirements} alt=\"img\" />\r\n                        <p>Add Requirements</p>\r\n                      </IconButton>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {decode.role === \"ADMIN\" ? (\r\n                    <div className={classes.quickAccessContainer}>\r\n                      <IconButton\r\n                        onClick={(e) => {\r\n                          setView(\"Assign\");\r\n                          setAssignData([]);\r\n                          assignReset();\r\n                          setState({ ...state, right: true });\r\n                        }}\r\n                      >\r\n                        <img src={assignRequirements} alt=\"img\" />\r\n                        <p>Assign Requirements</p>\r\n                      </IconButton>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  <div className={classes.quickAccessContainer}>\r\n                    <IconButton\r\n                      onClick={(e) => {\r\n                        setView(\"Candidate\");\r\n                        candidateReset();\r\n                        setState({ ...state, right: true });\r\n                      }}\r\n                    >\r\n                      <img src={addCandidates} alt=\"img\" />\r\n                      <p>Add Candidates</p>\r\n                    </IconButton>\r\n                  </div>\r\n                  {decode.role === \"ADMIN\" ? (\r\n                    <div className={classes.quickAccessContainer}>\r\n                      <IconButton\r\n                        onClick={(e) => {\r\n                          setInvitationOpen(true);\r\n                        }}\r\n                      >\r\n                        <img src={MSMEregistration} alt=\"img\" />\r\n                        <p>MSME Registration</p>\r\n                      </IconButton>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {decode.role === \"ADMIN\" ? (\r\n                    <div className={classes.quickAccessContainer}>\r\n                      <IconButton\r\n                        onClick={(e) => {\r\n                          setIsShareCV(true);\r\n                        }}\r\n                      >\r\n                        <img src={shareCVImg} alt=\"img\" />\r\n                        <p>Share & CV Shortlist</p>\r\n                      </IconButton>\r\n                    </div>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              </Popper>\r\n              <SearchBar\r\n                WalletValue={WalletValue}\r\n                search={props.history.location.search}\r\n              />\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      {decode.role !== \"SUPERADMIN\" ? (\r\n        <Box className={classes.lgButton}>\r\n          <Fab\r\n            aria-label=\"add\"\r\n            size=\"medium\"\r\n            component=\"div\"\r\n            variant=\"circular\"\r\n            aria-describedby={poperId}\r\n            onClick={handlePoperClick}\r\n            color=\"primary\"\r\n            sx={{\r\n              borderRadius: 0,\r\n              borderTopLeftRadius: \"50%\",\r\n              borderBottomLeftRadius: \"50%\",\r\n              borderTopRightRadius: \"50%\",\r\n              borderBottomRightRadius: \"4px\",\r\n              top: \"88%\",\r\n              position: \"fixed\",\r\n              right: 10,\r\n              zIndex: 99999,\r\n            }}\r\n          >\r\n            <InfoIcon />\r\n          </Fab>\r\n        </Box>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <Popover\r\n        aria-describedby={poperId}\r\n        open={popperOpen}\r\n        onClose={() => {\r\n          setPopperOpen(false);\r\n        }}\r\n        anchorEl={anchorEl}\r\n        sx={{ top: \"80%\" }}\r\n        anchorPosition={{ top: 225, right: 10, left: 0 }}\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"left\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Card sx={{ maxWidth: 250 }}>\r\n            <CardHeader>\r\n              <Box className={classes.chipMessageBox}>\r\n                <Chip\r\n                  variant=\"outlined\"\r\n                  className={classes.chipMessage}\r\n                  label={\r\n                    <>\r\n                      <Typography>\r\n                        <span className={classes.colorWhite}>\r\n                          {decode.role === \"SUPERADMIN\"\r\n                            ? \"SUPERADMIN\"\r\n                            : profile.recruiter?.firstName +\r\n                            \" \" +\r\n                            profile.recruiter?.lastName}\r\n                        </span>\r\n                      </Typography>\r\n                    </>\r\n                  }\r\n                  avatar={\r\n                    <Avatar\r\n                      alt={\r\n                        profile.recruiter?.firstName +\r\n                        \" \" +\r\n                        profile.recruiter?.lastName\r\n                      }\r\n                      sizes=\"medium\"\r\n                      src={image}\r\n                      className={classes.chipMessageAvatar}\r\n                    />\r\n                  }\r\n                ></Chip>\r\n              </Box>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Typography variant=\"body2\" className={classes.chipMessageText}>\r\n                REFO is available in mobile browser use after candidate upload\r\n                is super easy experience!\r\n              </Typography>\r\n              <Typography variant=\"body2\" className={classes.chipMessageText}>\r\n                Do every other task using your mobile browser.\r\n              </Typography>\r\n              <div className={classes.flexCenter}>\r\n                <Button\r\n                  endIcon={<WhatsAppIcon />}\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  className={classes.whatsappSend}\r\n                  onClick={(e) => {\r\n                    window.open(\r\n                      \"https://api.whatsapp.com/send?phone=+91\" +\r\n                      localStorage.getItem(\"mobile\") +\r\n                      \"&text=REFO is available in mobile browser so after candidate upload is super easy experience! \\n Do every other task using your mobile browser. - https://refo.app/\",\r\n                    );\r\n                  }}\r\n                >\r\n                  Send to\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Box>\r\n      </Popover>\r\n\r\n      <Dialog\r\n        onClose={handleBackupClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={backupOpen}\r\n        width=\"md\"\r\n        maxWidth=\"md\"\r\n        PaperProps={{\r\n          style: {\r\n            maxWidth: \"520px\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n\r\n              Backup and Store\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleBackupClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n\r\n        <DialogContent className={classes.chatListBackGround}>\r\n          <div className={classes.sendBackUp}>\r\n            <div className={classes.sendBackUpContainer}>\r\n              <Button\r\n                startIcon={\r\n                  <>\r\n                    <SwapVertIcon />\r\n                    <CloudQueueIcon />\r\n                  </>\r\n                }\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                className={classes.storeLocal}\r\n                onClick={(e) => {\r\n                  handleconfirmOpen();\r\n                  setView(\"BackUpOnly\");\r\n                }}\r\n              >\r\n                Backup the data and store in local system\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={\r\n                  <>\r\n                    <SwapVertIcon />\r\n                    <CloudOffIcon />\r\n                  </>\r\n                }\r\n                className={classes.removeCloud}\r\n                size=\"small\"\r\n                onClick={(e) => {\r\n                  handleconfirmOpen();\r\n                  setView(\"BackUpDelete\");\r\n                }}\r\n              >\r\n                Backup the data and remove in REFO Cloud\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={handleconfirmClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={confirmOpen}\r\n        width=\"md\"\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Confirmation\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleconfirmClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle2\" className={classes.center}>\r\n            {view === \"BackUpOnly\"\r\n              ? \"Are you sure want to backup the data and store in local system?\"\r\n              : view === \"BackUpDelete\"\r\n                ? \"Are you sure want to backup the data and remove in REFO cloud?\"\r\n                : \"The data has been loaded. Please click on the download button.\"}\r\n          </Typography>\r\n\r\n          <div className={classes.sendWhatsapp}>\r\n            <>\r\n              {view === \"BackUpOnly\" ? (\r\n                <>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      handleBackupOnly(\"Download\");\r\n                    }}\r\n                  >\r\n\r\n                    Yes\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    onClick={handleconfirmClose}\r\n                  >\r\n\r\n                    No\r\n                  </Button>\r\n                </>\r\n              ) : view === \"BackUpDelete\" ? (\r\n                <>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      handleBackupOnly(\"Delete\");\r\n                    }}\r\n                  >\r\n\r\n                    Yes\r\n                  </Button>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    onClick={handleconfirmClose}\r\n                  >\r\n\r\n                    No\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {backupView.view === \"Download\" ? (\r\n                <>\r\n                  <Grid className={classes.flexCenter}>\r\n                    <a\r\n                      className={classes.a + \" \" + classes.buttonBtn}\r\n                      href={`${process.env.REACT_APP_URL}` + backupView.link}\r\n                      onClick={(e) => {\r\n                        handleNotificationCall(\r\n                          \"success\",\r\n                          \"Data is downloaded Successfully\",\r\n                        );\r\n                      }}\r\n                      download\r\n                    >\r\n                      <CloudDownloadIcon /> Download\r\n                    </a>\r\n                  </Grid>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    color=\"secondary\"\r\n                    onClick={handleconfirmClose}\r\n                  >\r\n\r\n                    Close\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {backupView.view === \"Delete\" ? (\r\n                <>\r\n                  <Grid className={classes.flexCenter}>\r\n                    <a\r\n                      className={classes.a + \" \" + classes.buttonBtn}\r\n                      href={`${process.env.REACT_APP_URL}` + backupView.link}\r\n                      download\r\n                      onClick={(e) => {\r\n                        handleDeleteOpen();\r\n                      }}\r\n                    >\r\n\r\n                      <CloudDownloadIcon /> Download\r\n                    </a>\r\n                  </Grid>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    color=\"secondary\"\r\n                    onClick={handleconfirmClose}\r\n                  >\r\n\r\n                    Close\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={handleDeleteClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={deleteOpen}\r\n        width=\"md\"\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Confirmation\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleDeleteClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle2\" className={classes.center}>\r\n            Are you sure want to delete the data permanently from REFO cloud.\r\n            Please note that once deleted, the data cannot be restored?\r\n          </Typography>\r\n\r\n          <Typography\r\n            variant=\"body1\"\r\n            className={classes.center + \" \" + classes.colorRed}\r\n          >\r\n\r\n            In order to permanently delete the data, please type 'DELETE' in\r\n            capital letter. Then click on \"CONFIRM\" to proceed.\r\n          </Typography>\r\n\r\n          <Grid className={classes.center + \" \" + classes.ptb025}>\r\n            <TextField\r\n              required\r\n              name=\"delete\"\r\n              placeholder=\"DELETE\"\r\n              InputLabelProps={{ shrink: true }}\r\n              defaultValue={deleteValue}\r\n              onChange={(e) => {\r\n                setDeleteValue(e.target.value);\r\n              }}\r\n              inputRef={deleteRef}\r\n            />\r\n          </Grid>\r\n          <Grid className={classes.sendWhatsapp}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              onClick={(e) => {\r\n                handleBackupDelete();\r\n              }}\r\n            >\r\n              Confirm\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={handleDeleteClose}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={handleUploadClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={uploadOpen}\r\n        width=\"md\"\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Confirmation\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleUploadClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle2\" className={classes.center}>\r\n\r\n            Restore the data that was downloaded earlier\r\n          </Typography>\r\n\r\n          <div className={classes.root + \" \" + classes.center}>\r\n            <input\r\n              accept=\".zip,.rar,.7zip\"\r\n              className={classes.input}\r\n              id=\"icon-button-zip\"\r\n              type=\"file\"\r\n              style={{ display: \"none\" }}\r\n              onChange={(e) => {\r\n                setFile(e.target.files[0]);\r\n              }}\r\n            />\r\n            <label htmlFor=\"icon-button-zip\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<CloudUploadIcon />}\r\n                aria-label=\"upload Backup\"\r\n                component=\"span\"\r\n              >\r\n                Upload Backup\r\n              </Button>\r\n            </label>\r\n          </div>\r\n          <div className={classes.center + \" \" + classes.button}>\r\n            <Typography variant=\"inherit\" className={classes.lineBreak}>\r\n\r\n              {file?.name}\r\n            </Typography>\r\n\r\n            {file?.name ? (\r\n              <Tooltip title=\"Delete\" placement=\"bottom\">\r\n                <DeleteIcon\r\n                  color=\"secondary\"\r\n                  className={classes.closeBtn}\r\n                  onClick={(e) => {\r\n                    setFile([]);\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          <Grid className={classes.sendWhatsapp}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              onClick={(e) => {\r\n                handleUploadConfirm();\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={handleUploadClose}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={handleUploadConfirmClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={uploadConfirmOpen}\r\n        width=\"md\"\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Confirmation\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleUploadConfirmClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle2\" className={classes.center}>\r\n\r\n            Are you sure?\r\n          </Typography>\r\n\r\n          <Grid className={classes.sendWhatsapp}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              onClick={(e) => {\r\n                handleUpload();\r\n              }}\r\n            >\r\n              Yes\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={handleUploadConfirmClose}\r\n            >\r\n              No\r\n            </Button>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={handleExistingClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={existingOpen}\r\n        width=\"md\"\r\n        maxWidth=\"md\"\r\n        PaperProps={{ style: { width: \"100%\" } }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Upload existing candidates\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleExistingClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid className={classes.center}>\r\n            <a href={sample_candidates} className={classes.aLink} download>\r\n\r\n              Sample excel format to upload your data (Only then Vendor /\r\n              Freelancer can check duplicate)\r\n            </a>\r\n          </Grid>\r\n\r\n          <Grid className={classes.filterGap + \" \" + classes.center}>\r\n            <input\r\n              accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n              className={classes.input}\r\n              id=\"icon-button-csv\"\r\n              type=\"file\"\r\n              style={{ display: \"none\" }}\r\n              onChange={(e) => {\r\n                setFile(e.target.files[0]);\r\n              }}\r\n            />\r\n            <label htmlFor=\"icon-button-csv\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<CloudUploadIcon />}\r\n                aria-label=\"upload Backup\"\r\n                component=\"span\"\r\n              >\r\n                Upload Excel\r\n              </Button>\r\n            </label>\r\n          </Grid>\r\n          <Grid className={classes.center + \" \" + classes.button}>\r\n            <Typography variant=\"inherit\" className={classes.lineBreak}>\r\n\r\n              {file?.name}\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid className={classes.sendWhatsapp}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              onClick={(e) => {\r\n                handleExistingConfirm();\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={handleExistingClose}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        onClose={handleExistingConfirmClose}\r\n        aria-labelledby=\"dialog-title\"\r\n        open={existingConfirmOpen}\r\n        width=\"md\"\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Confirmation\r\n            </Typography>\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                size=\"14px\"\r\n                onClick={handleExistingConfirmClose}\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"subtitle2\" className={classes.center}>\r\n\r\n            Are you sure?\r\n          </Typography>\r\n\r\n          <Grid className={classes.sendWhatsapp}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              onClick={(e) => {\r\n                handleExistingUpload();\r\n              }}\r\n            >\r\n              Yes\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={handleExistingConfirmClose}\r\n            >\r\n              No\r\n            </Button>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        aria-labelledby=\"dialog-title\"\r\n        width=\"md\"\r\n        open={invitationOpen}\r\n        onClose={handleInvitationClose}\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Invite MSME\r\n            </Typography>\r\n\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                onClick={handleInvitationClose}\r\n                size=\"14px\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n\r\n        <DialogContent className={classes.chatListBackGround}>\r\n          <form onSubmit={inviteSubmit(inviteMSME)}>\r\n            <Grid item xs={12}>\r\n              <InputLabel shrink htmlFor=\"email\">\r\n                Enter Email\r\n              </InputLabel>\r\n              <FormControl className={classes.margin}>\r\n                <TextField\r\n                  classes={{ root: classes.customTextField }}\r\n                  InputProps={{ disableUnderline: true }}\r\n                  size=\"small\"\r\n                  placeholder=\"Enter Email ID\"\r\n                  id=\"email\"\r\n                  {...invite(\"email\")}\r\n                  name=\"email\"\r\n                  error={inviteErrors.email ? true : false}\r\n                />\r\n\r\n                <Typography variant=\"inherit\" color=\"error\">\r\n                  {inviteErrors.email?.message}\r\n                </Typography>\r\n              </FormControl>\r\n            </Grid>\r\n            <div className={classes.sendWhatsapp}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                type=\"submit\"\r\n                disabled={inviteIsSubmitting}\r\n              >\r\n                Invite\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                startIcon={<FileCopyIcon />}\r\n                onClick={(e) => {\r\n                  handleCopy();\r\n                }}\r\n              >\r\n                Copy URL\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                onClick={handleInvitationClose}\r\n              >\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        aria-labelledby=\"dialog-title\"\r\n        width=\"md\"\r\n        open={isShareCV}\r\n        onClose={handleShareCVClose}\r\n        PaperProps={{\r\n          style: {\r\n            width: \"100%\",\r\n          },\r\n        }}\r\n      >\r\n        <DialogTitle className={classes.digTitle}>\r\n          <div className={classes.center}>\r\n            <Typography\r\n              variant=\"subtitle2\"\r\n              className={classes.digColor + \" \" + classes.digCenter}\r\n            >\r\n              Share & CV Shortlist\r\n            </Typography>\r\n\r\n            <div className={classes.drawerClose}>\r\n              <CloseIcon\r\n                className={classes.digClose}\r\n                onClick={handleShareCVClose}\r\n                size=\"14px\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </DialogTitle>\r\n\r\n        <DialogContent className={classes.chatListBackGround}>\r\n          <form onSubmit={shareCVSubmit(shareCVShortList)}>\r\n            <div className={classes.shareCVContainer}>\r\n              <Grid item xs={12} spacing={2}>\r\n                <FormControl className={classes.margin}>\r\n                  <InputLabel shrink htmlFor=\"requirementId\">\r\n\r\n                    Requirement Name\r\n                  </InputLabel>\r\n                  <Autocomplete\r\n                    // className={classes.AutocompleteFullWidth}\r\n                    options={requirementName}\r\n                    name=\"requirementId\"\r\n                    disableClearable\r\n                    error={shareCVErrors.requirementId ? true : false}\r\n                    {...shareCV(\"requirementId\")}\r\n                    getOptionLabel={(option) =>\r\n                      option.requirementName + \" (\" + option.uniqueId + \")\"\r\n                    }\r\n                    onChange={(event, value) => {\r\n                      setRequirementId(value);\r\n                      getLink(value.id);\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        name=\"requirementId\"\r\n                        variant=\"filled\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Typography variant=\"inherit\" color=\"error\">\r\n                    {shareCVErrors.requirementId?.message}\r\n                  </Typography>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <InputLabel shrink htmlFor=\"email\">\r\n                  Enter Email\r\n                </InputLabel>\r\n                <FormControl className={classes.margin}>\r\n                  <TextField\r\n                    classes={{ root: classes.customTextField }}\r\n                    InputProps={{ disableUnderline: true }}\r\n                    size=\"small\"\r\n                    placeholder=\"Enter Email ID\"\r\n                    id=\"email\"\r\n                    {...shareCV(\"email\")}\r\n                    name=\"email\"\r\n                    error={shareCVErrors.email ? true : false}\r\n                  />\r\n\r\n                  <Typography variant=\"inherit\" color=\"error\">\r\n                    {shareCVErrors.email?.message}\r\n                  </Typography>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <InputLabel shrink htmlFor=\"mobile\">\r\n                  Mobile\r\n                </InputLabel>\r\n                <FormControl className={classes.margin}>\r\n                  <TextField\r\n                    InputProps={{ disableUnderline: true }}\r\n                    classes={{ root: classes.customTextField }}\r\n                    size=\"small\"\r\n                    placeholder=\"Enter Mobile\"\r\n                    id=\"mobile\"\r\n                    name=\"mobile\"\r\n                    {...shareCV(\"mobile\")}\r\n                    error={shareCVErrors.mobile ? true : false}\r\n                  />\r\n\r\n                  <Typography variant=\"inherit\" color=\"error\">\r\n                    {shareCVErrors.mobile?.message}\r\n                  </Typography>\r\n                </FormControl>\r\n              </Grid>\r\n            </div>\r\n            <div className={classes.sendWhatsapp}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                type=\"submit\"\r\n                disabled={shareCVIsSubmitting}\r\n              >\r\n                Share\r\n              </Button>\r\n\r\n              {cvLink !== \"\" ? (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  startIcon={<FileCopyIcon />}\r\n                  onClick={(e) => {\r\n                    handleCvLinkCopy(cvLink);\r\n                  }}\r\n                >\r\n                  Copy URL\r\n                </Button>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                onClick={handleShareCVClose}\r\n              >\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\PageTitle\\PageTitle.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\SearchLayout.js",["778"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { Grid, Button, TablePagination, Backdrop, CircularProgress, Avatar, SwipeableDrawer } from \"@material-ui/core\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport moment from \"moment\";\r\nimport { TagsInput } from \"react-tag-input-component\";\r\nimport axios from \"axios\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"react-toastify\";\r\nimport Notification from \"../../components/Notification\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Add from \"../../components/Candidates/Add\";\r\nimport View from \"../../components/Candidates/View\";\r\nimport Status from \"../../components/Admin/SearchStatus\";\r\nimport Bar from \"../../components/Candidates/Bar\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport ExpandButton from \"../../components/Candidates/ExpandButton\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport external from \"../../images/external.png\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst positions = [toast.POSITION.TOP_RIGHT];\r\n\r\nexport default function Search(props) {\r\n  var classes = useStyles();\r\n  const messageRef = useRef();\r\n  const mobileQuery = useMediaQuery('(max-width:600px)');\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  const filterRef = useRef(null);\r\n  const [count, setCount] = useState(0);\r\n  const [loader, setLoader] = useState(false);\r\n  const [candidatesData, setCandidatesData] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [currerntPage, setCurrerntPage] = useState(1);\r\n  const [rowsPerPage] = useState(50);\r\n  const [validation, setValidation] = useState(false);\r\n  const [recruitmentId, setRecruitmentId] = useState(\"\");\r\n  const [state, setState] = useState({\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n  const [source, setSource] = useState([]);\r\n  const [file, setFile] = useState([]);\r\n  const [assessment, setAssessment] = useState([]);\r\n\r\n  const [addList, setAddList] = useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [requirement, setRequirement] = useState([]);\r\n  const [setDay] = useState(\"\");\r\n  const [setMonth] = useState(\"\");\r\n  const [setYear] = useState(\"\");\r\n  const [dataList, setDataList] = useState(\"ADD\");\r\n\r\n  const months = [\r\n    \"01\",\r\n    \"02\",\r\n    \"03\",\r\n    \"04\",\r\n    \"05\",\r\n    \"06\",\r\n    \"07\",\r\n    \"08\",\r\n    \"09\",\r\n    \"10\",\r\n    \"11\",\r\n    \"12\",\r\n  ];\r\n  const days = Array.from({ length: 31 }, (_, i) => i + 1);\r\n  const years = Array.from({ length: 60 }, (_, i) => moment(new Date()).format(\"YYYY\") - i);\r\n  const [recruitmentList, setRecruitmentList] = useState([]);\r\n\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n\r\n  const [skillSearch, setSkillSearch] = useState([]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const [requirementList, setRequirementList] = useState({\r\n    cand1_name: \"\",\r\n    job1_location: \"\",\r\n    client1_name: \"\",\r\n    job1_title: \"\",\r\n    cand1_skills: \"\",\r\n    job1_experience: \"\",\r\n    rec_name: \"\",\r\n    rec_mobile_no: \"\",\r\n    req_id: \"\",\r\n  });\r\n\r\n\r\n\r\n  const [candidate, setCandidate] = useState({\r\n    requirementId: \"\",\r\n    source: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    candidateProcessed: \"\",\r\n    native: \"\",\r\n    preferredLocation: \"\",\r\n    relevantExperience: null,\r\n    educationalQualification: \"\",\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    dob: \"\",\r\n    freeValue: decode.isEnableFree === true ? \"YES\" : decode.isEnablePaid === true ? \"NO\" : \"YES\",\r\n\r\n  });\r\n\r\n  const [listCanditate, setListCanditate] = useState([]);\r\n\r\n  const [candidateView, setCandidateView] = useState({\r\n    id: \"\",\r\n    chatId: \"\",\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    mobile: \"\",\r\n    skills: \"\",\r\n    location: \"\",\r\n    experience: null,\r\n    resume: \"\",\r\n    clientName: \"\",\r\n    requirementName: \"\",\r\n    statusCode: \"\",\r\n    source: \"\",\r\n    requiremenUniqueId: \"\",\r\n    candidateUniqueId: \"\",\r\n\r\n    gender: \"\",\r\n    differentlyAbled: \"\",\r\n    candidateProcessed: \"\",\r\n    currentLocation: \"\",\r\n    preferredLocation: \"\",\r\n    nativeLocation: \"\",\r\n    relevantExperience: null,\r\n    currentCtc: null,\r\n    expectedCtc: null,\r\n    dob: \"\",\r\n    noticePeriod: \"\",\r\n    reasonForJobChange: \"\",\r\n    reason: \"\",\r\n    educationalQualification: \"\",\r\n    alternateMobile: \"\",\r\n    candidateRecruiterDiscussionRecording: \"\",\r\n    candidateSkillExplanationRecording: \"\",\r\n    candidateMindsetAssessmentLink: \"\",\r\n    candidateAndTechPannelDiscussionRecording: \"\",\r\n    mainId: \"\",\r\n    isCandidateCpv: \"\",\r\n    currentCompanyName: \"\",\r\n  });\r\n\r\n\r\n\r\n  var [errorToastId, setErrorToastId] = useState(null);\r\n\r\n  function sendNotification(componentProps, options) {\r\n    return toast(\r\n      <Notification\r\n        {...componentProps}\r\n        className={classes.notificationComponent}\r\n      />,\r\n      options,\r\n    );\r\n  }\r\n\r\n  function handleNotificationCall(notificationType, message) {\r\n    var componentProps;\r\n\r\n    if (errorToastId && notificationType === \"error\") return;\r\n\r\n    switch (notificationType) {\r\n      case \"info\":\r\n        componentProps = {\r\n          type: \"feedback\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"primary\",\r\n        };\r\n        break;\r\n      case \"error\":\r\n        componentProps = {\r\n          type: \"message\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"secondary\",\r\n        };\r\n        break;\r\n      default:\r\n        componentProps = {\r\n          type: \"shipped\",\r\n          message: message,\r\n          variant: \"contained\",\r\n          color: \"success\",\r\n        };\r\n    }\r\n\r\n    var toastId = sendNotification(componentProps, {\r\n      type: notificationType,\r\n      position: positions[2],\r\n      progressClassName: classes.progress,\r\n      onClose: notificationType === \"error\" && (() => setErrorToastId(null)),\r\n      className: classes.notification,\r\n    });\r\n\r\n    if (notificationType === \"error\") setErrorToastId(toastId);\r\n  }\r\n\r\n\r\n  const [phoneValidation, setPhoneValidation] = useState(false);\r\n\r\n\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email(\"Email must be a Valid Email Address\").required('Email is required'),\r\n    firstName: Yup.string().required('First Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"First Name be Alphanumeric\",\r\n      }),\r\n    lastName: Yup.string().max(255).required('Last Name is required')\r\n      .max(255)\r\n      .matches(/^[^!@#$%^&*+=<>:;|~]*$/, {\r\n        message: \"Last Name be Alphanumeric\",\r\n      }),\r\n    mobile: Yup.string().required('Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\"),\r\n    requirementId: Yup.string().required(\"Requirement Name is required\"),\r\n    skills: Yup.string().required('Skill is required'),\r\n    source: decode.role === \"FREELANCER\" || decode.role === \"SUBVENDOR\" ? Yup.string() : Yup.string().required(\"Source is required\"),\r\n    free: Yup.string().nullable().notRequired(),\r\n    experience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    location: Yup.string().nullable().notRequired(),\r\n    alternateMobile: phoneValidation === true ? Yup.string().required('Alternate Contact Number is required').min(10, \"Must be exactly 10 digits\").max(10, \"Must be exactly 10 digits\") : Yup.string(),\r\n    day: Yup.string().nullable().notRequired(),\r\n    month: Yup.string().nullable().notRequired(),\r\n    year: Yup.string().nullable().notRequired(),\r\n    gender: Yup.string().nullable().required('Gender is required'),\r\n    educationalQualification: Yup.string().nullable().notRequired(),\r\n    differentlyAbled: Yup.string().nullable().notRequired(),\r\n    currentCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    expectedCtc: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    noticePeriod: Yup.string().nullable().notRequired(),\r\n    reasonForJobChange: Yup.string().nullable().notRequired(),\r\n    candidateProcessed: Yup.string().nullable().notRequired(),\r\n    reason: Yup.string().nullable().notRequired(),\r\n    native: Yup.string().nullable().notRequired(),\r\n    preferredLocation: Yup.string().nullable().notRequired(),\r\n    relevantExperience: Yup.number().nullable(true).transform((_, val) => val ? Number(val) : null),\r\n    currentCompanyName: Yup.string().nullable().notRequired(),\r\n  });\r\n\r\n\r\n\r\n\r\n  const {\r\n    register,\r\n    reset,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  });\r\n\r\n\r\n  function handleUse(id) {\r\n\r\n    setCandidate({\r\n      ...candidate,\r\n      requirementId: \"\",\r\n      source: \"\",\r\n      email: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      skills: \"\",\r\n      location: \"\",\r\n      experience: null,\r\n      gender: \"\",\r\n      differentlyAbled: \"\",\r\n      candidateProcessed: \"\",\r\n      native: \"\",\r\n      preferredLocation: \"\",\r\n      relevantExperience: null,\r\n      educationalQualification: \"\",\r\n      currentCtc: null,\r\n      expectedCtc: null,\r\n      noticePeriod: \"\",\r\n      reasonForJobChange: \"\",\r\n      reason: \"\",\r\n      dob: \"\",\r\n      candidateRecruiterDiscussionRecording: \"\",\r\n      candidateSkillExplanationRecording: \"\",\r\n      candidateMindsetAssessmentLink: \"\",\r\n      candidateAndTechPannelDiscussionRecording: \"\",\r\n      freeValue: decode.isEnableFree === true ? \"YES\" : decode.isEnablePaid === true ? \"NO\" : \"YES\",\r\n\r\n    });\r\n\r\n    setPhoneValidation(false);\r\n    setRecruitmentId(\"\");\r\n    setState({ ...state, right: true });\r\n    setValidation(false);\r\n    setFile([]);\r\n    setAssessment([]);\r\n    setDataList(\"ADD\");\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidateDetailExistUrl,\r\n      data: {\r\n        id: id\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n\r\n        reset({\r\n          requirementId: recruitmentId,\r\n          mobile: response.data.data?.mobile.substring(2),\r\n          email: response.data.data?.email,\r\n          firstName: response.data.data?.firstName,\r\n          lastName: response.data.data?.lastName,\r\n          skills: response.data.data?.skills,\r\n          experience: response.data.data?.experience,\r\n          location: response.data.data?.currentLocation,\r\n          candidateProcessed: response.data.data?.candidateProcessed,\r\n          native: response.data.data?.nativeLocation,\r\n          preferredLocation: response.data.data?.preferredLocation,\r\n          relevantExperience: response.data.data?.relevantExperience,\r\n          educationalQualification: response.data.data?.educationalQualification,\r\n          gender: response.data.data?.gender,\r\n          differentlyAbled: response.data.data?.differentlyAbled,\r\n          currentCtc: response.data.data?.currentCtc,\r\n          expectedCtc: response.data.data?.expectedCtc,\r\n          noticePeriod: response.data.data?.noticePeriod,\r\n          reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          reason: response.data.data?.reason,\r\n          currentCompanyName: response.data.data?.currentCompanyName,\r\n        })\r\n\r\n        setCandidate({\r\n          ...candidate,\r\n          mobile: response.data.data?.mobile.substring(2),\r\n          email: response.data.data?.email,\r\n          firstName: response.data.data?.firstName,\r\n          lastName: response.data.data?.lastName,\r\n          skills: response.data.data?.skills,\r\n          experience: response.data.data?.experience,\r\n          location: response.data.data?.currentLocation,\r\n          dob: response.data.data?.dob,\r\n          candidateProcessed: response.data.data?.candidateProcessed,\r\n          native: response.data.data?.nativeLocation,\r\n          preferredLocation: response.data.data?.preferredLocation,\r\n          relevantExperience: response.data.data?.relevantExperience,\r\n          educationalQualification: response.data.data?.educationalQualification,\r\n          gender: response.data.data?.gender,\r\n          differentlyAbled: response.data.data?.differentlyAbled,\r\n          currentCtc: response.data.data?.currentCtc,\r\n          expectedCtc: response.data.data?.expectedCtc,\r\n          noticePeriod: response.data.data?.noticePeriod,\r\n          reasonForJobChange: response.data.data?.reasonForJobChange,\r\n          reason: response.data.data?.reason,\r\n          currentCompanyName: response.data.data?.currentCompanyName,\r\n          freeValue: decode.isEnableFree === true ? \"YES\" : decode.isEnablePaid === true ? \"NO\" : \"YES\",\r\n        });\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.RequirementListUrl,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setRequirement(response.data.data);\r\n      }\r\n    });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.SourcesListUrl,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setSource(response.data.data);\r\n      }\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps \r\n  }, [token]);\r\n\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setCurrerntPage(newPage + 1);\r\n    setLoader(true);\r\n    var data = JSON.stringify({\r\n      page: newPage + 1,\r\n      skills: skillSearch.join(\", \")\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidateSearchUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        setCandidatesData(response.data.data);\r\n        setCount(response.data.count);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  };\r\n\r\n  function getFilterData() {\r\n    setLoader(true);\r\n    setCurrerntPage(1);\r\n    setPage(0);\r\n\r\n    var data = JSON.stringify({\r\n      page: 1,\r\n      skills: skillSearch.join(\", \")\r\n    });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidateSearchUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n\r\n        if (response.data.status === true) {\r\n          setLoader(false);\r\n          setCandidatesData(response.data.data);\r\n          setCount(response.data.count);\r\n        }\r\n      })\r\n\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n\r\n  function handleShow(values, name) {\r\n    setLoader(true);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidateViewUrl,\r\n      data: {\r\n        id: values,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        if (response.data.status === true) {\r\n\r\n          setCandidateView({\r\n            ...candidateView,\r\n            id: response.data.data.id,\r\n            chatId: response.data.chatUser?.id,\r\n            email: response.data.data.candidateDetail?.email,\r\n            mobile: response.data.data.candidateDetail?.mobile,\r\n            cc: response.data.data.requirement?.recruiter?.firstName + \" \" + response.data.data.requirement?.recruiter?.lastName,\r\n            firstName: response.data.data.candidateDetail?.firstName,\r\n            lastName: response.data.data.candidateDetail?.lastName,\r\n            skills: response.data.data.candidateDetail?.skills,\r\n            clientName: response.data.data.requirement?.client?.clientName,\r\n            requirementName: response.data.data.requirement?.requirementName,\r\n            statusCode: response.data.data.statusList?.statusCode,\r\n            source: response.data.data.source?.name,\r\n            invoiceValue: response.data.data.invoiceValue,\r\n            requiremenUniqueId: response.data.data.requirement?.uniqueId,\r\n            candidateUniqueId: response.data.data.uniqueId,\r\n            isAnswered: response.data.data.isAnswered,\r\n            currentLocation: response.data.data.candidateDetail?.currentLocation,\r\n            preferredLocation: response.data.data.candidateDetail?.preferredLocation,\r\n            nativeLocation: response.data.data.candidateDetail?.nativeLocation,\r\n            experience: response.data.data.candidateDetail?.experience,\r\n            relevantExperience: response.data.data.candidateDetail?.relevantExperience,\r\n            currentCtc: response.data.data.candidateDetail?.currentCtc,\r\n            expectedCtc: response.data.data.candidateDetail?.expectedCtc,\r\n            dob: response.data.data.candidateDetail?.dob,\r\n            noticePeriod: response.data.data.candidateDetail?.noticePeriod,\r\n            reasonForJobChange: response.data.data.candidateDetail?.reasonForJobChange,\r\n            reason: response.data.data.candidateDetail?.reason,\r\n            candidateProcessed: response.data.data.candidateDetail?.candidateProcessed,\r\n            differentlyAbled: response.data.data.candidateDetail?.differentlyAbled,\r\n            educationalQualification: response.data.data.candidateDetail?.educationalQualification,\r\n            gender: response.data.data.candidateDetail?.gender,\r\n            alternateMobile: response.data.data.candidateDetail?.alternateMobile,\r\n            resume: response.data.data.candidateDetail?.resume,\r\n            candidateRecruiterDiscussionRecording: response.data.data.candidateRecruiterDiscussionRecording,\r\n            candidateSkillExplanationRecording: response.data.data.candidateSkillExplanationRecording,\r\n            candidateMindsetAssessmentLink: response.data.data.candidateMindsetAssessmentLink,\r\n            candidateAndTechPannelDiscussionRecording: response.data.data.candidateAndTechPannelDiscussionRecording,\r\n            mainId: response.data.data.mainId,\r\n            isCandidateCpv: response.data.data.isCandidateCpv,\r\n            currentCompanyName: response.data.data.candidateDetail?.currentCompanyName,\r\n          });\r\n          setDataList(\"VIEW\");\r\n          setState({ ...state, right: true });\r\n\r\n          setLoader(false);\r\n        } else {\r\n          setLoader(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: props.AllCandidateStatus,\r\n      data: {\r\n        id: values,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n\r\n        if (response.data.status === true) {\r\n\r\n          setListCanditate(response.data.data);\r\n\r\n\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  function handleAdd(values) {\r\n\r\n    if (decode.role !== \"FREELANCER\" && decode.role !== \"SUBVENDOR\") {\r\n\r\n      return new Promise((resolve) => {\r\n        if (validation === true) {\r\n\r\n\r\n        } else {\r\n          setAddList(values);\r\n\r\n\r\n          axios({\r\n            method: \"post\",\r\n            url: props.RequirementUrl,\r\n            data: {\r\n              id: recruitmentId,\r\n            },\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n          }).then(function (response) {\r\n            if (response.data.status === true) {\r\n\r\n              setRequirementList({\r\n                ...requirementList,\r\n                cand1_name: values.firstName + \" \" + values.lastName,\r\n                job1_location: response.data.data.jobLocation,\r\n                client1_name: response.data.data.client?.clientName,\r\n                job1_title: response.data.data.requirementName,\r\n                cand1_skills: values.skills,\r\n                job1_experience: response.data.data.experience,\r\n                rec_name: localStorage.getItem('firstName'),\r\n                rec_mobile_no: localStorage.getItem('mobile'),\r\n                req_id: response.data.data.uniqueId,\r\n              });\r\n\r\n              CheckAlreadyExit(values);\r\n            }\r\n            resolve();\r\n          });\r\n        }\r\n      });\r\n\r\n\r\n    } else {\r\n\r\n      setLoader(true);\r\n\r\n      return new Promise((resolve) => {\r\n        if (validation === true) {\r\n        } else {\r\n\r\n          axios({\r\n            method: \"post\",\r\n            url: `${process.env.REACT_APP_SERVER}recruiter/getRequirement`,\r\n            data: {\r\n              id: recruitmentId,\r\n            },\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: token,\r\n            },\r\n          }).then(function (response) {\r\n            if (response.data.status === true) {\r\n\r\n              setRequirementList({\r\n                ...requirementList,\r\n                cand1_name: values.firstName + \" \" + values.lastName,\r\n                job1_location: response.data.data.jobLocation,\r\n                client1_name: response.data.data.client?.clientName,\r\n                job1_title: response.data.data.requirementName,\r\n                cand1_skills: values.skills,\r\n                job1_experience: response.data.data.experience,\r\n                rec_name: localStorage.getItem('firstName'),\r\n                rec_mobile_no: localStorage.getItem('mobile'),\r\n                req_id: response.data.data.uniqueId,\r\n              });\r\n\r\n              CheckAlreadyExit(values);\r\n\r\n\r\n            }\r\n            resolve();\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  function CheckAlreadyExit(values) {\r\n    var dob = values.day + \"-\" + values.month + \"-\" + values.year;\r\n\r\n\r\n    if (decode.role !== \"FREELANCER\" && decode.role !== \"SUBVENDOR\") {\r\n\r\n\r\n      axios({\r\n        method: \"post\",\r\n        url: props.CandidateExistUrl,\r\n        data: {\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          requirementId: recruitmentId,\r\n          skills: values.skills,\r\n          sourceId: values.source,\r\n          isAnswered: values.freeValue,\r\n          message: \"\",\r\n          experience: values.experience,\r\n          currentLocation: values.location,\r\n          alternateMobile: values.alternateMobile,\r\n          preferredLocation: values.preferredLocation,\r\n          nativeLocation: values.native,\r\n          relevantExperience: values.relevantExperience,\r\n          currentCtc: values.currentCtc,\r\n          expectedCtc: values.expectedCtc,\r\n          dob: values.day === undefined ? dob : dob !== \"--\" ? dob : dob,\r\n          noticePeriod: values.noticePeriod,\r\n          reasonForJobChange: values.reasonForJobChange,\r\n          candidateProcessed: values.candidateProcessed,\r\n          differentlyAbled: values.differentlyAbled,\r\n          educationalQualification: values.educationalQualification,\r\n          gender: values.gender,\r\n          reason: values.reason,\r\n          candidateRecruiterDiscussionRecording: values.candidateRecruiterDiscussionRecording,\r\n          candidateSkillExplanationRecording: values.candidateSkillExplanationRecording,\r\n          candidateMindsetAssessmentLink: values.candidateMindsetAssessmentLink,\r\n          candidateAndTechPannelDiscussionRecording: values.candidateAndTechPannelDiscussionRecording,\r\n          sendMessage: \"\"\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n\r\n        if (response.data.status === true) {\r\n\r\n          handleClickOpen();\r\n\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n\r\n        }\r\n\r\n      });\r\n\r\n    } else {\r\n\r\n\r\n      setLoader(true);\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/candidateExist`,\r\n        data: {\r\n          email: values.email,\r\n          firstName: values.firstName,\r\n          lastName: values.lastName,\r\n          mobile: values.mobile,\r\n          requirementId: recruitmentId,\r\n          skills: values.skills,\r\n          sourceId: values.source,\r\n          isAnswered: candidate.freeValue,\r\n          message: \"\",\r\n          experience: values.experience,\r\n          currentLocation: values.location,\r\n          alternateMobile: values.alternateMobile,\r\n          preferredLocation: values.preferredLocation,\r\n          nativeLocation: values.native,\r\n          relevantExperience: values.relevantExperience,\r\n          currentCtc: values.currentCtc,\r\n          expectedCtc: values.expectedCtc,\r\n          dob: values.day === undefined ? dob : dob !== \"--\" ? dob : dob,\r\n          noticePeriod: values.noticePeriod,\r\n          reasonForJobChange: values.reasonForJobChange,\r\n          candidateProcessed: values.candidateProcessed,\r\n          differentlyAbled: values.differentlyAbled,\r\n          educationalQualification: values.educationalQualification,\r\n          gender: values.gender,\r\n          reason: values.reason,\r\n          sendMessage: \"\"\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n\r\n        if (response.data.status === true) {\r\n\r\n\r\n          handleAddLists(false, values);\r\n\r\n        } else {\r\n          handleNotificationCall(\"error\", response.data.message);\r\n\r\n        }\r\n        setLoader(false);\r\n      });\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  function handleAddList(send) {\r\n\r\n\r\n\r\n    setLoader(true);\r\n    var url = \"\";\r\n    var data = {};\r\n    var dob = addList.day + \"-\" + addList.month + \"-\" + addList.year;\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = props.FreeCandidateUrl;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        message: messageRef.current.value,\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob: addList.day === undefined ? \"\" : dob !== \"--\" ? addList.day + \"-\" + addList.month + \"-\" + addList.year : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        sendMessage: send,\r\n        candidateRecruiterDiscussionRecording: addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording: addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording: addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n      }\r\n    } else {\r\n      url = props.CandidateUrl;\r\n      data = {\r\n        email: addList.email,\r\n        firstName: addList.firstName,\r\n        lastName: addList.lastName,\r\n        mobile: addList.mobile,\r\n        requirementId: recruitmentId,\r\n        skills: addList.skills,\r\n        sourceId: addList.source,\r\n        isAnswered: candidate.freeValue,\r\n        experience: addList.experience,\r\n        currentLocation: addList.location,\r\n        alternateMobile: addList.alternateMobile,\r\n        preferredLocation: addList.preferredLocation,\r\n        nativeLocation: addList.native,\r\n        relevantExperience: addList.relevantExperience,\r\n        currentCtc: addList.currentCtc,\r\n        expectedCtc: addList.expectedCtc,\r\n        dob: addList.day === undefined ? \"\" : dob !== \"--\" ? addList.day + \"-\" + addList.month + \"-\" + addList.year : \"\",\r\n        noticePeriod: addList.noticePeriod,\r\n        reasonForJobChange: addList.reasonForJobChange,\r\n        candidateProcessed: addList.candidateProcessed,\r\n        differentlyAbled: addList.differentlyAbled,\r\n        educationalQualification: addList.educationalQualification,\r\n        gender: addList.gender,\r\n        reason: addList.reason,\r\n        sendMessage: send,\r\n        candidateRecruiterDiscussionRecording: addList.candidateRecruiterDiscussionRecording,\r\n        candidateSkillExplanationRecording: addList.candidateSkillExplanationRecording,\r\n        candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n        candidateAndTechPannelDiscussionRecording: addList.candidateAndTechPannelDiscussionRecording,\r\n        currentCompanyName: addList.currentCompanyName,\r\n      }\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n\r\n      if (response.data.status === true) {\r\n        handleClose();\r\n\r\n        var message = \"\";\r\n\r\n        if (file !== undefined) {\r\n          if (file?.length !== 0) {\r\n            uploadResume(file, response.data.candidateDetailsId);\r\n          }\r\n        }\r\n\r\n        if (assessment !== undefined) {\r\n          if (assessment?.length !== 0) {\r\n            uploadAssessment(assessment, response.data.candidateId);\r\n          }\r\n        }\r\n\r\n        if (send === true) {\r\n          if (candidate.freeValue === \"YES\") {\r\n            message = messageRef.current.value;\r\n\r\n            window.open(\r\n              \"https://api.whatsapp.com/send?phone=+91\" +\r\n              addList.mobile +\r\n              \"&text=\" +\r\n              message +\r\n              \"\",\r\n            );\r\n          } else {\r\n            message = \"Hi \" + requirementList.cand1_name + \", Can we chat today about a job opening \" + localStorage.getItem('firstName') +\r\n              \", \" + localStorage.getItem('mobile') + \", \" + localStorage.getItem('companyName') + \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n            handleMessage(\r\n              response.data.candidate_mobile,\r\n              message,\r\n              response.data.candidateId,\r\n            );\r\n          }\r\n        }\r\n\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n        setState({ ...state, right: false });\r\n        reset();\r\n\r\n\r\n      } else {\r\n\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  function handleAddLists(send, addList) {\r\n    setLoader(true);\r\n\r\n    var dob = addList.day + \"-\" + addList.month + \"-\" + addList.year;\r\n    var message = \"Hi \" + requirementList.cand1_name + \", Can we chat today about a job opening \" + localStorage.getItem('firstName') +\r\n      \", \" + localStorage.getItem('mobile') + \", \" + localStorage.getItem('companyName') + \". Always reply by clicking back arrow button/right swipe only.\";\r\n\r\n    var data = {\r\n      email: addList.email,\r\n      firstName: addList.firstName,\r\n      lastName: addList.lastName,\r\n      mobile: addList.mobile,\r\n      requirementId: recruitmentId,\r\n      skills: addList.skills,\r\n      sourceId: addList.source,\r\n      isAnswered: candidate.freeValue,\r\n      message: message,\r\n      experience: addList.experience,\r\n      currentLocation: addList.location,\r\n      alternateMobile: addList.alternateMobile,\r\n      preferredLocation: addList.preferredLocation,\r\n      nativeLocation: addList.native,\r\n      relevantExperience: addList.relevantExperience,\r\n      currentCtc: addList.currentCtc,\r\n      expectedCtc: addList.expectedCtc,\r\n      dob: addList.day === undefined ? \"\" : dob !== \"--\" ? addList.day + \"-\" + addList.month + \"-\" + addList.year : \"\",\r\n      noticePeriod: addList.noticePeriod,\r\n      reasonForJobChange: addList.reasonForJobChange,\r\n      candidateProcessed: addList.candidateProcessed,\r\n      differentlyAbled: addList.differentlyAbled,\r\n      educationalQualification: addList.educationalQualification,\r\n      gender: addList.gender,\r\n      reason: addList.reason,\r\n      sendMessage: send,\r\n      candidateRecruiterDiscussionRecording: addList.candidateRecruiterDiscussionRecording,\r\n      candidateSkillExplanationRecording: addList.candidateSkillExplanationRecording,\r\n      candidateMindsetAssessmentLink: addList.candidateMindsetAssessmentLink,\r\n      candidateAndTechPannelDiscussionRecording: addList.candidateAndTechPannelDiscussionRecording,\r\n\r\n    }\r\n\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/addFreeCandidate`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n\r\n      if (response.data.status === true) {\r\n        handleClose();\r\n\r\n\r\n        if (file !== undefined) {\r\n          if (file?.length !== 0) {\r\n            uploadResume(file, response.data.candidateDetailsId);\r\n          }\r\n        }\r\n\r\n        if (assessment !== undefined) {\r\n          if (assessment?.length !== 0) {\r\n            uploadAssessment(assessment, response.data.candidateId);\r\n          }\r\n        }\r\n\r\n        handleNotificationCall(\"success\", response.data.message);\r\n\r\n\r\n        setState({ ...state, right: false });\r\n        reset();\r\n      } else {\r\n\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setValidation(false);\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function aiResumeUpload(resumeData) {\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}AI/resumeUpload`,\r\n      data: resumeData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n      if (response.data.status === true) {\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  function uploadResume(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"resume\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: props.CandidateResumeUrl,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n      if (response.data.status === true) {\r\n        // aiResumeUpload(data)\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function uploadAssessment(File, Id) {\r\n    var FormData = require(\"form-data\");\r\n    var data = new FormData();\r\n    data.append(\"file\", File);\r\n    data.append(\"id\", Id);\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/updateCandidateMindSetAssessment`,\r\n      data: data,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n\r\n      if (response.data.status === true) {\r\n\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleMessage(mobile, message, candidateId) {\r\n    var url = \"\";\r\n\r\n    if (candidate.freeValue === \"YES\") {\r\n      url = props.YesCadidateStatusUrl;\r\n    } else {\r\n      url = props.TemplateMessageUrl;\r\n    }\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: url,\r\n      data: {\r\n        candidateId: candidateId,\r\n        phone_number: mobile,\r\n        template_name: \"first_message\",\r\n        vars: [\r\n          requirementList.cand1_name,\r\n          requirementList.rec_name,\r\n          requirementList.rec_mobile_no,\r\n          localStorage.getItem('companyName'),\r\n        ],\r\n        message: message,\r\n        candidate_name: requirementList.cand1_name,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        if (response.data.isNew === true) {\r\n          getmessageIni();\r\n        }\r\n\r\n        setLoader(false);\r\n      } else {\r\n        handleNotificationCall(\"error\", response.data.message);\r\n      }\r\n\r\n      setLoader(false);\r\n    });\r\n  }\r\n\r\n  function getmessageIni() {\r\n    axios({\r\n      method: \"post\",\r\n      url: props.MyWalletUrl,\r\n      data: {},\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        localStorage.setItem(\r\n          \"WalletValue\",\r\n          response.data.data.remainingMessages,\r\n          { sameSite: \"strict\", secure: true },\r\n        );\r\n        window.dispatchEvent(new Event(\"storage\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  const handle = (e) => {\r\n    const value = [];\r\n    e.map((name) => (name !== \" \" ? value.push(name) : \"\"));\r\n    setSkillSearch(value);\r\n  };\r\n\r\n  const resetForm = (e) => {\r\n    filterRef.current.reset();\r\n    setSkillSearch([]);\r\n    setCandidatesData([]);\r\n  };\r\n\r\n\r\n  const components = {\r\n    ExpandButton: function (props) {\r\n      return <ExpandButton {...props} />;\r\n    },\r\n  };\r\n\r\n  const HeaderElements = () => (\r\n    <>\r\n      <Grid className={classes.HeaderElements}>\r\n\r\n        Total : {count}\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  const table_options = {\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Oops! Matching record could not be found',\r\n      }\r\n    },\r\n    search: false,\r\n    pagination: false,\r\n    sort: false,\r\n    selectableRows: \"none\",\r\n    filter: false,\r\n    print: false,\r\n    download: false,\r\n    customToolbar: () => <HeaderElements />,\r\n    onFilterChange: (changedColumn, filterList) => { },\r\n    filterType: \"dropdown\",\r\n    rowsPerPage: 50,\r\n    // rowsExpanded: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    expandableRows: true,\r\n    expandableRowsHeader: false,\r\n    expandableRowsOnClick: true,\r\n    responsive: mobileQuery === true ? 'vertical' : 'standard',\r\n    renderExpandableRow: (rowData, rowMeta) => {\r\n      const list = candidatesData[rowMeta.rowIndex];\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <tr>\r\n            <td colSpan={16}>\r\n              <Bar\r\n                title=\"Candidates\"\r\n                list={list}\r\n\r\n              />\r\n            </td>\r\n          </tr>\r\n        </React.Fragment>\r\n      );\r\n    },\r\n    page: page,\r\n  };\r\n\r\n\r\n  const list = (anchor) =>\r\n    dataList === \"ADD\" ? (\r\n      <Add\r\n        setValidation={setValidation}\r\n        validation={validation}\r\n        handleAddList={handleAddList}\r\n        register={register}\r\n        source={source}\r\n        recruitmentList={recruitmentList}\r\n        handleClose={handleClose}\r\n        errors={errors}\r\n        setLoader={setLoader}\r\n        toggleDrawer={toggleDrawer}\r\n        setRecruitmentList={setRecruitmentList}\r\n        requirementList={requirementList}\r\n        handleSubmit={handleSubmit}\r\n        handleAdd={handleAdd}\r\n        requirement={requirement}\r\n        isSubmitting={isSubmitting}\r\n        open={open}\r\n        messageRef={messageRef}\r\n        reset={reset}\r\n        setCandidate={setCandidate}\r\n        candidate={candidate}\r\n        setFile={setFile}\r\n        file={file}\r\n        assessment={assessment}\r\n        setAssessment={setAssessment}\r\n        setRecruitmentId={setRecruitmentId}\r\n        recruitmentId={recruitmentId}\r\n        days={days}\r\n        months={months}\r\n        years={years}\r\n        setDay={setDay}\r\n        setMonth={setMonth}\r\n        setYear={setYear}\r\n        setPhoneValidation={setPhoneValidation}\r\n        requirementId={\"true\"}\r\n      />\r\n\r\n    ) : (\r\n      <>\r\n        <View\r\n          candidateView={candidateView}\r\n          toggleDrawer={toggleDrawer}\r\n          listCanditate={listCanditate}\r\n          candidatesEdit={candidateView}\r\n          setCandidateView={setCandidateView}\r\n        />\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" spacing={2} className={classes.heading}>\r\n        <Grid item xs={9} sm={7} md={8} lg={6}>\r\n\r\n          <PageTitle title=\"Search Candidates\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={3} sm={5} md={4} lg={6} className={classes.drawerClose}>\r\n\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form\r\n        ref={filterRef}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          getFilterData();\r\n        }}\r\n      >\r\n        <Grid container spacing={2} className={classes.filterGap}>\r\n\r\n\r\n\r\n\r\n          <TagsInput value={skillSearch}\r\n            onChange={handle}\r\n            separators={[\"Enter\", \",\"]}\r\n            className={classes.fullWidth}\r\n            id=\"skills\"\r\n            name=\"skills\"\r\n            placeHolder=\"Press Enter or Comma to Add a New Skills\"\r\n            classes={{ root: classes.customTextField }}\r\n\r\n          />\r\n\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              color=\"secondary\"\r\n              onClick={() => resetForm()}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <MUIDataTable\r\n            components={components}\r\n            options={table_options}\r\n            columns={[\r\n              {\r\n                name: \"S.No\",\r\n              },\r\n              {\r\n                name: \"Action\",\r\n              },\r\n              {\r\n                name: \"Status\",\r\n              },\r\n              {\r\n                name: \"Candidate Name\",\r\n              },\r\n              {\r\n                name: \"Email ID / Mobile\",\r\n              },\r\n              {\r\n                name: \"Requirement Name\",\r\n              },\r\n              {\r\n                name: decode.companyType === \"COMPANY\" ? \"Hiring Manager\" : \"Client Coordinator\",\r\n              },\r\n              {\r\n                name: \"Recruiter Name\",\r\n              },\r\n              {\r\n                name: \"Posted Date\",\r\n              },\r\n            ]}\r\n            data={candidatesData.map((item, index) => {\r\n\r\n              return [\r\n                <>\r\n                  {currerntPage !== 0\r\n                    ? 10 * currerntPage - 10 + index + 1\r\n                    : index + 1}\r\n                </>,\r\n\r\n                <Grid container className={classes.space}>\r\n                  <Tooltip title=\"View Candidate\" placement=\"right\" aria-label=\"view\">\r\n                    <ViewIcon\r\n                      className={classes.toolIcon}\r\n                      onClick={(e) => { handleShow(item.id, \"VIEW\") }}\r\n                    />\r\n                  </Tooltip>\r\n                  {decode.role !== \"FREELANCER\" && decode.role !== \"SUBVENDOR\" ?\r\n\r\n                    <Tooltip\r\n                      title=\"Reuse Candidate\"\r\n                      placement=\"right\"\r\n                      aria-label=\"Reuse Candidate\"\r\n                      onClick={(e) => { handleUse(item.candidateDetailId) }}\r\n                    >\r\n                      <PersonAddIcon\r\n                        className={classes.toolIcon}\r\n\r\n                      />\r\n                    </Tooltip>\r\n\r\n                    : \"\"} </Grid>,\r\n\r\n                item.statusCode ? (\r\n                  <>\r\n                    <Status\r\n                      list={item}\r\n\r\n\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  \"\"\r\n                ),\r\n\r\n                <Grid container row spacing={2} >\r\n\r\n                  {item.candidateDetail?.isExternal === \"YES\" ?\r\n                    <Tooltip title=\"SUBVENDOR/FREELANCER\" placement=\"bottom\" aria-label=\"title\">\r\n                      <Avatar alt=\"Profile\" src={external} className={classes.externalIcon} />\r\n                    </Tooltip> : \"\"}\r\n\r\n                  {item.candidateDetail?.firstName + \" \" + item.candidateDetail?.lastName}    <br />  {\"(\" + item.uniqueId + \")\"}\r\n\r\n                </Grid>,\r\n                item.mainId === decode.mainId ?\r\n                  <>  {item.candidateDetail?.email + \" /\"} <br />{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>\r\n                  : item.hideContactDetails !== true ?\r\n                    <>  {item.candidateDetail?.email + \" /\"} <br />{\"91 \" + item.candidateDetail?.mobile.slice(2)}  </>\r\n                    : \"\",\r\n                item.requirement?.requirementName + \" (\" + item.requirement?.uniqueId + \")\",\r\n                item.requirement?.client?.handler?.firstName + \" \" + item.requirement?.client?.handler?.lastName,\r\n                item.recruiter?.firstName + \" \" + item.recruiter?.lastName,\r\n                moment(item.createdAt).format(\"DD-MM-YYYY\"),\r\n              ];\r\n            })}\r\n          />\r\n\r\n          <Grid container spacing={2} className={classes.pagination}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[50]}\r\n              component=\"div\"\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <SwipeableDrawer\r\n        anchor=\"right\"\r\n        open={state[\"right\"]}\r\n        onClose={toggleDrawer(\"right\", false)}\r\n        onOpen={toggleDrawer(\"right\", true)}\r\n        classes={{ paper: dataList === \"VIEW\" ? classes.drawer : classes.clientDrawer }}\r\n      >\r\n        {list(\"right\")}\r\n      </SwipeableDrawer>\r\n\r\n\r\n      <Backdrop className={classes.backdrop} open={loader}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </>\r\n  );\r\n}\r\n\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\AddRequirements.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AssignAdd.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\ExpandButton.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\SearchStatus.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Bar.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\View.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Dialogs.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Actions.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Reverse.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AddClient.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AddUser.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Add.js",["779"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  List,\r\n  Box,\r\n  Tooltip,\r\n  TextField,\r\n  Dialog,\r\n  DialogContent,\r\n  RadioGroup,\r\n  Radio,\r\n  FormControlLabel,\r\n  IconButton,\r\n  FormControl,\r\n  InputLabel,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  DialogTitle,\r\n  Popover,\r\n  Switch,\r\n} from \"@material-ui/core\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardMedia\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport WhatsappIcon from \"@material-ui/icons/WhatsApp\";\r\nimport axios from \"axios\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport default function Add(props) {\r\n\r\n  const classes = useStyles();\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n\r\n  const [display, setDisplay] = useState(false);\r\n  const [fileName, setFileName] = useState();\r\n\r\n  const [docFileName, setDocFileName] = useState();\r\n  const [profileFileName, setProfileFileName] = useState();\r\n\r\n  const [assessmentFile, setAssessmentFile] = useState();\r\n  // const [extractCandDetail, setExtractDetail]= useState({\r\n  //   candidate_email: \"\",\r\n  //   candidate_mobile: \"\"\r\n  // })\r\n  function handleAssesment(event) {\r\n    setAssessmentFile(event.target.name);\r\n    props.setAssessment(event.target.files[0]);\r\n  }\r\n\r\n\r\n  function handleChange(event) {\r\n    setFileName(event.target.name);\r\n    props.setFile(event.target.files[0]);\r\n     extractEmail(event.target.files[0])\r\n  }\r\n\r\n  function handleDocUploadChange(event) {\r\n    setDocFileName(event.target.name);\r\n    props.setDocFile(event.target.files[0]);\r\n  }\r\n  console.log(props.docFile, props.profile)\r\n  function handleProfileChange(event) {\r\n    setProfileFileName(event.target.name);\r\n    props.setProfile(event.target.files[0]);\r\n  }\r\n  const dob = props.candidate?.dob != null || undefined ? props.candidate?.dob?.split(\"-\") : [\"00\", \"00\", \"00\"];\r\n  const days = dob[0];\r\n  const months = dob[1];\r\n  const years = dob[2];\r\n\r\n\r\n  const [disabled, setDisabled] = useState(props.requirementId !== \"false\" ? decode.role !== \"SUBVENDOR\" && decode.role !== \"FREELANCER\" ? true : false : false);\r\n\r\n  const [hoverText, setHoverText] = React.useState({\r\n    mobile: null,\r\n    email: null\r\n  });\r\n\r\n  \r\n  function extractEmail(resumeFile) {\r\n    const formData = new FormData();\r\n    formData.append('resume', resumeFile);\r\n\r\n    axios({\r\n      method: \"post\",\r\n      url: `${process.env.REACT_APP_SERVER}recruiter/extractInfo`,\r\n      data: formData,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n        Authorization: token,\r\n      },\r\n    }).then(function (response) {\r\n      if (response.data.status === true) {\r\n        const candidateExtractEmail = response.data.data.candidate_email\r\n        const candidateExtractMobile =response.data.data.candidate_mobile\r\n        props.setCandidate({\r\n          ...props.candidate,\r\n          email: candidateExtractEmail,\r\n          mobile: candidateExtractMobile\r\n        });\r\n        props.setValue('email', candidateExtractEmail);\r\n        props.setValue('mobile', candidateExtractMobile);\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleHoverTextOpen = (event) => {\r\n    setHoverText({\r\n      ...hoverText,\r\n      [event.target.name]: event.target\r\n    });\r\n  };\r\n\r\n  const handleHoverTextClose = (event) => {\r\n    setHoverText({\r\n      ...hoverText,\r\n      [event.target.name]: null\r\n    });\r\n  };\r\n\r\n\r\n  const CheckEmail = (e) => {\r\n    if (decode.role !== \"SUBVENDOR\" && decode.role !== \"FREELANCER\") {\r\n      axios({\r\n        method: \"post\",\r\n        url: `${process.env.REACT_APP_SERVER}recruiter/checkCandidateDetailExist`,\r\n        data: {\r\n          mobile: e.target.value,\r\n        },\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token,\r\n        },\r\n      }).then(function (response) {\r\n        if (response.data.status === true) {\r\n          props.setCandidate({\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,\r\n            experience: response.data.data?.experience,\r\n            location: response.data.data?.currentLocation,\r\n            dob: response.data.data?.dob,\r\n            candidateProcessed: response.data.data?.candidateProcessed,\r\n            native: response.data.data?.nativeLocation,\r\n            preferredLocation: response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:\r\n              response.data.data?.educationalQualification,\r\n            gender: response.data.data?.gender,\r\n            differentlyAbled: response.data.data?.differentlyAbled,\r\n            currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc: response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            currentCompanyName: response.data.data?.currentCompanyName,\r\n            reason: response.data.data?.reason,\r\n            freeValue: decode.isEnableFree === true ? \"YES\" : decode.isEnablePaid === true ? \"NO\" : \"YES\",\r\n          });\r\n\r\n\r\n          var birth = response.data.data?.dob != null || undefined ? response.data.data?.dob?.split(\"-\") : [\"00\", \"00\", \"00\"];\r\n          var day = birth[0];\r\n          var month = birth[1];\r\n          var year = birth[2];\r\n\r\n\r\n          props.reset({\r\n            requirementId: props.recruitmentId,\r\n            email: response.data.data?.email,\r\n            firstName: response.data.data?.firstName,\r\n            lastName: response.data.data?.lastName,\r\n            skills: response.data.data?.skills,\r\n            experience: response.data.data?.experience,\r\n            location: response.data.data?.currentLocation,\r\n            day: day,\r\n            month: month,\r\n            year: year,\r\n            candidateProcessed: response.data.data?.candidateProcessed,\r\n            native: response.data.data?.nativeLocation,\r\n            preferredLocation: response.data.data?.preferredLocation,\r\n            relevantExperience: response.data.data?.relevantExperience,\r\n            educationalQualification:\r\n              response.data.data?.educationalQualification,\r\n            gender: response.data.data?.gender,\r\n            differentlyAbled: response.data.data?.differentlyAbled,\r\n            currentCtc: response.data.data?.currentCtc,\r\n            expectedCtc: response.data.data?.expectedCtc,\r\n            noticePeriod: response.data.data?.noticePeriod,\r\n            reasonForJobChange: response.data.data?.reasonForJobChange,\r\n            currentCompanyName: response.data.data?.currentCompanyName,\r\n            reason: response.data.data?.reason,\r\n            freeValue: decode.isEnableFree === true ? \"YES\" : decode.isEnablePaid === true ? \"NO\" : \"YES\",\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n        <List>\r\n          <Card className={classes.root}>\r\n            <CardHeader>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                spacing={1}\r\n                className={classes.drawerHeader}\r\n              >\r\n                <Typography variant=\"subtitle1\"> Add New Candidate </Typography>\r\n\r\n                <Grid className={classes.drawerClose}>\r\n                  <CloseIcon\r\n                    className={classes.closeBtn}\r\n                    size=\"14px\"\r\n                    onClick={props.toggleDrawer(\"right\", false)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </CardHeader>\r\n\r\n            <form onSubmit={props.handleSubmit(props.handleAdd)}>\r\n              <CardContent>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={2}\r\n                  className={\r\n                    display === false\r\n                      ? props.recruitmentId !== \"\"\r\n                        ? classes.scrollContainer\r\n                        : classes.scrollContainermd\r\n                      : classes.scrollContainerlg\r\n                  }\r\n                >\r\n\r\n                  {props.requirementId !== \"false\" ?\r\n                    <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                      <FormControl className={classes.margin}>\r\n                        <InputLabel shrink htmlFor=\"requirementId\">\r\n                          Select Requirement\r\n                        </InputLabel>\r\n\r\n                    {decode.companyType === \"COMPANY\" && decode.role ===\"CLIENTCOORDINATOR\" \r\n                      ?\r\n                      <Autocomplete\r\n                          options={props.requirement}\r\n                          onChange={(e, value) => {\r\n                            setDisabled(false);\r\n                            props.setRecruitmentId(decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? value.requirementId : value.id);\r\n\r\n                            props.reset({\r\n                              requirementId: decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? value.requirementId : value.id,\r\n                            });\r\n                            props.setLoader(true);\r\n                            var url = \"\";\r\n                            if (decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\") {\r\n                              url = `${process.env.REACT_APP_SERVER}recruiter/getRequirement`;\r\n                            } else {\r\n                              url = `${process.env.REACT_APP_SERVER}CC/getRequirement`;\r\n                            }\r\n                            axios({\r\n                              method: \"post\",\r\n                              url: url,\r\n                              data: {\r\n                                id: decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? value.requirementId : value.id,\r\n                              },\r\n                              headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                                Authorization: token,\r\n                              },\r\n                            }).then(function (response) {\r\n                              if (response.data.status === true) {\r\n\r\n                                props.setLoader(false);\r\n                                props.setRecruitmentList({\r\n                                  ...props.requirementList,\r\n                                  id: response.data.data.id,\r\n                                  requirementName: response.data.data.requirementName,\r\n                                  clientId: response.data.data.clientId,\r\n                                  skills: response.data.data.skills,\r\n                                  orgRecruiterId: decode.companyType === \"COMPANY\" ? \"\" : response.data.data.orgRecruiter.id,\r\n                                  orgRecruiterName: decode.companyType === \"COMPANY\" ? \"\" : response.data.data.orgRecruiter.name,\r\n                                  jobLocation: response.data.data.jobLocation,\r\n                                  experience: response.data.data.experience,\r\n                                  clientUniqueId: response.data.data.client?.uniqueId,\r\n                                  clientName: response.data.data.client?.clientName,\r\n                                  status: response.data.data.statusList?.statusName,\r\n                                  uniqueId: response.data.data.uniqueId,\r\n                                });\r\n                              }\r\n                            });\r\n                          }}\r\n                          getOptionLabel={(option) => decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? option.requirement?.requirementName + \" (\" + option.requirement?.uniqueId + \")\" : option.requirementName + \" (\" + option.uniqueId + \")\"}\r\n                          disableClearable={true}\r\n                          error={props.errors.requirementId ? true : false}\r\n                          classes={{\r\n                            popupIndicator: classes.autocompleteIndicator,\r\n                          }}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              {...params}\r\n                              variant=\"filled\"\r\n                              placeholder=\"Select Requirement\"\r\n                              name=\"requirementId\"\r\n                              className=\"requirement\"\r\n                            />\r\n                          )}\r\n                        />\r\n                      :\r\n                        <Autocomplete\r\n                          options={props.requirement}\r\n                          onChange={(e, value) => {\r\n                            setDisabled(false);\r\n                            props.setRecruitmentId(decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? value.requirementId : value.id);\r\n\r\n                            props.reset({\r\n                              requirementId: decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? value.requirementId : value.id,\r\n                            });\r\n                            props.setLoader(true);\r\n                            var url = \"\";\r\n                            if (decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\") {\r\n                              url = `${process.env.REACT_APP_SERVER}recruiter/getRequirement`;\r\n                            } else {\r\n                              url = `${process.env.REACT_APP_SERVER}CC/getRequirement`;\r\n                            }\r\n                            axios({\r\n                              method: \"post\",\r\n                              url: url,\r\n                              data: {\r\n                                id: decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? value.requirementId : value.id,\r\n                              },\r\n                              headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                                Authorization: token,\r\n                              },\r\n                            }).then(function (response) {\r\n                              if (response.data.status === true) {\r\n\r\n                                props.setLoader(false);\r\n                                props.setRecruitmentList({\r\n                                  ...props.requirementList,\r\n                                  id: response.data.data.id,\r\n                                  requirementName: response.data.data.requirementName,\r\n                                  clientId: response.data.data.clientId,\r\n                                  skills: response.data.data.skills,\r\n                                  orgRecruiterId: decode.companyType === \"COMPANY\" ? \"\" : response.data.data.orgRecruiter.id,\r\n                                  orgRecruiterName: decode.companyType === \"COMPANY\" ? \"\" : response.data.data.orgRecruiter.name,\r\n                                  jobLocation: response.data.data.jobLocation,\r\n                                  experience: response.data.data.experience,\r\n                                  clientUniqueId: response.data.data.client?.uniqueId,\r\n                                  clientName: response.data.data.client?.clientName,\r\n                                  status: response.data.data.statusList?.statusName,\r\n                                  uniqueId: response.data.data.uniqueId,\r\n                                });\r\n                              }\r\n                            });\r\n                          }}\r\n                          getOptionLabel={(option) => decode.role === \"SUBVENDOR\" || decode.role === \"FREELANCER\" ? option.requirement?.requirementName + \" (\" + option.requirement?.uniqueId + \")\" : option.requirementName + \" (\" + option.uniqueId + \")\"}\r\n                          disableClearable={true}\r\n                          error={props.errors.requirementId ? true : false}\r\n                          classes={{\r\n                            popupIndicator: classes.autocompleteIndicator,\r\n                          }}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              {...params}\r\n                              variant=\"filled\"\r\n                              placeholder=\"Select Requirement\"\r\n                              name=\"requirementId\"\r\n                              className=\"requirement\"\r\n                            />\r\n                          )}\r\n                        />\r\n                    }\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {props.errors.requirementId?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    : \"\"}\r\n\r\n\r\n                  {decode.role !== \"SUBVENDOR\" && decode.role !== \"FREELANCER\" ?\r\n                    <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                      <InputLabel shrink htmlFor=\"source\">\r\n                        Source\r\n                      </InputLabel>\r\n                      <FormControl className={classes.margin}>\r\n                        <Select\r\n\r\n                          name=\"source\"\r\n                          defaultValue={props.candidate.source}\r\n                          onChange={(e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              source: e.target.value,\r\n                            });\r\n                          }}\r\n                          {...props.register(\"source\")}\r\n                          error={props.errors.source ? true : false}\r\n                          classes={{\r\n                            root: classes.customSelectField,\r\n                            icon: classes.customSelectIcon,\r\n                          }}\r\n                          disableUnderline\r\n                        >\r\n                          {props.source.map((item, index) => {\r\n                            return [\r\n                              <MenuItem value={item.id}>{item.name}</MenuItem>,\r\n                            ];\r\n                          })}\r\n                        </Select>\r\n\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {props.errors.source?.message}\r\n                        </Typography>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    : \"\"}\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"mobile\">   Contact Number   </InputLabel>\r\n\r\n                    <FormControl className={classes.margin}>\r\n                      <TextField\r\n                        onMouseEnter={(e) => handleHoverTextOpen(e)}\r\n                        onMouseLeave={(e) => handleHoverTextClose(e)}\r\n                        type=\"number\"\r\n                        // disabled={disabled}\r\n                        InputProps={{ disableUnderline: true }}\r\n                        classes={{ root: classes.customTextField }}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Contact Number\"\r\n                        id=\"mobile\"\r\n                        name=\"mobile\"\r\n                        {...props.register(\"mobile\", {\r\n                          onChange: (e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              mobile: e.target.value,\r\n                            });\r\n                          },\r\n                          onBlur: (e) => {\r\n                            props.ExistCheck(e);\r\n                            CheckEmail(e);\r\n                          },\r\n                        })}\r\n                        defaultValue={props.candidate.mobile}\r\n                        value={props.candidate.mobile}\r\n                        error={props.errors.mobile ? true : false}\r\n                      />\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.mobile?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n\r\n                    {disabled === true ?\r\n                      <Popover\r\n                        className={classes.customTooltipBlack}\r\n                        open={Boolean(hoverText.mobile)}\r\n                        anchorEl={hoverText.mobile}\r\n                        anchorOrigin={{\r\n                          vertical: 'bottom',\r\n                          horizontal: 'center',\r\n                        }}\r\n                        transformOrigin={{\r\n                          vertical: 'bottom',\r\n                          horizontal: 'center',\r\n                        }}\r\n\r\n                      >\r\n                        <Typography sx={{ p: 1 }} className={classes.customTooltipText}> Select Requirement</Typography>\r\n\r\n                      </Popover>\r\n                      : \"\"}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"alternateMobile\">\r\n\r\n                      Alternate Contact Number\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n                      <TextField\r\n                        type=\"number\"\r\n\r\n                        InputProps={{ disableUnderline: true }}\r\n                        classes={{ root: classes.customTextField }}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Alternate Contact Number\"\r\n                        id=\"alternateMobile\"\r\n                        name=\"alternateMobile\"\r\n                        {...props.register(\"alternateMobile\", {\r\n                          onChange: (e) => {\r\n                            if (e.target.value.length > 0) {\r\n                              props.setPhoneValidation(true);\r\n                            } else {\r\n                              props.setPhoneValidation(false);\r\n                            }\r\n\r\n                          }\r\n                        })}\r\n                        error={props.errors.alternateMobile ? true : false}\r\n                      />\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.alternateMobile?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"email\">\r\n                      Email ID\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n\r\n                      <TextField\r\n                        // disabled={disabled}\r\n                        onMouseEnter={(e) => handleHoverTextOpen(e)}\r\n                        onMouseLeave={(e) => handleHoverTextClose(e)}\r\n                        InputProps={{ disableUnderline: true }}\r\n                        classes={{ root: classes.customTextField }}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Email ID\"\r\n                        id=\"email\"\r\n                        defaultValue={props.candidate.email}\r\n                        value={props.candidate.email}\r\n                        {...props.register(\"email\", {\r\n\r\n                          onChange: (e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              email: e.target.value,\r\n                            });\r\n                            props.ExistCheck(e);\r\n                          },\r\n\r\n                        })}\r\n                        error={props.errors.email ? true : false}\r\n                      />\r\n\r\n\r\n                      {disabled === true ?\r\n                        <Popover\r\n                          className={classes.customTooltipBlack}\r\n                          open={Boolean(hoverText.email)}\r\n                          anchorEl={hoverText.email}\r\n                          anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'center',\r\n                          }}\r\n                          transformOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'center',\r\n                          }}\r\n\r\n                        >\r\n                          <Typography sx={{ p: 1 }} className={classes.customTooltipText}> Select Requirement</Typography>\r\n\r\n                        </Popover>\r\n                        : \"\"}\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.email?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"firstName\">\r\n                      First Name\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n                      <TextField\r\n\r\n                        InputProps={{ disableUnderline: true }}\r\n                        classes={{ root: classes.customTextField }}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter First Name\"\r\n                        id=\"firstName\"\r\n                        // value={props.candidate.firstName}\r\n                        defaultValue={props.candidate.firstName}\r\n                        {...props.register(\"firstName\", {\r\n                          onChange: (e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              firstName: e.target.value,\r\n                            });\r\n                          },\r\n                        })}\r\n                        error={props.errors.firstName ? true : false}\r\n                      />\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.firstName?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"lastName\">\r\n                      Last Name\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n                      <TextField\r\n\r\n                        InputProps={{ disableUnderline: true }}\r\n                        classes={{ root: classes.customTextField }}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Last Name\"\r\n                        id=\"lastName\"\r\n                        value={props.candidate.lastName}\r\n                        defaultValue={props.candidate.lastName}\r\n                        {...props.register(\"lastName\", {\r\n                          onChange: (e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              lastName: e.target.value,\r\n                            });\r\n                          },\r\n                        })}\r\n                        error={props.errors.lastName ? true : false}\r\n                      />\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.lastName?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"skills\">\r\n                      Skill\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n                      <TextField\r\n\r\n                        InputProps={{ disableUnderline: true }}\r\n                        classes={{ root: classes.customTextField }}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Skill\"\r\n                        id=\"skills\"\r\n                        value={props.candidate.skills}\r\n                        defaultValue={props.candidate.skills}\r\n                        {...props.register(\"skills\", {\r\n                          onChange: (e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              skills: e.target.value,\r\n                            });\r\n                          },\r\n                        })}\r\n                        error={props.errors.skills ? true : false}\r\n                      />\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.skills?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"gender\">\r\n\r\n                      Gender\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n                      <Select\r\n\r\n                        name=\"gender\"\r\n                        value={props.candidate.gender}\r\n                        defaultValue={props.candidate.gender}\r\n                        {...props.register(\"gender\", {\r\n                          onChange: (e) => {\r\n                            props.setCandidate({\r\n                              ...props.candidate,\r\n                              gender: e.target.value,\r\n                            });\r\n                          },\r\n                        })}\r\n                        error={props.errors.gender ? true : false}\r\n                        classes={{\r\n                          root: classes.customSelectField,\r\n                          icon: classes.customSelectIcon,\r\n                        }}\r\n                        disableUnderline\r\n                      >\r\n                        <MenuItem value=\"Male\">Male</MenuItem>\r\n                        <MenuItem value=\"Female\">Female</MenuItem>\r\n                        <MenuItem value=\"Transgender\">Transgender</MenuItem>\r\n                        <MenuItem value=\"Prefer not to say\">Prefer not to say</MenuItem>\r\n\r\n                      </Select>\r\n\r\n                      <Typography variant=\"inherit\" color=\"error\">\r\n                        {props.errors.gender?.message}\r\n                      </Typography>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                    <InputLabel shrink htmlFor=\"resume\">\r\n\r\n                      Upload Resume\r\n                    </InputLabel>\r\n                    <FormControl className={classes.margin}>\r\n\r\n                      <div className={classes.space + \" \" + classes.alignItemsEnd}  >\r\n                        <div className={classes.marginTop}>\r\n                          <input\r\n                            accept=\".pdf,.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n                            className={classes.input}\r\n                            id=\"icon-button-file\"\r\n                            type=\"file\"\r\n                            value={fileName}\r\n                            style={{ display: \"none\" }}\r\n                            onChange={handleChange}\r\n\r\n                          />\r\n                          <label htmlFor=\"icon-button-file\">\r\n                            <Button\r\n\r\n                              variant=\"contained\"\r\n                              className={classes.button}\r\n                              color=\"primary\"\r\n                              startIcon={<DescriptionIcon />}\r\n                              aria-label=\"upload picture\"\r\n                              component=\"span\"\r\n                            >\r\n                              Upload Resume\r\n                            </Button>\r\n                          </label>\r\n                        </div>\r\n\r\n                        {props.file?.name ?\r\n                          <Tooltip title=\"Delete Resume\" placement=\"bottom\" aria-label=\"delete\" >\r\n                            <DeleteIcon className={classes.toolIconDelete} onClick={(e) => { props.setFile([]); setFileName(); }} />\r\n                          </Tooltip>\r\n\r\n                          : \"\"}\r\n                      </div>\r\n                    </FormControl>\r\n\r\n\r\n                    <Grid container direction=\"row\" className={classes.left + \" \" + classes.button} >\r\n                      <Typography variant=\"inherit\" className={classes.lineBreak}   > {props.file?.name}  </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {decode.companyType === \"COMPANY\" ?\r\n                    <>\r\n                      <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"resume\">\r\n                          Upload Document\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n\r\n                          <div className={classes.space + \" \" + classes.alignItemsEnd}  >\r\n                            <div className={classes.marginTop}>\r\n                              <input\r\n                                accept=\".pdf,.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n                                className={classes.input}\r\n                                id=\"icon-button-doc-file\"\r\n                                type=\"file\"\r\n                                value={docFileName}\r\n                                style={{ display: \"none\" }}\r\n                                onChange={handleDocUploadChange}\r\n\r\n                              />\r\n                              <label htmlFor=\"icon-button-doc-file\">\r\n                                <Button\r\n\r\n                                  variant=\"contained\"\r\n                                  className={classes.button}\r\n                                  color=\"primary\"\r\n                                  startIcon={<DescriptionIcon />}\r\n                                  aria-label=\"upload picture\"\r\n                                  component=\"span\"\r\n                                >\r\n                                  Upload Document\r\n                                </Button>\r\n                              </label>\r\n                            </div>\r\n\r\n                            {props.docFile?.name ?\r\n                              <Tooltip title=\"Delete Document\" placement=\"bottom\" aria-label=\"delete\" >\r\n                                <DeleteIcon className={classes.toolIconDelete} onClick={(e) => { props.setDocFile([]); setDocFileName(); }} />\r\n                              </Tooltip>\r\n\r\n                              : \"\"}\r\n                          </div>\r\n                        </FormControl>\r\n                        <Grid container direction=\"row\" className={classes.left + \" \" + classes.button} >\r\n                          <Typography variant=\"inherit\" className={classes.lineBreak}   > {props.docFile?.name}  </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item xs={6} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"resume\">\r\n\r\n                          Upload Photograph\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n\r\n                          <div className={classes.space + \" \" + classes.alignItemsEnd}  >\r\n                            <div className={classes.marginTop}>\r\n                              <input\r\n                                accept=\".pdf,.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n                                className={classes.input}\r\n                                id=\"icon-button-profile\"\r\n                                type=\"file\"\r\n                                value={profileFileName}\r\n                                style={{ display: \"none\" }}\r\n                                onChange={handleProfileChange}\r\n\r\n                              />\r\n                              <label htmlFor=\"icon-button-profile\">\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  className={classes.button}\r\n                                  color=\"primary\"\r\n                                  startIcon={<DescriptionIcon />}\r\n                                  aria-label=\"upload picture\"\r\n                                  component=\"span\"\r\n                                >\r\n                                  Upload Photograph\r\n                                </Button>\r\n                              </label>\r\n                            </div>\r\n\r\n                            {props.profile?.name ?\r\n                              <Tooltip title=\"Delete Profile\" placement=\"bottom\" aria-label=\"delete\" >\r\n                                <DeleteIcon className={classes.toolIconDelete} onClick={(e) => { props.setProfile([]); setProfileFileName(); }} />\r\n                              </Tooltip>\r\n\r\n                              : \"\"}\r\n                          </div>\r\n                        </FormControl>\r\n                        <Grid container direction=\"row\" className={classes.left + \" \" + classes.button} >\r\n                          <Typography variant=\"inherit\" className={classes.lineBreak}   > {props.profile?.name}  </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"currentCompanyName\">\r\n                          Pan Card Details\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Pan Card Number\"\r\n                            id=\"currentCompanyName\"\r\n                            value={props.candidate.currentCompanyName}\r\n                            defaultValue={props.candidate.currentCompanyName}\r\n                            {...props.register(\"currentCompanyName\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  currentCompanyName: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.currentCompanyName ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.currentCompanyName?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"native\">\r\n                          LinkedIn Profile URL\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Your LinkedIn Profile URL\"\r\n                            id=\"native\"\r\n                            value={props.candidate.native}\r\n                            defaultValue={props.candidate.native}\r\n                            {...props.register(\"native\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  native: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.native ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.native?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n                    </>\r\n                    :\r\n                    <Grid item xs={6} sm={5} md={2} lg={2}>\r\n                      <InputLabel shrink htmlFor=\"resume\">\r\n                        Hide Contact Detail\r\n                      </InputLabel>\r\n\r\n                      <FormControl className={classes.margin}>\r\n\r\n                        <Switch\r\n                          checked={props.hideContactDetails}\r\n                          onChange={(e) => {\r\n\r\n                            props.setHideContactDetails(e.target.checked);\r\n\r\n                          }}\r\n                          color=\"primary\"\r\n                          inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                        />\r\n\r\n                      </FormControl>\r\n                    </Grid>\r\n                  }\r\n\r\n                  {decode.role !== \"SUBVENDOR\" && decode.role !== \"FREELANCER\" ? <>\r\n                    <Grid item xs={12} sm={7} md={4} lg={4}>\r\n                      <InputLabel shrink htmlFor=\"free\">\r\n                        Candidate Follow-up\r\n                      </InputLabel>\r\n\r\n                      <FormControl component=\"fieldset\">\r\n                        <RadioGroup\r\n\r\n                          aria-label=\"free\"\r\n                          name=\"free\"\r\n                          defaultValue={props.candidate.freeValue}\r\n                          onChange={(e) => {\r\n                            props.candidate.freeValue(e.target.value);\r\n                          }}\r\n                          row\r\n                        >\r\n                          {decode.isEnableFree === true ? (\r\n                            <FormControlLabel\r\n\r\n                              value=\"YES\"\r\n                              control={<Radio />}\r\n                              label={\r\n                                <Typography className={classes.heading}>\r\n                                  {\"Free \"}\r\n                                  <Tooltip title=\"WhatsApp\" placement=\"right\">\r\n                                    <IconButton>\r\n                                      <WhatsappIcon\r\n                                        className={classes.whatsapp_green}\r\n                                      />\r\n                                    </IconButton>\r\n                                  </Tooltip>\r\n                                </Typography>\r\n                              }\r\n                            />\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                          {decode.isEnablePaid === true ? (\r\n                            <FormControlLabel\r\n\r\n                              value=\"NO\"\r\n                              control={<Radio />}\r\n                              label={\r\n                                <Typography className={classes.heading}>\r\n                                  {\"Paid \"}\r\n                                  <Tooltip title=\"WhatsApp\" placement=\"right\">\r\n                                    <IconButton>\r\n                                      <WhatsappIcon\r\n                                        className={classes.whatsapp_green}\r\n                                      />\r\n                                    </IconButton>\r\n                                  </Tooltip>\r\n                                </Typography>\r\n                              }\r\n                            />\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </RadioGroup>\r\n                      </FormControl>\r\n                    </Grid> </> : \"\"}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                  <Grid item xs={12} className={classes.drawerClose}>\r\n                    {display === false ? (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        onClick={(e) => {\r\n                          setDisplay(true);\r\n                        }}\r\n                        className={classes.margin + \" \" + classes.addUser}\r\n                        color=\"primary\"\r\n                        startIcon={<AddCircleIcon />}\r\n                      >\r\n                        More\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={(e) => {\r\n                          setDisplay(false);\r\n                        }}\r\n                        className={classes.margin}\r\n                        startIcon={<IndeterminateCheckBoxIcon />}\r\n                      >\r\n                        Less\r\n                      </Button>\r\n                    )}\r\n                  </Grid>\r\n\r\n                  {display === true ? (\r\n                    <>\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"dob\">\r\n\r\n                          DOB\r\n                        </InputLabel>\r\n                        <FormControl\r\n                          className={classes.margin + \" \" + classes.dateSelect}\r\n                        >\r\n                          <select\r\n\r\n                            defaultValue={days}\r\n                            onChange={(e) => {\r\n                              props.setDay(e.target.value);\r\n                            }}\r\n                            {...props.register(\"day\")}\r\n                            className={classes.selectDrop}\r\n                          >\r\n                            <option value=\"\"> </option>\r\n                            {props.days.map((option) => (\r\n                              <option key={option} value={option}>\r\n                                {option}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n\r\n                          <select\r\n\r\n                            defaultValue={months}\r\n                            onChange={(e) => {\r\n                              props.setMonth(e.target.value);\r\n                            }}\r\n                            {...props.register(\"month\")}\r\n                            className={classes.selectDrop}\r\n                          >\r\n                            <option value=\"\"> </option>\r\n                            {props.months.map((option) => (\r\n                              <option key={option} value={option}>\r\n                                {option}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n\r\n                          <select\r\n\r\n                            defaultValue={years}\r\n                            onChange={(e) => {\r\n                              props.setYear(e.target.value);\r\n                            }}\r\n                            {...props.register(\"year\")}\r\n                            className={classes.selectDrop}\r\n                          >\r\n                            <option value=\"\"> </option>\r\n                            {props.years.map((option) => (\r\n                              <option key={option} value={option}>\r\n                                {option}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                        </FormControl>\r\n                        <Typography variant=\"inherit\" color=\"error\">\r\n                          {props.errors.day?.message &&\r\n                            props.errors.month?.message &&\r\n                            props.errors.year?.message}\r\n                        </Typography>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"currentCompanyName\">\r\n                          Current Company Name\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Current Company Name\"\r\n                            id=\"currentCompanyName\"\r\n                            value={props.candidate.currentCompanyName}\r\n                            defaultValue={props.candidate.currentCompanyName}\r\n                            {...props.register(\"currentCompanyName\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  currentCompanyName: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.currentCompanyName ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.currentCompanyName?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"native\">\r\n                          Native Location\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Native Location\"\r\n                            id=\"native\"\r\n                            value={props.candidate.native}\r\n                            defaultValue={props.candidate.native}\r\n                            {...props.register(\"native\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  native: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.native ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.native?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"location\">\r\n                          Current Location\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Current Location\"\r\n                            id=\"location\"\r\n                            value={props.candidate.location}\r\n                            defaultValue={props.candidate.location}\r\n                            {...props.register(\"location\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  location: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.location ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.location?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"preferredLocation\">\r\n                          Preferred Location\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Preferred Location\"\r\n                            id=\"preferredLocation\"\r\n                            value={props.candidate.preferredLocation}\r\n                            defaultValue={props.candidate.preferredLocation}\r\n                            {...props.register(\"preferredLocation\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  preferredLocation: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={\r\n                              props.errors.preferredLocation ? true : false\r\n                            }\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.preferredLocation?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"experience\">\r\n                          Total Years of Experience\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            type=\"number\"\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Total Years of Experience\"\r\n                            id=\"experience\"\r\n                            value={props.candidate.experience}\r\n                            defaultValue={props.candidate.experience}\r\n                            {...props.register(\"experience\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  experience: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.experience ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.experience?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"relevantExperience\">\r\n                          Relevant Experience\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            type=\"number\"\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Relevant Experience\"\r\n                            id=\"relevantExperience\"\r\n                            value={props.candidate.relevantExperience}\r\n                            defaultValue={props.candidate.relevantExperience}\r\n                            {...props.register(\"relevantExperience\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  relevantExperience: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={\r\n                              props.errors.relevantExperience ? true : false\r\n                            }\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.relevantExperience?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"educationalQualification\">\r\n\r\n                          Educational Qualification\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Education\"\r\n                            id=\"educationalQualification\"\r\n                            value={props.candidate.educationalQualification}\r\n                            defaultValue={\r\n                              props.candidate.educationalQualification\r\n                            }\r\n                            {...props.register(\"educationalQualification\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  educationalQualification: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={\r\n                              props.errors.educationalQualification\r\n                                ? true\r\n                                : false\r\n                            }\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.educationalQualification?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"differentlyAbled\">\r\n\r\n                          Differently Abled\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <Select\r\n\r\n                            name=\"differentlyAbled\"\r\n                            value={\r\n                              props.candidate.differentlyAbled !== null\r\n                                ? props.candidate.differentlyAbled\r\n                                : \"NO\"\r\n                            }\r\n                            defaultValue={\r\n                              props.candidate.differentlyAbled !== null\r\n                                ? props.candidate.differentlyAbled\r\n                                : \"NO\"\r\n                            }\r\n                            {...props.register(\"differentlyAbled\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  differentlyAbled: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.differentlyAbled ? true : false}\r\n                            classes={{\r\n                              root: classes.customSelectField,\r\n                              icon: classes.customSelectIcon,\r\n                            }}\r\n                            disableUnderline\r\n                          >\r\n                            <MenuItem value=\"YES\">Yes</MenuItem>\r\n                            <MenuItem value=\"NO\">No</MenuItem>\r\n                          </Select>\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.differentlyAbled?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                        {decode.companyType !==\"COMPANY\" &&\r\n                        <>\r\n                          <Grid item xs={12} sm={6} md={5} lg={5}>\r\n                            <InputLabel shrink htmlFor=\"candidateRecruiterDiscussionRecording\">\r\n                              Candidate Recruiter discussion recording\r\n                            </InputLabel>\r\n                            <FormControl className={classes.margin}>\r\n                              <TextField\r\n\r\n                                InputProps={{ disableUnderline: true }}\r\n                                classes={{ root: classes.customTextField }}\r\n                                size=\"small\"\r\n                                placeholder=\"Enter Candidate Recruiter Discussion Recording\"\r\n                                id=\"candidateRecruiterDiscussionRecording\"\r\n                                value={props.candidate.candidateRecruiterDiscussionRecording}\r\n                                defaultValue={props.candidate.candidateRecruiterDiscussionRecording}\r\n                                {...props.register(\"candidateRecruiterDiscussionRecording\", {\r\n                                  onChange: (e) => {\r\n                                    props.setCandidate({\r\n                                      ...props.candidate,\r\n                                      candidateRecruiterDiscussionRecording: e.target.value,\r\n                                    });\r\n                                  },\r\n                                })}\r\n                                error={props.errors.candidateRecruiterDiscussionRecording ? true : false}\r\n                              />\r\n\r\n                              <Typography variant=\"inherit\" color=\"error\">\r\n                                {props.errors.candidateRecruiterDiscussionRecording?.message}\r\n                              </Typography>\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                            <InputLabel shrink htmlFor=\"candidateSkillExplanationRecording\">\r\n                              Candidate Skill explanation recording\r\n                            </InputLabel>\r\n                            <FormControl className={classes.margin}>\r\n                              <TextField\r\n\r\n                                InputProps={{ disableUnderline: true }}\r\n                                classes={{ root: classes.customTextField }}\r\n                                size=\"small\"\r\n                                placeholder=\"Enter Candidate Skill Explanation Recording \"\r\n                                id=\"candidateSkillExplanationRecording\"\r\n                                value={props.candidate.candidateSkillExplanationRecording}\r\n                                defaultValue={props.candidate.candidateSkillExplanationRecording}\r\n                                {...props.register(\"candidateSkillExplanationRecording\", {\r\n                                  onChange: (e) => {\r\n                                    props.setCandidate({\r\n                                      ...props.candidate,\r\n                                      candidateSkillExplanationRecording: e.target.value,\r\n                                    });\r\n                                  },\r\n                                })}\r\n                                error={props.errors.candidateSkillExplanationRecording ? true : false}\r\n                              />\r\n\r\n                              <Typography variant=\"inherit\" color=\"error\">\r\n                                {props.errors.candidateSkillExplanationRecording?.message}\r\n                              </Typography>\r\n                            </FormControl>\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                            <InputLabel shrink htmlFor=\"candidateMindsetAssessmentLink\">\r\n                              Candidate MindSet Assessment                         </InputLabel>\r\n                            <FormControl className={classes.margin}>\r\n\r\n                              <div className={classes.space + \" \" + classes.alignItemsEnd}  >\r\n                                <div className={classes.marginTop}>\r\n                                  <input\r\n                                    accept=\".png,.jpg,.jpeg\"\r\n                                    className={classes.input}\r\n                                    id=\"icon-button-assessment\"\r\n                                    type=\"file\"\r\n                                    value={assessmentFile}\r\n                                    style={{ display: \"none\" }}\r\n                                    onChange={handleAssesment}\r\n\r\n                                  />\r\n                                  <label htmlFor=\"icon-button-assessment\">\r\n                                    <Button\r\n\r\n                                      variant=\"contained\"\r\n                                      className={classes.button}\r\n                                      color=\"primary\"\r\n                                      startIcon={<ImageIcon />}\r\n                                      aria-label=\"upload assessment\"\r\n                                      component=\"span\"\r\n                                    >\r\n                                      Candidate MindSet Assessment\r\n                                    </Button>\r\n                                  </label>\r\n                                </div>\r\n                                {props.assessment?.name ?\r\n                                  <Tooltip title=\"Delete Assessment\" placement=\"bottom\" aria-label=\"delete\" >\r\n                                    <DeleteIcon className={classes.toolIconDelete} onClick={(e) => { props.setAssessment([]); setAssessmentFile(); }} />\r\n                                  </Tooltip>\r\n\r\n                                  : \"\"}\r\n                              </div>\r\n                            </FormControl>\r\n                            <Grid container direction=\"row\" className={classes.left + \" \" + classes.button} >\r\n                              <Typography variant=\"inherit\" className={classes.lineBreak}   > {props.assessment?.name}  </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                          <Grid item xs={12} sm={6} md={6} lg={8}>\r\n                            <InputLabel shrink htmlFor=\"candidateAndTechPannelDiscussionRecording\">\r\n                              Candidate & Tech Panel discussion recording\r\n                            </InputLabel>\r\n                            <FormControl className={classes.margin}>\r\n                              <TextField\r\n\r\n                                InputProps={{ disableUnderline: true }}\r\n                                classes={{ root: classes.customTextField }}\r\n                                size=\"small\"\r\n                                placeholder=\"Enter Candidate & Tech Panel discussion recording\"\r\n                                id=\"candidateAndTechPannelDiscussionRecording\"\r\n                                value={props.candidate.candidateAndTechPannelDiscussionRecording}\r\n                                defaultValue={props.candidate.candidateAndTechPannelDiscussionRecording}\r\n                                {...props.register(\"candidateAndTechPannelDiscussionRecording\", {\r\n                                  onChange: (e) => {\r\n                                    props.setCandidate({\r\n                                      ...props.candidate,\r\n                                      candidateAndTechPannelDiscussionRecording: e.target.value,\r\n                                    });\r\n                                  },\r\n                                })}\r\n                                error={props.errors.candidateAndTechPannelDiscussionRecording ? true : false}\r\n                              />\r\n\r\n                              <Typography variant=\"inherit\" color=\"error\">\r\n                                {props.errors.candidateAndTechPannelDiscussionRecording?.message}\r\n                              </Typography>\r\n                            </FormControl>\r\n                          </Grid>\r\n                        </>\r\n                        }\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"currentCtc\">\r\n\r\n                          Current CTC\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            placeholder=\"Enter Current CTC\"\r\n                            id=\"currentCtc\"\r\n                            value={props.candidate.currentCtc}\r\n                            defaultValue={props.candidate.currentCtc}\r\n                            {...props.register(\"currentCtc\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  currentCtc: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.currentCtc ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.currentCtc?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"expectedCtc\">\r\n\r\n                          Expected CTC\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            placeholder=\"Enter Expected CTC  \"\r\n                            id=\"expectedCtc\"\r\n                            value={props.candidate.expectedCtc}\r\n                            defaultValue={props.candidate.expectedCtc}\r\n                            {...props.register(\"expectedCtc\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  expectedCtc: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.expectedCtc ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.expectedCtc?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"noticePeriod\">\r\n\r\n                          Notice Period\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Notice Period\"\r\n                            id=\"noticePeriod\"\r\n                            value={props.candidate.noticePeriod}\r\n                            defaultValue={props.candidate.noticePeriod}\r\n                            {...props.register(\"noticePeriod\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  noticePeriod: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={props.errors.noticePeriod ? true : false}\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.noticePeriod?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={6} md={3} lg={3}>\r\n                        <InputLabel shrink htmlFor=\"candidateProcessed\">\r\n\r\n                          Candidate Attended (Call)\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <Select\r\n\r\n                            name=\"candidateProcessed\"\r\n                            defaultValue={props.candidate.candidateProcessed}\r\n                            {...props.register(\"candidateProcessed\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  candidateProcessed: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={\r\n                              props.errors.candidateProcessed ? true : false\r\n                            }\r\n                            classes={{\r\n                              root: classes.customSelectField,\r\n                              icon: classes.customSelectIcon,\r\n                            }}\r\n                            disableUnderline\r\n                          >\r\n                            <MenuItem value=\"YES\">Yes</MenuItem>\r\n                            <MenuItem value=\"NO\">No</MenuItem>\r\n                          </Select>\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.candidateProcessed?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} lg={6}>\r\n                        <InputLabel shrink htmlFor=\"reasonForJobChange\">\r\n\r\n                          Reason for Job Change\r\n                        </InputLabel>\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            multiline\r\n\r\n                            maxRows={3}\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter Reason for Job Change\"\r\n                            id=\"reasonForJobChange\"\r\n                            value={props.candidate.reasonForJobChange}\r\n                            defaultValue={props.candidate.reasonForJobChange}\r\n                            {...props.register(\"reasonForJobChange\", {\r\n                              onChange: (e) => {\r\n                                props.setCandidate({\r\n                                  ...props.candidate,\r\n                                  reasonForJobChange: e.target.value,\r\n                                });\r\n                              },\r\n                            })}\r\n                            error={\r\n                              props.errors.reasonForJobChange ? true : false\r\n                            }\r\n                          />\r\n\r\n                          <Typography variant=\"inherit\" color=\"error\">\r\n                            {props.errors.reasonForJobChange?.message}\r\n                          </Typography>\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      {props.candidate.candidateProcessed === \"NO\" ? (\r\n                        <Grid item xs={12} lg={6}>\r\n                          <InputLabel shrink htmlFor=\"reason\">  Specify   </InputLabel>\r\n                          <FormControl className={classes.margin}>\r\n                            <TextField\r\n                              multiline\r\n\r\n                              maxRows={3}\r\n                              InputProps={{ disableUnderline: true }}\r\n                              classes={{ root: classes.customTextField }}\r\n                              size=\"small\"\r\n                              placeholder=\"Enter Specify\"\r\n                              id=\"reason\"\r\n                              value={props.candidate.reason}\r\n                              defaultValue={props.candidate.reason}\r\n                              {...props.register(\"reason\", {\r\n                                onChange: (e) => {\r\n                                  props.setCandidate({\r\n                                    ...props.candidate,\r\n                                    reason: e.target.value,\r\n                                  });\r\n                                },\r\n                              })}\r\n                              error={props.errors.reason ? true : false}\r\n                            />\r\n\r\n                            <Typography variant=\"inherit\" color=\"error\">\r\n                              {props.errors.reason?.message}\r\n                            </Typography>\r\n                          </FormControl>\r\n                        </Grid>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {props.recruitmentId !== \"\" ? (\r\n                    <>\r\n                      <CardContent>\r\n                        <Grid container direction=\"row\" spacing={2}>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b>Requirement Name:</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              {props.recruitmentList.requirementName} {\"(\" + props.recruitmentList.uniqueId + \")\"}\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b> {decode.companyType === \"COMPANY\" ? \"Project Name:\" : \"Client Name:\"}</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              {props.recruitmentList.clientName} {\"(\" + props.recruitmentList.clientUniqueId + \")\"}\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b>Organization Recruiter Name:</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              {props.recruitmentList.orgRecruiterName}\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b>Experience:</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              {props.recruitmentList.experience}\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b>Skills:</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              {props.recruitmentList?.skills}\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b>Location:</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              {props.recruitmentList.jobLocation}\r\n                            </Typography>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} lg={6}>\r\n                            <Typography>\r\n                              <b>Status:</b>\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} lg={6}>\r\n                            {props.recruitmentList.status === \"ACTIVE\" ? (\r\n                              <>\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  size=\"small\"\r\n                                  className={classes.green + \" \" + classes.noPointer}\r\n                                >\r\n                                  ACTIVE\r\n                                </Button>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  size=\"small\"\r\n                                  className={classes.red + \" \" + classes.noPointer}\r\n                                >\r\n                                  INACTIVE\r\n                                </Button>\r\n                              </>\r\n                            )}\r\n                          </Grid>\r\n                        </Grid>\r\n                      </CardContent>\r\n                    </>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Grid>\r\n\r\n                <CardActions>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    spacing={2}\r\n                    className={classes.scrollContainerfooter}\r\n                  >\r\n\r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      disabled={props.isSubmitting}\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      onClick={props.toggleDrawer(\"right\", false)}\r\n                    >\r\n                      Close\r\n                    </Button>\r\n\r\n                    <Dialog\r\n                      onClose={props.handleClose}\r\n                      aria-labelledby=\"dialog-title\"\r\n                      open={props.open}\r\n                      width=\"md\"\r\n                      PaperProps={{\r\n                        style: {\r\n                          width: \"100%\",\r\n                        },\r\n                      }}\r\n                    >\r\n                      <DialogTitle className={classes.digTitle}>\r\n                        <div className={classes.center}>\r\n                          <Typography variant=\"subtitle2\" className={classes.digColor + \" \" + classes.digCenter}>\r\n                            Send WhatsApp message\r\n                          </Typography>\r\n                          <div className={classes.drawerClose} >\r\n                            <CloseIcon\r\n                              className={classes.digClose}\r\n                              size=\"14px\"\r\n                              onClick={props.handleClose}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </DialogTitle>\r\n                      <DialogContent className={classes.chatListBackGround}>\r\n\r\n                        {props.candidate.freeValue === \"YES\" ? (\r\n                          <TextField\r\n                            size=\"small\"\r\n                            classes={{ root: classes.customTextField }}\r\n                            InputProps={{ disableUnderline: true }}\r\n                            multiline\r\n                            rows={4}\r\n                            inputRef={props.messageRef}\r\n                            defaultValue={`Dear ${props.requirementList.cand1_name},\\n\\nWe sincerely appreciate the time you took to discuss the job opening for Job ID ${props.requirementList.req_id} (${props.requirementList.job1_title}). We kindly request you to refer potential candidates for this role. \\n \\nThank you and best regards,\\n${localStorage.getItem('firstName') + \"\" + decode.lastName} \\n${localStorage.getItem('mobile') ? \"+91 \" + localStorage.getItem('mobile') : \"\"} \\nRecruiter \\n${localStorage.getItem('companyName')}`}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        ) : (\r\n                          <Typography>\r\n                            Hi  <b>  {props.requirementList.cand1_name}, </b>\r\n                            <br />\r\n                            <br />\r\n                            Can we chat today about a job opening\r\n                            <b> {localStorage.getItem('firstName')} </b>,\r\n                            <b> {localStorage.getItem('mobile')} </b>,\r\n                            <b> {localStorage.getItem('companyName')} </b>. Always reply by\r\n                            clicking back arrow button/right swipe only.\r\n                          </Typography>\r\n\r\n                          // <Typography> \r\n                          // Dear <b>{props.requirementList.cand1_name},</b>\r\n                          // <br />\r\n                          // <br />     \r\n                          // We sincerely appreciate the time you took to discuss the job opening for Job ID {props.requirementList.req_id} ({props.requirementList.job1_title}). We kindly request you to refer potential candidates for this role. \r\n                          // <br />\r\n                          // <br />   \r\n                          // Thank you and best regards,  <br />   \r\n\r\n                          // {localStorage.getItem('firstName') +\" \"+ decode.lastName}  <br />   \r\n\r\n                          // {localStorage.getItem('mobile')? \"+91 \"+localStorage.getItem('mobile'):\"\" } <br />   \r\n\r\n                          // Recruiter<br />     \r\n\r\n                          // {localStorage.getItem('companyName')}.  \r\n                          // </Typography>\r\n\r\n                        )}\r\n\r\n\r\n\r\n\r\n                        <div className={classes.sendWhatsapp}>\r\n\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            disabled={props.validation}\r\n                            type=\"submit\"\r\n                            onClick={(e) => {\r\n                              props.setValidation(true);\r\n                              props.handleAddList(false);\r\n                            }}\r\n                          >\r\n                            Save Only\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            disabled={props.validation}\r\n                            type=\"submit\"\r\n                            onClick={(e) => {\r\n                              props.setValidation(true);\r\n                              props.handleAddList(true);\r\n                            }}\r\n                          >\r\n                            Save & Send\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            onClick={props.handleClose}\r\n                          >\r\n                            Close\r\n                          </Button>\r\n                        </div>\r\n                      </DialogContent>\r\n                    </Dialog>\r\n                  </Grid>\r\n                </CardActions>\r\n              </CardContent>\r\n            </form>\r\n          </Card>\r\n        </List>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\PageTitle\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Search.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\SearchStatus.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\components\\Dot.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Sidebar\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\ProjectApproval.js",["780","781","782","783","784","785"],"import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Collapse,\r\n  Box,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\n// components\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ViewIcon from \"@material-ui/icons/Visibility\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardMedia\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport { toast } from \"react-toastify\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport moment from \"moment\";\r\nimport useStyles from \"../../themes/style.js\";\r\n\r\nfunction ProjectApproval({\r\n  anchor,\r\n  toggleDrawer,\r\n  mobileQuery,\r\n  recruiterEditFields,\r\n  viewProjOpen,\r\n  clientsName,\r\n  clientEdit,\r\n  levelOfHireEditFields,\r\n  handleViewProjClick,\r\n  approveSchema,\r\n  approveIsSubmitting,\r\n  approveProject,\r\n  approveErrors,\r\n  approveSubmit,\r\n  approveReset,\r\n  setApproveValue,\r\n  handleAddApprover\r\n}) {\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n        <List>\r\n          <Card className={classes.root}>\r\n            <CardHeader>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                spacing={1}\r\n                className={classes.drawerViewHeader}\r\n              >\r\n                <Grid item xs={10} md={6}>\r\n                  <Typography variant=\"subtitle1\">\r\n                    Approve Project - {clientEdit.clientName}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={2} lg={6} className={classes.drawerViewClose}>\r\n                  <CloseIcon\r\n                    className={classes.closeBtn}\r\n                    size=\"14px\"\r\n                    onClick={toggleDrawer(anchor, false)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </CardHeader>\r\n\r\n            <CardContent className={classes.drawerViewContent}>\r\n              <Grid container direction=\"row\" spacing={2}>\r\n                <ListItem\r\n                  button\r\n                  onClick={() => handleViewProjClick(\"viewAllList\")}\r\n                >\r\n                  <ListItemIcon>\r\n                    <ViewIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"View All Details\" />\r\n                  {viewProjOpen.viewAllList ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={viewProjOpen.viewAllList}>\r\n                  <Grid container spacing={2}>\r\n\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Project Name:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.clientName}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Project Division:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.clientIndustry}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Hiring Manager:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {(() => {\r\n                        const hiringManager = clientsName.find(\r\n                          (client) => client.id === clientEdit.handlerId,\r\n                        );\r\n                        return hiringManager\r\n                          ? `${hiringManager.firstName} ${hiringManager.lastName}`\r\n                          : \"Hiring Manager not found\";\r\n                      })()}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        HR Business Unit Code:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.hrbpCode}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Project Region:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.projectRegion}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Project Location:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.projectLocation}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Reason for Hiring:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.reasonForHiring}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Is Billed:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.billable === true ? (\r\n                        <DoneIcon style={{ color: \"#4caf50\" }} />\r\n                      ) : (\r\n                        <CloseIcon style={{ color: \"#b71c1c\" }} />\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Hiring Start Date:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.aggStartDate}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Hiring End Date:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.aggEndDate}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>Status:</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {clientEdit.status ? (\r\n                        clientEdit.status.statusName === \"ACTIVE\" ? (\r\n                          <>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              size=\"small\"\r\n                              className={classes.green + \" \" + classes.noPointer}\r\n                            >\r\n                              ACTIVE\r\n                            </Button>\r\n                          </>\r\n                        ) : clientEdit.status.statusName === \"INACTIVE\" ? (\r\n                          <>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              size=\"small\"\r\n                              className={classes.red + \" \" + classes.noPointer}\r\n                            >\r\n                              INACTIVE\r\n                            </Button>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              size=\"small\"\r\n                              className={classes.blue}\r\n                            >\r\n                              NEW\r\n                            </Button>\r\n                          </>\r\n                        )\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      <Typography className={classes.boldtext}>\r\n                        Posted Date:\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                      {moment(clientEdit.createdAt).format(\"DD-MM-YYYY\")}\r\n                    </Grid>\r\n                  </Grid>\r\n                </Collapse>\r\n              <Grid item xs={12}>\r\n                <ListItem\r\n                  button\r\n                  onClick={() => handleViewProjClick(\"hireLevelList\")}\r\n                >\r\n                  <ListItemIcon>\r\n                    <SignalCellularAltIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Number to be hired\" />\r\n                  {viewProjOpen.hireLevelList ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={viewProjOpen.hireLevelList}>\r\n                  <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <MUIDataTable\r\n                      options={{\r\n                        pagination: false,\r\n                        sort: false,\r\n                        selectableRows: \"none\",\r\n                        search: false,\r\n                        filter: false,\r\n                        download: false,\r\n                        print: false,\r\n                        viewColumns: false,\r\n                        responsive:\r\n                          mobileQuery === true ? \"vertical\" : \"standard\",\r\n                        textLabels: {\r\n                          body: {\r\n                            noMatch:\r\n                              \"Oops! Matching record could not be found\",\r\n                          },\r\n                        },\r\n                      }}\r\n                      columns={[\r\n                        {\r\n                          name: \"S.No\",\r\n                        },\r\n                        {\r\n                          name: \"Level Name\",\r\n                        },\r\n                        {\r\n                          name: \"Number of Hirings\",\r\n                        },\r\n                      ]}\r\n                      data={levelOfHireEditFields.map((item, index) => {\r\n                        return [index + 1, item.name, item.noOfHires];\r\n                      })}\r\n                    />\r\n                  </Grid>\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <ListItem\r\n                  button\r\n                  onClick={() => handleViewProjClick(\"orgRecList\")}\r\n                >\r\n                  <ListItemIcon>\r\n                    <PeopleAltIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Org Recruiter Lists\" />\r\n                  {viewProjOpen.orgRecList ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={viewProjOpen.orgRecList}>\r\n                  <List component=\"div\" disablePadding>\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n                      <Grid item xs={12} md={12} lg={12}>\r\n                        <Typography className={classes.boldtext}>\r\n                          Org Point of Contact(POC):\r\n                        </Typography>\r\n                        <br />\r\n                        <MUIDataTable\r\n                          options={{\r\n                            pagination: false,\r\n                            sort: false,\r\n                            selectableRows: \"none\",\r\n                            search: false,\r\n                            filter: false,\r\n                            download: false,\r\n                            print: false,\r\n                            viewColumns: false,\r\n                            responsive:\r\n                              mobileQuery === true ? \"vertical\" : \"standard\",\r\n                            textLabels: {\r\n                              body: {\r\n                                noMatch:\r\n                                  \"Oops! Matching record could not be found\",\r\n                              },\r\n                            },\r\n                          }}\r\n                          columns={[\r\n                            {\r\n                              name: \"S.No\",\r\n                            },\r\n                            {\r\n                              name: \"Name\",\r\n                            },\r\n                            {\r\n                              name: \"Email\",\r\n                            },\r\n\r\n                            {\r\n                              name: \"Mobile No\",\r\n                            },\r\n                          ]}\r\n                          data={recruiterEditFields.map((item, index) => {\r\n                            return [\r\n                              index + 1,\r\n                              item.name,\r\n                              item.email,\r\n                              item.mobile,\r\n                            ];\r\n                          })}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </List>\r\n                </Collapse>\r\n              </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <CardContent className={classes.drawerViewContent}>\r\n              <Grid container direction=\"row\" spacing={2}>\r\n                <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                  <InputLabel shrink htmlFor=\"approverName\">\r\n                    Approver Name\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Name of the Approver\"\r\n                      id=\"approverName\"\r\n                      {...approveProject(\"approverName\")}\r\n                      error={approveErrors.approverName ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {approveErrors.approverName?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                  <InputLabel shrink htmlFor=\"approverEmail\">\r\n                    Email ID\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Email-Id of the Approver\"\r\n                      id=\"approverEmail\"\r\n                      {...approveProject(\"approverEmail\")}\r\n                      error={approveErrors.approverEmail ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {approveErrors.approverEmail?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                  <InputLabel shrink htmlFor=\"approverContent\">\r\n                    Approval Content\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      multiline\r\n                      rows={3}\r\n                      maxRows={4}\r\n                      placeholder=\"Type Approval Content\"\r\n                      id=\"approverContent\"\r\n                      {...approveProject(\"approverContent\")}\r\n                      error={approveErrors.approverContent ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {approveErrors.approverContent?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                  <InputLabel shrink htmlFor=\"approverDesignation\">\r\n                    Designation\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Designation of the Approver\"\r\n                      id=\"approverDesignation\"\r\n                      {...approveProject(\"approverDesignation\")}\r\n                      error={approveErrors.approverDesignation ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {approveErrors.approverDesignation?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  spacing={2}\r\n                  style={{display:\"flex\",justifyContent:\"start\", marginTop:\"10px\",alignItems:\"center\",gap:'10px'}}\r\n                >\r\n                  <Grid item xs={12} sm={6} md={4} lg={3} >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      size=\"small\"\r\n                      style={{width:\"100%\"}}\r\n                      onClick={approveSubmit(handleAddApprover)}\r\n                      disabled={approveIsSubmitting}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n                \r\n              </Grid>\r\n            </CardContent>\r\n     \r\n            <CardActions>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                spacing={2}\r\n                className={classes.clientDrawerFooter}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={toggleDrawer(anchor, false)}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n        </List>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectApproval;\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\ProjectView.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\projects\\ProjectAction.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\AddProject.js",["786"],"import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  List,\r\n  Box,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Typography,\r\n  MenuItem,\r\n  Switch,\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../../themes/style.js\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardMedia\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport RemoveCircle from \"@material-ui/icons/RemoveCircle\";\r\nimport classNames from \"classnames\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nexport default function AddProject(props) {\r\n  const classes = useStyles();\r\n  const token = localStorage.getItem(\"token\");\r\n  const decode = jwtDecode(token);\r\n  console.log(props.recruiterFields)\r\n  return (\r\n    <>\r\n      <Box sx={{ width: \"100%\" }} role=\"presentation\">\r\n        <List>\r\n          <Card className={classes.root}>\r\n            <CardHeader>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                spacing={1}\r\n                className={classes.drawerHeader}\r\n              >\r\n                <Grid item xs={10} md={6}>\r\n                  <Typography variant=\"subtitle1\">Add New Project </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={2} lg={6} className={classes.drawerClose}>\r\n                  <CloseIcon\r\n                    className={classes.closeBtn}\r\n                    size=\"14px\"\r\n                    onClick={props.toggleDrawer(\"right\", false)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </CardHeader>\r\n            <CardContent className={classes.scrollCard}>\r\n              <Grid container direction=\"row\" spacing={2}>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"clientName\">\r\n                    Project Name\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Project Name\"\r\n                      id=\"clientName\"\r\n                      {...props.register(\"clientName\")}\r\n                      error={props.errors.clientName ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.clientName?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"clientIndustry\">\r\n                    Project Division\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Project Division\"\r\n                      id=\"clientIndustry\"\r\n                      {...props.register(\"clientIndustry\")}\r\n                      error={props.errors.clientIndustry ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.clientIndustry?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"clientIndustry\">\r\n                    Hiring Manager\r\n                  </InputLabel>\r\n                  <TextField\r\n                    select\r\n                    name=\"recruiterId\"\r\n                    label={\r\n                      props?.clientsName === \"\" ? \"Select Hiring Manager\" : \"\"\r\n                    }\r\n                    classes={{ root: classes.customSelectTextField }}\r\n                    size=\"small\"\r\n                    defaultValue=\"\"\r\n                    {...props.register(\"recruiterId\")}\r\n                    InputLabelProps={{ shrink: false }}\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    onChange={(e) =>\r\n                      props.setValue(\"recruiterId\", e.target.value)\r\n                    }\r\n                  >\r\n                    {props?.clientsName?.map((option) => (\r\n                      <MenuItem key={option.user.id} value={option.id}>\r\n                        {decode.user_id === option.user.id\r\n                          ? `${option.firstName} ${option.lastName} (You)`\r\n                          : option.employeeId === \"\"\r\n                          ? `${option.firstName} ${option.lastName}`\r\n                          : `${option.firstName} ${option.lastName} (${option.employeeId})`}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <Typography variant=\"inherit\" color=\"error\">\r\n                    {props.errors.recruiterId?.message}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"hrbpCode\">\r\n                    HR Business Unit Code\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter HRBU Code\"\r\n                      id=\"hrbpCode\"\r\n                      {...props.register(\"hrbpCode\")}\r\n                      error={props.errors.clientIndustry ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.hrbpCode?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n             \r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"projectRegion\">\r\n                     Project Region\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Project Region\"\r\n                      id=\"projectRegion\"\r\n                      {...props.register(\"projectRegion\")}\r\n                      error={props.errors.projectRegion ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.projectRegion?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"projectLocation\">\r\n                    Project Location\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      placeholder=\"Enter Project Location\"\r\n                      id=\"projectLocation\"\r\n                      {...props.register(\"projectLocation\")}\r\n                      error={props.errors.projectLocation ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.projectLocation?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={8} md={8} lg={8}>\r\n                  <InputLabel shrink htmlFor=\"reasonForHiring\">\r\n                    Reason For Hiring\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      multiline\r\n                      rows={3}\r\n                      maxRows={4}\r\n                      placeholder=\"Backfill/ New Hire/ Rehire/ Special Hire\"\r\n                      id=\"reasonForHiring\"\r\n                      {...props.register(\"reasonForHiring\")}\r\n                      error={props.errors.reasonForHiring ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.reasonForHiring?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"billable\">\r\n                   Billable\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <Switch\r\n                      checked={props.billable}\r\n                      color=\"primary\"\r\n                      id=\"billable\"\r\n                      name=\"billable\"\r\n                      {...props.register(\"billable\", {\r\n                        onChange: (e) => {\r\n                          props.setBillable(e.target.checked);\r\n                        },\r\n                      })}\r\n                      inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                    />\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.billable?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"aggStartDate\">\r\n                    Hiring Start Date\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      type=\"date\"\r\n                      placeholder=\"Select Hiring Start Date\"\r\n                      id=\"aggStartDate\"\r\n                      {...props.register(\"aggStartDate\")}\r\n                      error={props.errors.aggStartDate ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.aggStartDate?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12} sm={4} md={4} lg={4}>\r\n                  <InputLabel shrink htmlFor=\"aggEndDate\">\r\n                    Hiring End Date\r\n                  </InputLabel>\r\n                  <FormControl className={classes.margin}>\r\n                    <TextField\r\n                      InputProps={{ disableUnderline: true }}\r\n                      classes={{ root: classes.customTextField }}\r\n                      size=\"small\"\r\n                      type=\"date\"\r\n                      placeholder=\"Select Hiring End Date\"\r\n                      id=\"aggEndDate\"\r\n                      {...props.register(\"aggEndDate\")}\r\n                      error={props.errors.aggEndDate ? true : false}\r\n                    />\r\n\r\n                    <Typography variant=\"inherit\" color=\"error\">\r\n                      {props.errors.aggEndDate?.message}\r\n                    </Typography>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs lg={3}></Grid>\r\n                  {props.levelOfHiringFields.map((user, index) => (\r\n                    <div key={index} className={classNames(classes.fields)}>\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={4}\r\n                        lg={3}\r\n                        className={classNames(classes.fieldsInput)}\r\n                      >\r\n                        <InputLabel shrink>\r\n                          Hiring Level\r\n                        </InputLabel>\r\n\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Enter the Level Name\"\r\n                            id=\"name\"\r\n                            value={user.name}\r\n                            name=\"name\"\r\n                            onChange={(event) =>\r\n                              props.levelOfHiringChange(event, index)\r\n                            }\r\n                          />\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={4}\r\n                        lg={4}\r\n                        className={classNames(classes.fieldsInput)}\r\n                      >\r\n                        <InputLabel shrink>\r\n                        Number to be hired\r\n                        </InputLabel>\r\n\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            type=\"number\"\r\n                            placeholder=\"Enter Number to be hired\"\r\n                            id=\"noOfHires\"\r\n                            value={user.noOfHires}\r\n                            name=\"noOfHires\"\r\n                            onChange={(event) =>\r\n                              props.levelOfHiringChange(event, index)\r\n                            }\r\n                          />\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={12}\r\n                        lg={2}\r\n                        className={classNames([classes.fieldsInput])}\r\n                      >\r\n                        <AddCircleIcon\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          onClick={props.LevelOfHireAdd}\r\n                          className={classes.closeAddBtn}\r\n                        />\r\n                        {index + 1 !== 1 ? (\r\n                          <RemoveCircle\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            onClick={props.LevelOfHireRemove}\r\n                            className={classes.closeMinBtn}\r\n                          />\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </Grid>\r\n                    </div>\r\n                  ))}\r\n                <div id=\"section-level-of-hire\"> </div>\r\n                <Grid item xs lg={3}></Grid>\r\n                  {props.recruiterFields.map((user, index) =>{ console.log(user)\r\n                    return(\r\n                    <div key={index} className={classNames(classes.fields)}>\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={4}\r\n                        lg={3}\r\n                        className={classNames(classes.fieldsInput)}\r\n                      >\r\n                        <InputLabel shrink>\r\n                          Recruiter Point of Contact(POC) Name\r\n                        </InputLabel>\r\n                        <TextField\r\n                          select\r\n                          name={`recruiterId`}\r\n                          label={props?.recruiterName === \"\" ? \"Select Recruiter Name\" : \"\"}\r\n                          style={{ textAlign: \"left\" }}\r\n                          classes={{ root: classes.customSelectTextField }}\r\n                          value={user.recruiterId}\r\n                          onChange={(e) => props.recruiterChange(e, index)}\r\n                          size=\"small\"\r\n                          InputLabelProps={{ shrink: false }}\r\n                          margin=\"normal\"\r\n                          variant=\"outlined\"\r\n                        >\r\n                          {props?.recruiterName?.map((option) => {\r\n                            const roleName = option.user?.roleName;\r\n                            const firstName = option.firstName;\r\n                            const lastName = option.lastName;\r\n                            let label = `${firstName} ${lastName}`;\r\n                            if (roleName) {\r\n                              label += ` (${roleName})`;\r\n\r\n                              if (roleName === \"SUBVENDOR\") {\r\n                                label = label.replace(\"(SUBVENDOR)\", \"(Vendor)\");\r\n                              } else if (roleName === \"CLIENTCOORDINATOR\") {\r\n                                label = label.replace(\"(CLIENTCOORDINATOR)\", \"(Hiring Manager)\");\r\n                              }\r\n                              return (\r\n                                <MenuItem key={option.id} value={option.id}>\r\n                                  {label}\r\n                                </MenuItem>\r\n                              );\r\n                            }\r\n                          })}\r\n                        </TextField>\r\n                        {/* <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Project Point of Contact(POC) Name\"\r\n                            id=\"name\"\r\n                            value={user.name}\r\n                            name=\"name\"\r\n                            onChange={(event) =>\r\n                              props.recruiterChange(event, index)\r\n                            }\r\n                          />\r\n                        </FormControl> */}\r\n                      </Grid>\r\n\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={4}\r\n                        lg={3}\r\n                        className={classNames(classes.fieldsInput)}\r\n                      >\r\n                        <InputLabel shrink>\r\n                          Recruiter Email-Id\r\n                        </InputLabel>\r\n\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Recruiter Email-Id\"\r\n                            id=\"email\"\r\n                            value={user.email}\r\n                            name=\"email\"\r\n                            // onChange={(event) =>\r\n                            //   props.recruiterChange(event, index)\r\n                            // }\r\n                          />\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={4}\r\n                        lg={4}\r\n                        className={classNames(classes.fieldsInput)}\r\n                      >\r\n                        <InputLabel shrink>\r\n                          Recruiter Mobile No\r\n                        </InputLabel>\r\n\r\n                        <FormControl className={classes.margin}>\r\n                          <TextField\r\n                            InputProps={{ disableUnderline: true }}\r\n                            classes={{ root: classes.customTextField }}\r\n                            size=\"small\"\r\n                            placeholder=\"Recruiter Mobile No\"\r\n                            id=\"mobile\"\r\n                            value={user.mobile}\r\n                            name=\"mobile\"\r\n                            // onChange={(event) =>\r\n                            //   props.recruiterChange(event, index)\r\n                            // }\r\n                          />\r\n                        </FormControl>\r\n                      </Grid>\r\n\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={12}\r\n                        lg={2}\r\n                        className={classNames([classes.fieldsInput])}\r\n                      >\r\n                        <AddCircleIcon\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          onClick={props.recruiterAdd}\r\n                          className={classes.closeAddBtn}\r\n                        />\r\n                        {index + 1 !== 1 ? (\r\n                          <RemoveCircle\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            onClick={props.recruiterRemove}\r\n                            className={classes.closeMinBtn}\r\n                          />\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </Grid>\r\n                    </div>\r\n                  )})}\r\n                <div id=\"section\"> </div>\r\n                </Grid>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                spacing={2}\r\n                className={classes.clientDrawerFooter}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  onClick={props.handleSubmit(props.handleAdd)}\r\n                  disabled={props.isSubmitting}\r\n                >\r\n                  Save\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={props.toggleDrawer(\"right\", false)}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n        </List>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\dashboard\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\chat\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Message.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Status.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Resume.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Recruiter\\Dialogs.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Drop.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\MatchJDDialog.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Status.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Note.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Edit.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Admin\\Reverse.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\Dialogs.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Share.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\Candidates\\TabView.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Header.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\register\\DrawerComp.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\Sidebar.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\components\\Dot.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\pages\\share\\Sidebar\\components\\SidebarLink\\styles.js",[],"D:\\KPM Demo\\kpmgDemo\\frontend\\src\\components\\page_not_found\\PageNotFound.js",["787"],"import React from 'react'\r\nimport {\r\n    Grid,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport pageNotFoundImg from \"../../images/page_not_found.png\"\r\nimport { useHistory } from 'react-router-dom';\r\nconst PageNotFound = () => {\r\n    const history = useHistory()\r\n    const handleRedirect = () => {\r\n        // Redirect to a full URL\r\n        history.push(\"/v1#/login\")\r\n    };\r\n    return (<>\r\n        <Grid container justifyContent='center' alignItems='center' style={{ position: \"absolute\", top: 0, bottom: 0, height: '100vh' }} spacing={2}>\r\n            <Grid item xs={12} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', gap: '30px' }}>\r\n                <img src={pageNotFoundImg} className='page_not_found_image' width=\"100%\" alt='404_notFoud' />\r\n                <div>\r\n                    <Grid item xs={12} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', gap: \"20px\" }}>\r\n                        <Typography variant=\"h2\" style={{ textAlign: 'center' }} > Look like this page doesn't exist! </Typography>\r\n                        <Typography variant=\"h6\" style={{ color: '#8c8b8b' }} >Go back to home and continue exploring </Typography>\r\n                        <button className=\"go_back_btn\" role=\"button\" onClick={handleRedirect}>Back to Home</button>\r\n                    </Grid>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default PageNotFound",{"ruleId":"788","replacedBy":"789"},{"ruleId":"790","replacedBy":"791"},{"ruleId":"792","severity":1,"message":"793","line":1,"column":27,"nodeType":"794","messageId":"795","endLine":1,"endColumn":37},{"ruleId":"792","severity":1,"message":"796","line":8,"column":3,"nodeType":"794","messageId":"795","endLine":8,"endColumn":12},{"ruleId":"792","severity":1,"message":"797","line":9,"column":3,"nodeType":"794","messageId":"795","endLine":9,"endColumn":14},{"ruleId":"792","severity":1,"message":"798","line":10,"column":3,"nodeType":"794","messageId":"795","endLine":10,"endColumn":13},{"ruleId":"792","severity":1,"message":"799","line":18,"column":8,"nodeType":"794","messageId":"795","endLine":18,"endColumn":17},{"ruleId":"792","severity":1,"message":"800","line":33,"column":8,"nodeType":"794","messageId":"795","endLine":33,"endColumn":23},{"ruleId":"792","severity":1,"message":"801","line":165,"column":5,"nodeType":"794","messageId":"795","endLine":165,"endColumn":13},{"ruleId":"792","severity":1,"message":"802","line":169,"column":5,"nodeType":"794","messageId":"795","endLine":169,"endColumn":10},{"ruleId":"792","severity":1,"message":"803","line":243,"column":9,"nodeType":"794","messageId":"795","endLine":243,"endColumn":23},{"ruleId":"792","severity":1,"message":"804","line":244,"column":9,"nodeType":"794","messageId":"795","endLine":244,"endColumn":15},{"ruleId":"792","severity":1,"message":"805","line":253,"column":9,"nodeType":"794","messageId":"795","endLine":253,"endColumn":23},{"ruleId":"792","severity":1,"message":"806","line":38,"column":8,"nodeType":"794","messageId":"795","endLine":38,"endColumn":15},{"ruleId":"792","severity":1,"message":"807","line":39,"column":8,"nodeType":"794","messageId":"795","endLine":39,"endColumn":21},{"ruleId":"792","severity":1,"message":"808","line":162,"column":10,"nodeType":"794","messageId":"795","endLine":162,"endColumn":21},{"ruleId":"792","severity":1,"message":"809","line":173,"column":9,"nodeType":"794","messageId":"795","endLine":173,"endColumn":22},{"ruleId":"792","severity":1,"message":"810","line":178,"column":9,"nodeType":"794","messageId":"795","endLine":178,"endColumn":21},{"ruleId":"792","severity":1,"message":"811","line":200,"column":11,"nodeType":"794","messageId":"795","endLine":200,"endColumn":23},{"ruleId":"792","severity":1,"message":"812","line":201,"column":10,"nodeType":"794","messageId":"795","endLine":201,"endColumn":23},{"ruleId":"792","severity":1,"message":"813","line":201,"column":25,"nodeType":"794","messageId":"795","endLine":201,"endColumn":41},{"ruleId":"792","severity":1,"message":"814","line":202,"column":10,"nodeType":"794","messageId":"795","endLine":202,"endColumn":25},{"ruleId":"792","severity":1,"message":"815","line":202,"column":27,"nodeType":"794","messageId":"795","endLine":202,"endColumn":45},{"ruleId":"792","severity":1,"message":"816","line":970,"column":12,"nodeType":"794","messageId":"795","endLine":970,"endColumn":35},{"ruleId":"792","severity":1,"message":"817","line":998,"column":12,"nodeType":"794","messageId":"795","endLine":998,"endColumn":26},{"ruleId":"792","severity":1,"message":"818","line":1103,"column":10,"nodeType":"794","messageId":"795","endLine":1103,"endColumn":30},{"ruleId":"792","severity":1,"message":"819","line":1145,"column":7,"nodeType":"794","messageId":"795","endLine":1145,"endColumn":23},{"ruleId":"792","severity":1,"message":"807","line":45,"column":8,"nodeType":"794","messageId":"795","endLine":45,"endColumn":21},{"ruleId":"792","severity":1,"message":"808","line":114,"column":10,"nodeType":"794","messageId":"795","endLine":114,"endColumn":21},{"ruleId":"792","severity":1,"message":"809","line":125,"column":9,"nodeType":"794","messageId":"795","endLine":125,"endColumn":22},{"ruleId":"792","severity":1,"message":"810","line":130,"column":9,"nodeType":"794","messageId":"795","endLine":130,"endColumn":21},{"ruleId":"792","severity":1,"message":"811","line":220,"column":11,"nodeType":"794","messageId":"795","endLine":220,"endColumn":23},{"ruleId":"792","severity":1,"message":"812","line":221,"column":10,"nodeType":"794","messageId":"795","endLine":221,"endColumn":23},{"ruleId":"792","severity":1,"message":"813","line":221,"column":25,"nodeType":"794","messageId":"795","endLine":221,"endColumn":41},{"ruleId":"792","severity":1,"message":"814","line":222,"column":10,"nodeType":"794","messageId":"795","endLine":222,"endColumn":25},{"ruleId":"792","severity":1,"message":"815","line":222,"column":27,"nodeType":"794","messageId":"795","endLine":222,"endColumn":45},{"ruleId":"820","severity":1,"message":"821","line":876,"column":33,"nodeType":"822","messageId":"823","endLine":876,"endColumn":35},{"ruleId":"824","severity":1,"message":"825","line":892,"column":6,"nodeType":"826","endLine":892,"endColumn":13,"suggestions":"827"},{"ruleId":"792","severity":1,"message":"816","line":1272,"column":12,"nodeType":"794","messageId":"795","endLine":1272,"endColumn":35},{"ruleId":"792","severity":1,"message":"817","line":1300,"column":12,"nodeType":"794","messageId":"795","endLine":1300,"endColumn":26},{"ruleId":"792","severity":1,"message":"818","line":1700,"column":12,"nodeType":"794","messageId":"795","endLine":1700,"endColumn":32},{"ruleId":"792","severity":1,"message":"819","line":1742,"column":9,"nodeType":"794","messageId":"795","endLine":1742,"endColumn":25},{"ruleId":"792","severity":1,"message":"817","line":1271,"column":12,"nodeType":"794","messageId":"795","endLine":1271,"endColumn":26},{"ruleId":"792","severity":1,"message":"807","line":55,"column":8,"nodeType":"794","messageId":"795","endLine":55,"endColumn":21},{"ruleId":"792","severity":1,"message":"811","line":116,"column":11,"nodeType":"794","messageId":"795","endLine":116,"endColumn":23},{"ruleId":"792","severity":1,"message":"812","line":117,"column":10,"nodeType":"794","messageId":"795","endLine":117,"endColumn":23},{"ruleId":"792","severity":1,"message":"813","line":117,"column":25,"nodeType":"794","messageId":"795","endLine":117,"endColumn":41},{"ruleId":"824","severity":1,"message":"828","line":805,"column":5,"nodeType":"829","endLine":805,"endColumn":56},{"ruleId":"824","severity":1,"message":"828","line":806,"column":5,"nodeType":"829","endLine":806,"endColumn":34},{"ruleId":"792","severity":1,"message":"808","line":1049,"column":10,"nodeType":"794","messageId":"795","endLine":1049,"endColumn":21},{"ruleId":"792","severity":1,"message":"809","line":1059,"column":9,"nodeType":"794","messageId":"795","endLine":1059,"endColumn":22},{"ruleId":"792","severity":1,"message":"810","line":1064,"column":9,"nodeType":"794","messageId":"795","endLine":1064,"endColumn":21},{"ruleId":"792","severity":1,"message":"816","line":1568,"column":12,"nodeType":"794","messageId":"795","endLine":1568,"endColumn":35},{"ruleId":"792","severity":1,"message":"830","line":1596,"column":12,"nodeType":"794","messageId":"795","endLine":1596,"endColumn":25},{"ruleId":"792","severity":1,"message":"817","line":1614,"column":12,"nodeType":"794","messageId":"795","endLine":1614,"endColumn":26},{"ruleId":"792","severity":1,"message":"818","line":2060,"column":12,"nodeType":"794","messageId":"795","endLine":2060,"endColumn":32},{"ruleId":"792","severity":1,"message":"819","line":2102,"column":9,"nodeType":"794","messageId":"795","endLine":2102,"endColumn":25},{"ruleId":"792","severity":1,"message":"807","line":46,"column":8,"nodeType":"794","messageId":"795","endLine":46,"endColumn":21},{"ruleId":"792","severity":1,"message":"808","line":204,"column":10,"nodeType":"794","messageId":"795","endLine":204,"endColumn":21},{"ruleId":"792","severity":1,"message":"809","line":214,"column":9,"nodeType":"794","messageId":"795","endLine":214,"endColumn":22},{"ruleId":"792","severity":1,"message":"810","line":219,"column":9,"nodeType":"794","messageId":"795","endLine":219,"endColumn":21},{"ruleId":"792","severity":1,"message":"811","line":258,"column":11,"nodeType":"794","messageId":"795","endLine":258,"endColumn":23},{"ruleId":"792","severity":1,"message":"812","line":259,"column":10,"nodeType":"794","messageId":"795","endLine":259,"endColumn":23},{"ruleId":"792","severity":1,"message":"813","line":259,"column":25,"nodeType":"794","messageId":"795","endLine":259,"endColumn":41},{"ruleId":"792","severity":1,"message":"816","line":1382,"column":12,"nodeType":"794","messageId":"795","endLine":1382,"endColumn":35},{"ruleId":"792","severity":1,"message":"817","line":1410,"column":12,"nodeType":"794","messageId":"795","endLine":1410,"endColumn":26},{"ruleId":"792","severity":1,"message":"818","line":1721,"column":12,"nodeType":"794","messageId":"795","endLine":1721,"endColumn":32},{"ruleId":"792","severity":1,"message":"819","line":1763,"column":9,"nodeType":"794","messageId":"795","endLine":1763,"endColumn":25},{"ruleId":"792","severity":1,"message":"817","line":852,"column":12,"nodeType":"794","messageId":"795","endLine":852,"endColumn":26},{"ruleId":"792","severity":1,"message":"817","line":556,"column":12,"nodeType":"794","messageId":"795","endLine":556,"endColumn":26},{"ruleId":"792","severity":1,"message":"817","line":814,"column":10,"nodeType":"794","messageId":"795","endLine":814,"endColumn":24},{"ruleId":"792","severity":1,"message":"817","line":929,"column":12,"nodeType":"794","messageId":"795","endLine":929,"endColumn":26},{"ruleId":"820","severity":1,"message":"831","line":1732,"column":72,"nodeType":"822","messageId":"832","endLine":1732,"endColumn":74},{"ruleId":"792","severity":1,"message":"833","line":15,"column":8,"nodeType":"794","messageId":"795","endLine":15,"endColumn":20},{"ruleId":"834","severity":1,"message":"835","line":539,"column":13,"nodeType":"836","endLine":543,"endColumn":15},{"ruleId":"837","severity":1,"message":"838","line":820,"column":63,"nodeType":"839","messageId":"840","endLine":820,"endColumn":65},{"ruleId":"837","severity":1,"message":"838","line":820,"column":96,"nodeType":"839","messageId":"840","endLine":820,"endColumn":98},{"ruleId":"792","severity":1,"message":"841","line":39,"column":8,"nodeType":"794","messageId":"795","endLine":39,"endColumn":13},{"ruleId":"792","severity":1,"message":"842","line":70,"column":8,"nodeType":"794","messageId":"795","endLine":70,"endColumn":18},{"ruleId":"792","severity":1,"message":"843","line":71,"column":8,"nodeType":"794","messageId":"795","endLine":71,"endColumn":17},{"ruleId":"792","severity":1,"message":"844","line":97,"column":8,"nodeType":"794","messageId":"795","endLine":97,"endColumn":21},{"ruleId":"792","severity":1,"message":"845","line":314,"column":9,"nodeType":"794","messageId":"795","endLine":314,"endColumn":22},{"ruleId":"792","severity":1,"message":"846","line":319,"column":9,"nodeType":"794","messageId":"795","endLine":319,"endColumn":28},{"ruleId":"792","severity":1,"message":"817","line":849,"column":12,"nodeType":"794","messageId":"795","endLine":849,"endColumn":26},{"ruleId":"792","severity":1,"message":"817","line":1043,"column":12,"nodeType":"794","messageId":"795","endLine":1043,"endColumn":26},{"ruleId":"792","severity":1,"message":"847","line":1,"column":17,"nodeType":"794","messageId":"795","endLine":1,"endColumn":26},{"ruleId":"792","severity":1,"message":"848","line":1,"column":17,"nodeType":"794","messageId":"795","endLine":1,"endColumn":25},{"ruleId":"792","severity":1,"message":"847","line":1,"column":27,"nodeType":"794","messageId":"795","endLine":1,"endColumn":36},{"ruleId":"792","severity":1,"message":"793","line":1,"column":38,"nodeType":"794","messageId":"795","endLine":1,"endColumn":48},{"ruleId":"792","severity":1,"message":"849","line":1,"column":50,"nodeType":"794","messageId":"795","endLine":1,"endColumn":56},{"ruleId":"792","severity":1,"message":"850","line":18,"column":8,"nodeType":"794","messageId":"795","endLine":18,"endColumn":15},{"ruleId":"792","severity":1,"message":"851","line":24,"column":10,"nodeType":"794","messageId":"795","endLine":24,"endColumn":15},{"ruleId":"820","severity":1,"message":"831","line":392,"column":63,"nodeType":"822","messageId":"832","endLine":392,"endColumn":65},{"ruleId":"852","severity":1,"message":"853","line":22,"column":25,"nodeType":"836","endLine":22,"endColumn":96},"no-native-reassign",["854"],"no-negated-in-lhs",["855"],"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'PageTitle' is defined but never used.","'ApprovedSuccess' is defined but never used.","'register' is assigned a value but never used.","'reset' is assigned a value but never used.","'approval_token' is assigned a value but never used.","'mobile' is assigned a value but never used.","'useTableStyles' is assigned a value but never used.","'Invoice' is defined but never used.","'MatchJDDialog' is defined but never used.","'matchJDOpen' is assigned a value but never used.","'handleJDClose' is assigned a value but never used.","'handleJDOpen' is assigned a value but never used.","'matchLoading' is assigned a value but never used.","'candidMatchId' is assigned a value but never used.","'setCandidMatchId' is assigned a value but never used.","'requirementName' is assigned a value but never used.","'setRequirementName' is assigned a value but never used.","'getCanididateResumeInfo' is defined but never used.","'aiResumeUpload' is defined but never used.","'cvMatchingPercentage' is defined but never used.","'removePercentage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'decode.companyType' and 'requirement'. Either include them or remove the dependency array. You can also do a functional update 'setRequirement(r => ...)' if you only need 'requirement' in the 'setRequirement' call.","ArrayExpression",["856"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'resumeExtract' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'resumeSearch' is defined but never used.","jsx-a11y/alt-text","Invalid alt value for img. Use alt=\"\" for presentational images.","JSXOpeningElement","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'Badge' is defined but never used.","'walletBlue' is defined but never used.","'walletRed' is defined but never used.","'ArrowLeftIcon' is defined but never used.","'handleQAClick' is assigned a value but never used.","'handleQAMobileClick' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'Tooltip' is defined but never used.","'toast' is defined but never used.","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","no-global-assign","no-unsafe-negation",{"desc":"857","fix":"858"},"Update the dependencies array to be: [decode.companyType, requirement, token]",{"range":"859","text":"860"},[30971,30978],"[decode.companyType, requirement, token]"]